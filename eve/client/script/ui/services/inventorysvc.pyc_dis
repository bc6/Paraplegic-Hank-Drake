#Embedded file name: c:/depot/games/branches/release/EVE-TRANQUILITY/eve/client/script/ui/services/inventorysvc.py
import _weakref
import uthread
import service
import log
import blue
import util
import uix
import sys
import log
import bluepy

class InventorySvc(service.Service):
    __guid__ = 'svc.inv'
    __exportedcalls__ = {'Register': [],
     'Unregister': []}
    __notifyevents__ = []

    def Run(self, *etc):
        service.Service.Run(self, *etc)
        self.regs = {}
        self.itemClipboard = []
        self.itemClipboardCopy = False
        self.tempInvLocations = []

    @bluepy.CCP_STATS_ZONE_METHOD
    def OnItemChange(self, item, change):
        self.LogInfo('OnItemChange', change, item)
        self.ClearItemClipboard()
        fancyChange = {}
        for k, v in change.iteritems():
            fancyChange[item.__columns__[k]] = (v, '->', item[k])

        self.LogInfo('OnItemChange (fancy)', fancyChange, item)
        old = blue.DBRow(item)
        for k, v in change.iteritems():
            if k == const.ixSingleton and v == 0:
                v = 1
            if k in (const.ixStackSize, const.ixSingleton):
                k = const.ixQuantity
            old[k] = v

        closeContainer = 0
        containerCookie = None
        containerName = ''
        if item.groupID in (const.groupWreck,
         const.groupCargoContainer,
         const.groupSecureCargoContainer,
         const.groupAuditLogSecureContainer,
         const.groupFreightContainer) and item.singleton:
            if const.ixLocationID in change or const.ixOwnerID in change or const.ixFlag in change:
                closeContainer = 1
                containerName = 'loot_%s' % item.itemID
        for cookie, wr in self.regs.items():
            ob = wr()
            if not ob or ob.destroyed:
                self.Unregister(cookie)
                continue
            if closeContainer == 1:
                if getattr(ob, 'id', 0) == item.itemID:
                    containerCookie = cookie
                    continue
                if getattr(ob, 'name', '') == containerName:
                    containerCookie = cookie
                    continue
            if hasattr(ob, 'invController'):
                if ob.invController is None:
                    continue
                wasHere = old.stacksize != 0 and ob.invController.IsItemHere(old)
                isHere = item.stacksize != 0 and ob.invController.IsItemHere(item)
            else:
                wasHere = old.stacksize != 0 and ob.IsItemHere(old)
                isHere = item.stacksize != 0 and ob.IsItemHere(item)
            try:
                if getattr(ob, 'OnInvChangeAny', None):
                    ob.OnInvChangeAny(item, change)
                if not wasHere and not isHere:
                    continue
                if wasHere and isHere and getattr(ob, 'UpdateItem', None):
                    ob.UpdateItem(item, change)
                elif wasHere and not isHere and getattr(ob, 'RemoveItem', None):
                    ob.RemoveItem(item)
                elif not wasHere and isHere and getattr(ob, 'AddItem', None):
                    ob.AddItem(item)
                if getattr(ob, 'OnInvChange', None):
                    ob.OnInvChange(item, change)
            except:
                self.Unregister(cookie)
                log.LogException('svc.inv')
                sys.exc_clear()

        if closeContainer == 1:
            if containerCookie is not None:
                self.Unregister(containerCookie)
            sm.GetService('window').CloseContainer(item.itemID)

    def Register(self, callbackObj):
        cookie = uthread.uniqueId() or uthread.uniqueId()
        self.LogInfo('Registering', cookie, callbackObj)
        self.regs[cookie] = _weakref.ref(callbackObj)
        return cookie

    def Unregister(self, cookie):
        if cookie in self.regs:
            del self.regs[cookie]
            self.LogInfo('Unregistered', cookie)
        else:
            log.LogWarn('inv.Unregister: Unknown cookie', cookie)

    def SetItemClipboard(self, nodes, copy = False):
        newNodes = []
        for node in nodes:
            if not self.IsOnClipboard(node.item.itemID):
                newNodes.append(node)

        self.itemClipboard = newNodes
        self.itemClipboardCopy = copy
        sm.ScatterEvent('OnInvClipboardChanged')

    @bluepy.CCP_STATS_ZONE_METHOD
    def PopItemClipboard(self):
        ret = self.itemClipboard
        if not self.itemClipboardCopy:
            self.itemClipboard = []
        sm.ScatterEvent('OnInvClipboardChanged')
        return (ret, self.itemClipboardCopy)

    @bluepy.CCP_STATS_ZONE_METHOD
    def ClearItemClipboard(self):
        if self.itemClipboard:
            self.itemClipboard = []
            sm.ScatterEvent('OnInvClipboardChanged')

    def IsOnClipboard(self, itemID):
        if self.itemClipboardCopy:
            return
        itemIDs = [ node.item.itemID for node in self.itemClipboard ]
        return itemID in itemIDs

    def GetTemporaryInvLocations(self):
        if not session.solarsystemid:
            self.tempInvLocations = []
        else:
            bp = sm.GetService('michelle').GetBallpark()
            for invName, itemID in self.tempInvLocations:
                if itemID not in bp.slimItems:
                    self.tempInvLocations.remove((invName, itemID))

        return self.tempInvLocations

    def AddTemporaryInvLocation(self, invID):
        if invID not in self.tempInvLocations:
            self.tempInvLocations.append(invID)
            sm.ChainEvent('ProcessTempInvLocationAdded', invID)

    def RemoveTemporaryInvLocation(self, invID):
        if invID in self.tempInvLocations:
            self.tempInvLocations.remove(invID)
            sm.ChainEvent('ProcessTempInvLocationRemoved', invID)