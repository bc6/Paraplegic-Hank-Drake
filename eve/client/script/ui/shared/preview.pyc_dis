#Embedded file name: c:/depot/games/branches/release/EVE-TRANQUILITY/eve/client/script/ui/shared/preview.py
from service import *
import blue
import trinity
import log
import math
import uiutil
import form
import uthread
import random
import util
import uicls
import uiconst
import paperDoll as pd
import GameWorld
import ccUtil
import ccConst
import geo2
import turretSet
import localization
MESH_NAMES_BY_GROUPID = {1083: 'accessories',
 1084: pd.BODY_CATEGORIES.TATTOO,
 1085: 'TODO',
 1086: pd.BODY_CATEGORIES.SCARS,
 1087: pd.BODY_CATEGORIES.TOPINNER,
 1088: pd.BODY_CATEGORIES.OUTER,
 1089: pd.BODY_CATEGORIES.TOPINNER,
 1090: pd.BODY_CATEGORIES.BOTTOMOUTER,
 1091: pd.BODY_CATEGORIES.FEET,
 1092: pd.DOLL_PARTS.HAIR,
 1093: pd.HEAD_CATEGORIES.MAKEUP}
paperDollCategories = [30]

def GetPaperDollResource(typeID):
    assets = []
    for each in cfg.paperdollResources:
        if each.typeID == typeID:
            assets.append(each)

    if len(assets) == 1:
        return assets[0]
    if len(assets) > 1:
        for asset in assets:
            if eve.session.genderID == asset.resGender:
                return asset

    log.LogError('PreviewWnd::PreviewType - No asset matched the typeID: %d' % typeID)


class Preview(Service):
    __exportedcalls__ = {'PreviewType': [],
     'PreviewCharacter': []}
    __dependencies__ = []
    __update_on_reload__ = 0
    __guid__ = 'svc.preview'
    __servicename__ = 'preview'
    __displayname__ = 'Preview Service'

    def Run(self, memStream = None):
        self.LogInfo('Starting Preview Service')

    def PreviewType(self, typeID, subsystems = None):
        wnd = form.PreviewWnd.GetIfOpen()
        if wnd:
            wnd.PreviewType(typeID, subsystems)
        else:
            wnd = form.PreviewWnd.Open(previewType=(typeID, subsystems))
            wnd.LoadWnd()

    def PreviewCharacter(self, charID):
        if getattr(self, 'running', False) or charID in const.auraAgentIDs:
            return
        dna = sm.RemoteSvc('paperDollServer').GetPaperDollData(charID)
        if dna is None:
            raise UserError('CharacterHasNoDNA', {'charID': charID})
        wnd = form.PreviewWnd.GetIfOpen()
        if wnd:
            wnd.PreviewCharacter(charID, dna=dna)
        else:
            wnd = form.PreviewWnd.Open(previewCharacter=charID, dna=dna)
            wnd.LoadWnd()
        return wnd


class PreviewWnd(uicls.Window):
    __guid__ = 'form.PreviewWnd'
    __notifyevents__ = ['OnSetDevice', 'OnResizeUpdate']
    default_windowID = 'previewWnd'

    def ApplyAttributes(self, attributes):
        uicls.Window.ApplyAttributes(self, attributes)
        self.typeID = None
        self.scope = 'all'
        self.SetCaption(localization.GetByLabel('UI/Preview/PreviewCaption'))
        self.sr.main = uiutil.GetChild(self, 'main')
        self.SetWndIcon()
        self.SetTopparentHeight(0)
        self.SetMinSize([420, 320])
        self.sr.rightSide = rightSide = uicls.Container(name='rightSide', parent=self.sr.main, align=uiconst.TOALL, pos=(0, 0, 0, 0), padding=(6, 6, 6, 6), clipChildren=1)
        self.loadingWheel = uicls.LoadingWheel(parent=self.sr.rightSide, align=uiconst.CENTER, state=uiconst.UI_NORMAL)
        listbtn = uicls.MenuIcon(size=24, ignoreSize=True)
        listbtn.sr.owner = self
        listbtn.state = uiconst.UI_NORMAL
        listbtn.align = uiconst.NOALIGN
        listbtn.left = 2
        listbtn.top = 10
        listbtn.hint = localization.GetByLabel('UI/Neocom/ListItemsInSystem')
        listbtn.GetMenu = self.GetShipMenu
        self.listbtn = listbtn
        self.sr.title = t = uicls.EveCaptionMedium(text='', parent=rightSide, align=uiconst.TOTOP, padding=(17, 4, 17, 0), state=uiconst.UI_NORMAL)
        self.sr.title.GetMenu = self.GetShipMenu
        self.sr.title.expandOnLeft = 1
        self.sr.subtitle = uicls.EveHeaderSmall(text='', parent=rightSide, align=uiconst.TOTOP, padding=(19, 0, 17, 0), state=uiconst.UI_DISABLED)
        self.textCont = uicls.Container(parent=self.sr.rightSide, align=uiconst.TOBOTTOM, pos=(0, 0, 0, 150))
        self.desc = uicls.EditPlainText(parent=self.textCont, readonly=1, padding=6, fontsize=12)
        self.desc.HideBackground()
        self.desc.RemoveActiveFrame()
        sc = form.SceneContainer(parent=self.sr.main, align=uiconst.TOALL, state=uiconst.UI_DISABLED, padding=6)
        sc.Startup()
        self.sr.sceneContainer = sc
        nav = form.SceneContainerBaseNavigation(parent=self.sr.main, state=uiconst.UI_NORMAL, padding=6)
        nav.Startup(sc)
        nav.OnClick = self.OnClickNav
        self.sr.navigation = nav
        self.mannequin = None
        self.loadingCharacterThread = None
        self.previewingWhat = ''
        self.previewType = attributes.previewType
        self.previewCharacterInfo = None
        if attributes.previewCharacter:
            dna = attributes.dna
            if dna:
                self.previewCharacterInfo = (attributes.previewCharacter, dna)

    def LoadWnd(self):
        if self.previewType is not None:
            self.PreviewType(*self.previewType)
        elif self.previewCharacterInfo is not None:
            self.PreviewCharacter(*self.previewCharacterInfo)

    def _OnClose(self, *args):
        if self.previewCharacterInfo is not None:
            charID = self.previewCharacterInfo[0]
            sm.GetService('character').RemoveCharacter(charID)
            self.previewCharacterInfo = None
        self.CloseSubSystemWnd()
        self.sr.sceneContainer.scene = None
        self.sr.sceneContainer.renderJob = None
        self.sr.sceneContainer = None
        self.mannequin = None
        self.running = None
        if self.loadingCharacterThread is not None:
            self.loadingCharacterThread.kill()
            self.loadingCharacterThread = None

    def OnClickNav(self, *args):
        self.BringToFront()

    def BringToFront(self):
        self.Maximize()
        wnd = form.AssembleShip.GetIfOpen(windowID='PreviewSubSystems')
        if wnd:
            wnd.Maximize()

    def GetShipMenu(self, *args):
        return sm.GetService('menu').GetMenuFormItemIDTypeID(None, getattr(self, 'typeID', None), ignoreMarketDetails=False, filterFunc=[localization.GetByLabel('UI/Preview/Preview')])

    def PreviewCharacter(self, charID, dna):
        if getattr(self, 'running', False):
            return
        self.running = True
        if self.previewCharacterInfo is not None:
            prevCharID = self.previewCharacterInfo[0]
            sm.GetService('character').RemoveCharacter(prevCharID)
        self.previewCharacterInfo = (charID, dna)
        self.loadingCharacterThread = uthread.new(self.PreviewCharacter_thread, charID, dna)

    def PreviewCharacter_thread(self, charID, dna):
        try:
            self.loadingWheel.Show()
            self.needToReloadCharacterLater = None
            self.previewingWhat = 'character'
            self.sr.sceneContainer.PrepareCamera()
            caption = localization.GetByLabel('UI/InfoWindow/PortraitCaption', character=charID)
            self.SetCaption(caption)
            self.sr.title.display = False
            self.sr.subtitle.display = False
            if getattr(self, 'btnGroup', None):
                self.btnGroup.display = True
            else:
                btns = [[localization.GetByLabel('UI/Preview/ViewPortrait'),
                  self.SwitchToPortrait,
                  (charID,),
                  81,
                  1,
                  1,
                  0]]
                self.btnGroup = uicls.ButtonGroup(btns=btns, parent=self.sr.main, idx=0)
            self.textCont.display = False
            charSvc = sm.GetService('character')
            self.sr.sceneContainer.PrepareInteriorScene(addShadowStep=True)
            scene = self.sr.sceneContainer.scene
            if scene.apexScene is not None:
                scene.apexScene.CreatePlane((0, 0, 0), (0, 1, 0), 0)
            owner = cfg.eveowners.Get(charID)
            bloodlineID = sm.GetService('info').GetBloodlineByTypeID(owner.typeID).bloodlineID
            if not hasattr(owner, 'gender') or owner.gender is None:
                return
            gender = ccUtil.GenderIDToPaperDollGender(owner.gender)
            character = charSvc.AddCharacterToScene(charID, scene, gender, bloodlineID, dna=dna, lod=pd.LOD_SKIN, updateDoll=False)
            textureQuality = settings.public.device.Get('charTextureQuality', sm.GetService('device').GetDefaultCharTextureQuality())
            character.doll.textureResolution = ccConst.DOLL_VIEWER_TEXTURE_RESOLUTIONS[textureQuality]
            useFastShader = settings.public.device.Get('fastCharacterCreation', False)
            lowShaderQuality = settings.public.device.Get('shaderQuality', 3) <= 2
            slowMachine = useFastShader or lowShaderQuality
            character.doll.useFastShader = useFastShader
            charSvc.UpdateDoll(charID)
            floor = trinity.Load(ccConst.CUSTOMIZATION_FLOOR)
            if floor is not None:
                scene.dynamics.append(floor)
            camera = self.sr.sceneContainer.camera
            navigation = self.sr.navigation
            while character.doll.busyUpdating:
                blue.synchro.Yield()

            if not slowMachine and settings.public.device.Get('shaderQuality', 3) > 2:
                shadowMapSize = 512 if textureQuality == 0 else 256
                lightFilter = ['FrontMain']
                pd.SkinSpotLightShadows.SetupForCharacterCreator(scene, shadowMapSize=shadowMapSize, lightFilter=lightFilter)
            aabb = character.visualModel.GetBoundingBoxInLocalSpace()
            p0 = aabb[0]
            p1 = aabb[1]
            center = (0.5 * (p0.x + p1.x), 0.5 * (p0.y + p1.y), 0.5 * (p0.z + p1.z))
            self.sr.sceneContainer.cameraParent.translation = trinity.TriVector(*center)
            self.sr.sceneContainer.camera.maxPitch = 0.1
            diff = (p0.x - p1.x, p0.y - p1.y, p0.z - p1.z)
            rad = geo2.Vec3Length(diff)
            rad = max(rad, 0.3)
            minZoom = 3 * rad + self.sr.sceneContainer.frontClip
            alpha = self.sr.sceneContainer.fieldOfView / 2.0
            maxZoom = min(rad * (1 / math.tan(alpha * 1.5)), 9.0)
            camera.translationFromParent.z = minZoom * 3
            navigation.SetMinMaxZoom(minZoom, maxZoom)
            self.sr.sceneContainer.UpdateViewPort()
            self.Maximize()
            self.characterFailedToLoad = False
        except Exception as e:
            self.characterFailedToLoad = True
            raise e
        finally:
            self.loadingWheel.Hide()
            self.running = False
            self.loadingCharacterThread = None

    def SwitchToPortrait(self, charID):
        form.PortraitWindow.CloseIfOpen()
        portraitWnd = form.PortraitWindow.Open(charID=charID)
        portraitWnd.Maximize()
        self.CloseByUser()

    def PreviewType(self, typeID, subsystems = None):
        if getattr(self, 'running', False):
            return
        self.running = True
        self.previewingWhat = 'type'
        if getattr(self, 'btnGroup', None):
            self.btnGroup.display = False
        self.SetCaption(localization.GetByLabel('UI/Preview/PreviewCaption'))
        self.sr.title.display = True
        self.sr.subtitle.display = True
        typeID = int(typeID)
        if typeID != self.typeID:
            self.CloseSubSystemWnd()
        isFirst = self.typeID is None
        typeOb = cfg.invtypes.Get(typeID)
        groupID = typeOb.groupID
        groupOb = cfg.invgroups.Get(groupID)
        categoryID = groupOb.categoryID
        self.categoryID = categoryID
        self.groupID = groupID
        self.typeID = typeID
        self.sr.title.text = cfg.invtypes.Get(typeID).name
        rad = 4.0
        self.textCont.display = False
        self.SetMinSize([420, 320])
        self.SetMaxSize([None, None])
        self.sr.subtitle.text = ''
        godma = sm.GetService('godma')
        try:
            techLevel = godma.GetTypeAttribute(typeID, const.attributeTechLevel)
        except:
            techLevel = 1.0

        self.loadingWheel.Show()
        if categoryID == const.categoryShip and techLevel == 3.0:
            self.sr.sceneContainer.PrepareSpaceScene()
            if subsystems is None:
                subsystems = {}
                subSystemsForType = {}
                for group in cfg.groupsByCategories.get(const.categorySubSystem, []):
                    if group.groupID not in subSystemsForType:
                        subSystemsForType[group.groupID] = []
                    for t in cfg.typesByGroups.get(group.groupID, []):
                        if t.published and godma.GetTypeAttribute(t.typeID, const.attributeFitsToShipType) == typeID:
                            subSystemsForType[group.groupID].append(t.typeID)

                for k, v in subSystemsForType.iteritems():
                    subsystems[k] = random.choice(v)

            model = sm.StartService('t3ShipSvc').GetTech3ShipFromDict(typeID, subsystems)
            radius = round(model.GetBoundingSphereRadius() * 2, 0)
            self.SetShipSubLabel(typeOb, groupOb, radius)
            kv = util.KeyVal(typeID=typeID)
            form.AssembleShip.Open(windowID='PreviewSubSystems', ship=kv, groupIDs=None, isPreview=True, setselected=subsystems)
        elif self.categoryID in paperDollCategories:
            desc = typeOb.description
            desc = desc or ''
            for each in ('<b>', '</b>', '\r'):
                desc = desc.replace(each, '')

            desc = desc.replace('\n', '<br>')
            self.desc.SetValue(desc)
            self.textCont.display = True
            self.SetMinSize([320, 470])
            self.SetMaxSize([800, 950])
            self.sr.sceneContainer.cameraParent.translation = trinity.TriVector(9.0, -1000, 0.0)
            self.sr.sceneContainer.PrepareInteriorScene()
            scene = self.sr.sceneContainer.scene
            factory = pd.Factory()
            asset = GetPaperDollResource(typeID)
            if asset is None:
                log.LogError('PreviewWnd::PreviewType - Invalid asset')
                self.loadingWheel.Hide()
                return
            path = asset.resPath
            genderID = asset.resGender
            self.mannequin = pd.PaperDollCharacter(factory)
            self.mannequin.doll = pd.Doll('mannequin', gender=ccUtil.GenderIDToPaperDollGender(genderID))
            if genderID == ccConst.GENDERID_MALE:
                self.mannequin.doll.Load('res:/Graphics/Character/DNAFiles/Mannequin/MaleMannequin.prs', factory)
            else:
                self.mannequin.doll.Load('res:/Graphics/Character/DNAFiles/Mannequin/FemaleMannequin.prs', factory)
            while self.mannequin.doll.busyUpdating:
                blue.synchro.Yield()
                if self.mannequin is None:
                    return

            textureQuality = settings.public.device.Get('charTextureQuality', sm.GetService('device').GetDefaultCharTextureQuality())
            resolution = ccConst.TEXTURE_RESOLUTIONS[textureQuality]
            self.mannequin.doll.overrideLod = 0
            self.mannequin.doll.textureResolution = resolution
            self.mannequin.Spawn(scene, usePrepass=False)
            while self.mannequin.doll.busyUpdating:
                blue.synchro.Yield()
                if self.mannequin is None:
                    return

            meshListPre = self.mannequin.doll.buildDataManager.GetMeshes(includeClothMeshes=True)
            self.mannequin.doll.SetItemType(factory, path, weight=1.0)
            self.mannequin.Update()
            while self.mannequin.doll.busyUpdating:
                blue.synchro.Yield()
                if self.mannequin is None:
                    return

            meshListPost = self.mannequin.doll.buildDataManager.GetMeshes(includeClothMeshes=True)
            animationUpdater = GameWorld.GWAnimation('res:/Animation/MorphemeIncarna/Export/Mannequin/Mannequin.mor')
            if animationUpdater is not None:
                self.mannequin.avatar.animationUpdater = animationUpdater
                if self.mannequin.doll.gender == pd.GENDER.FEMALE:
                    animationUpdater.network.SetAnimationSetIndex(0)
                else:
                    animationUpdater.network.SetAnimationSetIndex(1)
            bBox = (geo2.Vector(1000.0, 1000.0, 1000.0), geo2.Vector(-1000.0, -1000.0, -1000.0))
            if groupID in MESH_NAMES_BY_GROUPID:
                meshName = MESH_NAMES_BY_GROUPID[groupID]
                found = False
                for mesh in meshListPost:
                    if mesh.name.startswith(meshName) or mesh not in meshListPre:
                        fromMesh = mesh.geometry.GetBoundingBox(0)
                        bBox[0].x = min(bBox[0].x, fromMesh[0].x)
                        bBox[0].y = min(bBox[0].y, fromMesh[0].y)
                        bBox[0].z = min(bBox[0].z, fromMesh[0].z)
                        bBox[1].x = max(bBox[1].x, fromMesh[1].x)
                        bBox[1].y = max(bBox[1].y, fromMesh[1].y)
                        bBox[1].z = max(bBox[1].z, fromMesh[1].z)
                        found = True

                if not found:
                    bBox = (geo2.Vector(-0.1, 1.6, -0.1), geo2.Vector(0.1, 1.8, 0.1))
            center = ((bBox[1].x + bBox[0].x) / 2.0, (bBox[1].y + bBox[0].y) / 2.0, (bBox[1].z + bBox[0].z) / 2.0)
            rad = geo2.Vec3Length(bBox[0] - bBox[1])
            rad = max(rad, 0.3)
            self.sr.sceneContainer.cameraParent.translation = trinity.TriVector(*center)
            floor = trinity.Load(ccConst.CUSTOMIZATION_FLOOR)
            scene.dynamics.append(floor)
            model = None
        elif self.groupID in const.turretModuleGroups:
            self.sr.sceneContainer.PrepareSpaceScene(0.0, 'res:/dx9/scene/fitting/previewTurrets.red')
            model = trinity.Load('res:/dx9/model/ship/IconPreview/PreviewTurretShip.red')
            tSet = turretSet.TurretSet.FitTurret(model, None, typeID, 1, checkSettings=False)
            if tSet is not None:
                boundingSphere = tSet.turretSets[0].boundingSphere
                model.boundingSphereRadius = boundingSphere[3]
                model.boundingSphereCenter = boundingSphere[:3]
                if model.boundingSphereCenter[1] < 2.0:
                    model.boundingSphereCenter = (boundingSphere[0], 2.0, boundingSphere[2])
                for ts in tSet.turretSets:
                    ts.bottomClipHeight = 0.0
                    ts.FreezeHighDetailLOD()
                    ts.ForceStateDeactive()
                    ts.EnterStateIdle()

                self.sr.subtitle.text = localization.GetByLabel('UI/Preview/ShipSubLabelNoRace', groupName=groupOb.groupName, length=util.FmtDist(model.boundingSphereRadius))
        elif self.groupID in const.turretAmmoGroups:
            if const.useNewMissileSystem_removeThisSoon:
                self.sr.sceneContainer.PrepareSpaceScene(0.0, 'res:/dx9/scene/fitting/previewAmmo.red')
                model = trinity.Load('res:/dx9/model/ship/IconPreview/PreviewAmmoShip.red')
                self.sr.sceneContainer.AddToScene(model)
                ammoRedFile = typeOb.GraphicFile()
                ammoRedFile = ammoRedFile[:-4] + '_hi' + ammoRedFile[-4:]
                ammo = trinity.Load(ammoRedFile)
                if ammo.__bluetype__ == 'trinity.EveMissile':
                    floatHeight = ammo.boundingSphereRadius - ammo.boundingSphereCenter[2]
                    floatHeight += 0.2 * ammo.boundingSphereRadius
                    model.boundingSphereRadius = ammo.boundingSphereRadius + floatHeight
                    model.boundingSphereCenter = (0.0, ammo.boundingSphereRadius + 0.5 * floatHeight, 0.0)
                    warhead = ammo.warheads[0]
                    warhead.rotation = geo2.QuaternionRotationAxis((1.0, 0.0, 0.0), -0.5 * math.pi)
                    warhead.translation = (0.0, floatHeight, 0.0)
                    warhead.startDataValid = True
                    del warhead.children[:]
                    model.children.append(warhead)
                    warheadReflection = warhead.CopyTo()
                    warheadReflection.rotation = geo2.QuaternionRotationAxis((1.0, 0.0, 0.0), 0.5 * math.pi)
                    warheadReflection.translation = (0.0, -floatHeight, 0.0)
                    warheadReflection.startDataValid = True
                    model.children.append(warheadReflection)
                    self.sr.subtitle.text = localization.GetByLabel('UI/Preview/ShipSubLabelNoRace', groupName=groupOb.groupName, length=util.FmtDist(model.boundingSphereRadius))
                else:
                    log.LogWarn('type', typeID, ' is not an EveMissile but still wants to be previewed as one')
                    model = None
        else:
            self.sr.sceneContainer.PrepareSpaceScene()
            fileName = typeOb.GraphicFile()
            if fileName == '':
                log.LogWarn('type', typeID, 'has no graphicFile')
                self.loadingWheel.Hide()
                return
            fileName = fileName.replace(':/Model', ':/dx9/Model').replace('.blue', '.red')
            fileName = fileName.partition(' ')[0]
            model = trinity.Load(fileName)
            radius = round(model.GetBoundingSphereRadius() * 2, 0)
            self.SetShipSubLabel(typeOb, groupOb, radius)
            if model is None:
                self.sr.sceneContainer.ClearScene()
                self.loadingWheel.Hide()
                raise UserError('PreviewNoModel')
            if getattr(model, 'boosters', None) is not None:
                model.boosters = None
            if getattr(model, 'modelRotationCurve', None) is not None:
                model.modelRotationCurve = None
            if getattr(model, 'modelTranslationCurve', None) is not None:
                model.modelTranslationCurve = None
        if hasattr(model, 'ChainAnimationEx'):
            model.ChainAnimationEx('NormalLoop', 0, 0, 1.0)
        self.sr.sceneContainer.AddToScene(model)
        camera = self.sr.sceneContainer.camera
        navigation = self.sr.navigation
        spaceObject = False
        if hasattr(model, 'GetBoundingSphereRadius'):
            rad = model.GetBoundingSphereRadius()
            spaceObject = True
        minZoom = rad + self.sr.sceneContainer.frontClip
        alpha = self.sr.sceneContainer.fieldOfView / 2.0
        if spaceObject:
            maxZoom = max(rad * (1 / math.tan(alpha)) * 2, 1.0)
            camera.translationFromParent.z = minZoom * 2
        else:
            maxZoom = min(rad * (1 / math.tan(alpha * 1.5)), 7.0)
            camera.translationFromParent.z = minZoom * 3
        navigation.SetMinMaxZoom(minZoom, maxZoom)
        self.sr.sceneContainer.UpdateViewPort()
        self.BringToFront()
        if isFirst:
            uthread.new(self.OrbitParent)
        self.loadingWheel.Hide()
        self.running = False

    def SetShipSubLabel(self, typeObject, groupObject, modelRadius):
        race = None
        if typeObject.raceID in cfg.races:
            race = cfg.races.Get(typeObject.raceID)
        if race is None:
            self.sr.subtitle.text = localization.GetByLabel('UI/Preview/ShipSubLabelNoRace', groupName=groupObject.groupName, length=util.FmtDist(modelRadius))
        else:
            raceName = localization.GetByMessageID(race.raceNameID)
            self.sr.subtitle.text = localization.GetByLabel('UI/Preview/ShipSubLabel', raceName=raceName, groupName=groupObject.groupName, length=util.FmtDist(modelRadius))

    def OrbitParent(self):
        self.sr.sceneContainer.camera.OrbitParent(8.0, 5.0)

    def CloseSubSystemWnd(self):
        form.AssembleShip.CloseIfOpen(windowID='PreviewSubSystems')

    def OnResize_(self, *args):
        self.OnResizeUpdate()

    def OnMove(self, *args):
        if self.sr.Get('sceneContainer'):
            self.sr.sceneContainer.UpdateViewPort()

    def OnResizeUpdate(self, *args):
        if self.sr.Get('sceneContainer'):
            self.sr.sceneContainer.UpdateViewPort()
        if getattr(self, 'needToReloadCharacterLater', None):
            self.needToReloadCharacterLater = self.DoesCharacterNeedReload()

    def OnEndScale_(self, *args):
        characterNeedsToBeReloaded = self.DoesCharacterNeedReload()
        if characterNeedsToBeReloaded or getattr(self, 'needToReloadCharacterLater', False):
            self.TryReloadCharacter()

    def OnSetDevice(self):
        uthread.new(self.sr.sceneContainer.UpdateViewPort)
        characterNeedsToBeReloaded = self.DoesCharacterNeedReload()
        if characterNeedsToBeReloaded or getattr(self, 'needToReloadCharacterLater', False):
            self.TryReloadCharacter()

    def BuyType(self, typeID, *args):
        sm.GetService('store').TryBuyType(typeID)

    def DoesCharacterNeedReload(self, *args):
        if self.previewCharacterInfo:
            if self.loadingCharacterThread is not None or getattr(self, 'characterFailedToLoad', False):
                if self.loadingCharacterThread:
                    self.loadingCharacterThread.kill()
                    self.loadingCharacterThread = None
                self.running = False
                return True
        return False

    def TryReloadCharacter(self):
        if self.previewCharacterInfo:
            self.running = False
            charID = self.previewCharacterInfo[0]
            dna = self.previewCharacterInfo[1]
            self.PreviewCharacter(charID, dna)