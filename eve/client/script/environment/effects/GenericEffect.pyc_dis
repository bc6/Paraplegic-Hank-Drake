#Embedded file name: c:/depot/games/branches/release/EVE-TRANQUILITY/eve/client/script/environment/effects/GenericEffect.py
import blue
import trinity
import audio2

class GenericEffect:
    __guid__ = 'effects.GenericEffect'

    def __init__(self, trigger, transformFlags = 0, mergeFlags = 0, graphicFile = None, scaleTime = True, duration = 10000):
        self.ballIDs = [trigger.shipID, trigger.targetID]
        self.gfx = None
        self.gfxModel = None
        self.graphicFile = graphicFile
        self.transformFlags = transformFlags
        self.mergeFlags = mergeFlags
        self.duration = duration
        self.scaleTime = scaleTime
        self.fxSequencer = sm.GetService('FxSequencer')

    def Prepare(self):
        pass

    def Start(self, duration):
        pass

    def Stop(self):
        pass

    def Repeat(self, duration):
        pass

    def GetBalls(self):
        return self.ballIDs

    def GetEffectShipID(self):
        return self.ballIDs[0]

    def GetEffectShipBall(self):
        return self.fxSequencer.GetBall(self.GetEffectShipID())

    def GetEffectTargetID(self):
        return self.ballIDs[1]

    def GetEffectTargetBall(self):
        return self.fxSequencer.GetBall(self.GetEffectTargetID())

    def PlayOldAnimations(self, tf):
        curveTypes = ['trinity.TriScalarCurve',
         'trinity.TriVectorCurve',
         'trinity.TriRotationCurve',
         'trinity.TriColorCurve']
        curves = tf.Find(curveTypes)
        now = blue.os.GetSimTime()
        for curve in curves:
            curve.start = now

    def PlayNamedAnimations(self, model, animName):
        if not model:
            return
        for each in model.curveSets:
            if each.name == animName:
                each.Play()

    def AddSoundToEffect(self, scaler):
        import effects
        if effects.FX_TF_POSITION_TARGET & self.transformFlags:
            effectBall = self.GetEffectTargetBall()
        else:
            effectBall = self.GetEffectShipBall()
        shipID = self.GetEffectShipID()
        entity = audio2.AudEmitter('effect_' + str(shipID) + '_' + self.__guid__)
        if self.gfx:
            srcRadius = effectBall.radius
        else:
            srcRadius = self.sourceObject.boundingSphereRadius
        attenuation = pow(srcRadius, 0.95) * 33 * scaler
        entity.SetAttenuationScalingFactor(attenuation)
        self.observer = trinity.TriObserverLocal()
        self.observer.observer = entity
        if self.gfx.__bluetype__ in ('trinity.EveTransform', 'trinity.EveStation2'):
            self.gfx.observers.append(self.observer)
        else:
            self.sourceObject.observers.append(self.observer)
        for curve in self.gfx.Find('trinity.TriEventCurve'):
            if curve.name == 'audioEvents':
                curve.eventListener = entity

    def AddToScene(self, effect):
        scene2 = self.fxSequencer.GetScene()
        scene2.objects.append(effect)

    def RemoveFromScene(self, effect):
        scene2 = self.fxSequencer.GetScene()
        scene2.objects.fremove(effect)


class ShipEffect(GenericEffect):
    __guid__ = 'effects.ShipEffect'

    def Stop(self):
        if self.gfx is None:
            raise RuntimeError('ShipEffect: no effect defined:' + self.__guid__)
        self.RemoveFromScene(self.gfxModel)
        self.gfx = None
        if self.gfxModel:
            self.gfxModel.translationCurve = None
            self.gfxModel.rotationCurve = None
        self.gfxModel = None

    def Prepare(self):
        shipBall = self.GetEffectShipBall()
        if shipBall is None:
            raise RuntimeError('ShipEffect: no ball found:' + self.__guid__)
        self.gfx = trinity.Load(self.graphicFile)
        if self.gfx is None:
            raise RuntimeError('ShipEffect: no effect found:' + self.__guid__)
        self.AddSoundToEffect(2)
        self.gfxModel = trinity.EveRootTransform()
        if shipBall.model.__bluetype__ == 'trinity.EveShip2':
            self.gfxModel.modelRotationCurve = shipBall.model.modelRotationCurve
            self.gfxModel.modelTranslationCurve = shipBall.model.modelTranslationCurve
        self.gfxModel.children.append(self.gfx)
        import effects
        effectBall = shipBall
        if effects.FX_TF_POSITION_BALL & self.transformFlags:
            self.gfxModel.translationCurve = shipBall
        if effects.FX_TF_POSITION_TARGET & self.transformFlags:
            effectBall = self.GetEffectTargetBall()
            self.gfxModel.translationCurve = effectBall
        if effects.FX_TF_SCALE_BOUNDING & self.transformFlags:
            shipBBoxMin, shipBBoxMax = effectBall.model.GetLocalBoundingBox()
            bBox = (max(-shipBBoxMin.x, shipBBoxMax.x) * 1.2, max(-shipBBoxMin.y, shipBBoxMax.y) * 1.2, max(-shipBBoxMin.z, shipBBoxMax.z) * 1.2)
            self.gfxModel.scaling = bBox
        elif effects.FX_TF_SCALE_SYMMETRIC & self.transformFlags:
            radius = effectBall.model.GetBoundingSphereRadius()
            originalScaling = self.gfx.scaling
            self.gfx.scaling = (radius * originalScaling[0], radius * originalScaling[1], radius * originalScaling[2])
            self.gfx.translation = effectBall.model.GetBoundingSphereCenter()
        elif effects.FX_TF_SCALE_RADIUS & self.transformFlags:
            radius = effectBall.model.GetBoundingSphereRadius()
            originalScaling = self.gfx.scaling
            self.gfx.scaling = (radius * originalScaling[0], radius * originalScaling[1], radius * originalScaling[2])
        if effects.FX_TF_ROTATION_BALL & self.transformFlags:
            self.gfxModel.rotationCurve = effectBall
        self.gfxModel.name = self.__guid__
        self.AddToScene(self.gfxModel)

    def Start(self, duration):
        if self.gfx is None:
            raise RuntimeError('ShipEffect: no effect defined:' + self.__guid__)
        curveSets = self.gfx.curveSets
        if len(curveSets) > 0:
            if self.scaleTime:
                length = self.gfx.curveSets[0].GetMaxCurveDuration()
                if length > 0.0:
                    scaleValue = length / (duration / 1000.0)
                    self.gfx.curveSets[0].scale = scaleValue
            curveSets[0].Play()

    def Repeat(self, duration):
        if self.gfx is None:
            raise RuntimeError('ShipEffect: no effect defined:' + self.__guid__)
        if self.gfxModel is not None:
            gfxModelChildren = self.gfxModel.children
            if len(gfxModelChildren):
                curveSets = gfxModelChildren[0].curveSets
                if len(curveSets):
                    curveSets[0].Play()


class ShipRenderEffect(ShipEffect):
    __guid__ = 'effects.ShipRenderEffect'

    def Prepare(self):
        shipBall = self.GetEffectShipBall()
        self.sourceObject = shipBall.model
        path = self.graphicFile
        if hasattr(self.sourceObject, 'GetBoneCount'):
            if self.sourceObject.GetBoneCount() > 0:
                path = path.replace('.red', '_skinned.red')
        self.gfx = trinity.Load(path)
        self.AddSoundToEffect(1)

    def Start(self, duration):
        if self.gfx is None:
            raise RuntimeError('ShipEffect: no effect defined')
        self.sourceObject.overlayEffects.append(self.gfx)
        if self.gfx.curveSet is not None:
            if self.scaleTime:
                length = self.gfx.curveSet.GetMaxCurveDuration()
                if length > 0.0:
                    scaleValue = length / (duration / 1000.0)
                    self.gfx.curveSet.scale = scaleValue
            self.gfx.curveSet.Play()

    def Stop(self):
        if self.gfx in self.sourceObject.overlayEffects:
            self.sourceObject.overlayEffects.remove(self.gfx)
        if self.observer in self.sourceObject.observers:
            self.sourceObject.observers.remove(self.observer)
        self.gfx = None
        self.gfxModel = None
        self.sourceObject = None

    def Repeat(self, duration):
        if self.gfx is None:
            raise RuntimeError('ShipEffect: no effect defined')
        if self.gfx.curveSet:
            self.gfx.curveSet.Play()


class StretchEffect(GenericEffect):
    __guid__ = 'effects.StretchEffect'

    def Stop(self):
        if self.gfx is None:
            raise RuntimeError('ShipEffect: no effect defined')
        self.RemoveFromScene(self.gfxModel)
        self.gfx.source.parentPositionCurve = None
        self.gfx.source.parentRotationCurve = None
        self.gfx.source.alignPositionCurve = None
        self.gfx.dest.parentPositionCurve = None
        self.gfx.dest.parentRotationCurve = None
        self.gfx.dest.alignPositionCurve = None
        self.gfx = None
        self.gfxModel = None

    def Prepare(self):
        shipBall = self.GetEffectShipBall()
        targetBall = self.GetEffectTargetBall()
        if shipBall is None:
            raise RuntimeError('StretchEffect: no ball found')
        if not hasattr(shipBall, 'model') or shipBall.model is None:
            raise RuntimeError('StretchEffect: no model found')
        if targetBall is None:
            raise RuntimeError('StretchEffect: no target ball found')
        if not hasattr(targetBall, 'model') or targetBall.model is None:
            raise RuntimeError('StretchEffect: no target model found')
        self.gfx = trinity.Load(self.graphicFile)
        if self.gfx is None:
            raise RuntimeError('StretchEffect: no effect found')
        self.AddSoundToEffect()
        self.gfxModel = self.gfx
        self.gfx.source = trinity.TriNearestBoundingPoint()
        self.gfx.dest = trinity.TriNearestBoundingPoint()
        self.gfx.source.parentPositionCurve = shipBall
        self.gfx.source.parentRotationCurve = shipBall
        self.gfx.source.alignPositionCurve = targetBall
        self.gfx.dest.parentPositionCurve = targetBall
        self.gfx.dest.parentRotationCurve = targetBall
        self.gfx.dest.alignPositionCurve = shipBall
        if shipBall.__guid__ != 'spaceObject.Ship' and shipBall.__guid__ != 'spaceObject.EntityShip':
            self.gfx.source.boundingSize = trinity.TriVector(shipBall.radius, shipBall.radius, shipBall.radius)
        elif hasattr(shipBall.model, 'GetLocalBoundingBox'):
            shipBBoxMin, shipBBoxMax = shipBall.model.GetLocalBoundingBox()
            if shipBBoxMin is None or shipBBoxMax is None:
                radius = shipBall.model.boundingSphereRadius
                center = shipBall.model.boundingSphereCenter
                minX = center[0] - radius
                minY = center[1] - radius
                minZ = center[2] - radius
                maxX = center[0] + radius
                maxY = center[1] + radius
                maxZ = center[2] + radius
                self.gfx.source.boundingSize.SetXYZ(1.2 * max(-minX, maxX), 1.2 * max(-minY, maxY), 1.2 * max(-minZ, maxZ))
            else:
                self.gfx.source.boundingSize.SetXYZ(1.2 * max(-shipBBoxMin.x, shipBBoxMax.x), 1.2 * max(-shipBBoxMin.y, shipBBoxMax.y), 1.2 * max(-shipBBoxMin.z, shipBBoxMax.z))
        else:
            raise RuntimeError('StretchEffect: needs GetLocalBoundingBox')
        if targetBall.__guid__ != 'spaceObject.Ship' and targetBall.__guid__ != 'spaceObject.EntityShip':
            self.gfx.dest.boundingSize = trinity.TriVector(targetBall.radius, targetBall.radius, targetBall.radius)
        elif hasattr(targetBall.model, 'GetLocalBoundingBox'):
            shipBBoxMin, shipBBoxMax = targetBall.model.GetLocalBoundingBox()
            if shipBBoxMin is None or shipBBoxMax is None:
                radius = targetBall.model.boundingSphereRadius
                center = targetBall.model.boundingSphereCenter
                minX = center[0] - radius
                minY = center[1] - radius
                minZ = center[2] - radius
                maxX = center[0] + radius
                maxY = center[1] + radius
                maxZ = center[2] + radius
                self.gfx.dest.boundingSize.SetXYZ(1.2 * max(-minX, maxX), 1.2 * max(-minY, maxY), 1.2 * max(-minZ, maxZ))
            else:
                self.gfx.dest.boundingSize.SetXYZ(1.2 * max(-shipBBoxMin.x, shipBBoxMax.x), 1.2 * max(-shipBBoxMin.y, shipBBoxMax.y), 1.2 * max(-shipBBoxMin.z, shipBBoxMax.z))
        else:
            raise RuntimeError('StretchEffect: needs GetLocalBoundingBox')
        self.AddToScene(self.gfxModel)

    def Start(self, duration):
        if self.gfx is None:
            raise RuntimeError('StretchEffect: no effect defined')
        if self.gfx.curveSets is not None and len(self.gfx.curveSets) > 0:
            if self.scaleTime:
                length = self.gfx.curveSets[0].GetMaxCurveDuration()
                if length > 0.0:
                    scaleValue = length / (duration / 1000.0)
                    self.gfx.curveSets[0].scale = scaleValue
            self.gfx.curveSets[0].Play()

    def Repeat(self, duration):
        if self.gfx is None:
            raise RuntimeError('StretchEffect: no effect defined')
        if self.gfx.curveSets is not None and len(self.gfx.curveSets) > 0:
            self.gfx.curveSets[0].Play()

    def AddSoundToEffect(self):
        shipID = self.GetEffectShipID()
        shipBall = self.GetEffectShipBall()
        targetID = self.GetEffectTargetID()
        targetBall = self.GetEffectTargetBall()
        srcAudio = audio2.AudEmitter('effect_source_' + str(shipID))
        destAudio = audio2.AudEmitter('effect_dest_' + str(targetID))
        srcRadius = shipBall.radius
        destRadius = targetBall.radius
        srcAttenuation = pow(srcRadius, 0.95) * 33
        destAttenuation = pow(destRadius, 0.95) * 33
        srcAudio.SetAttenuationScalingFactor(srcAttenuation)
        destAudio.SetAttenuationScalingFactor(destAttenuation)
        if self.gfx.sourceObject:
            obs = trinity.TriObserverLocal()
            obs.front = (0.0, -1.0, 0.0)
            obs.observer = srcAudio
            self.gfx.sourceObject.observers.append(obs)
        if self.gfx.destObject:
            obs = trinity.TriObserverLocal()
            obs.front = (0.0, -1.0, 0.0)
            obs.observer = destAudio
            self.gfx.destObject.observers.append(obs)
        for eachSet in self.gfx.curveSets:
            for eachCurve in eachSet.curves:
                if eachCurve.__typename__ == 'TriEventCurve':
                    if eachCurve.name == 'audioEventsSource':
                        eachCurve.eventListener = srcAudio
                    elif eachCurve.name == 'audioEventsDest':
                        eachCurve.eventListener = destAudio