#Embedded file name: c:/depot/games/branches/release/EVE-TRANQUILITY/eve/client/script/environment/spaceObject/entityShip.py
import spaceObject
import turretSet
entityExplosionsS = ['res:/Emitter/tracerexplosion/NPCDeathS1.blue', 'res:/Emitter/tracerexplosion/NPCDeathS3.blue', 'res:/Emitter/tracerexplosion/NPCDeathS4.blue']
entityExplosionsM = ['res:/Emitter/tracerexplosion/NPCDeathM1.blue', 'res:/Emitter/tracerexplosion/NPCDeathM3.blue', 'res:/Emitter/tracerexplosion/NPCDeathM4.blue']
entityExplosionsL = ['res:/Emitter/tracerexplosion/NPCDeathL1.blue', 'res:/Emitter/tracerexplosion/NPCDeathL3.blue', 'res:/Emitter/tracerexplosion/NPCDeathL4.blue']

class EntityShip(spaceObject.SpaceObject):
    __guid__ = 'spaceObject.EntityShip'
    launcherTypeCache = {}

    def __init__(self):
        spaceObject.SpaceObject.__init__(self)
        self.gfxTurretID = None
        self.boosters = []
        self.targets = []
        self.turretList = []
        self.fitted = False
        self.typeID = None
        self.modules = {}
        self.model = None
        self.launcherTypeID = None

    def LoadModel(self, fileName = None, useInstance = False):
        slimItem = sm.StartService('michelle').GetBallpark().GetInvItem(self.id)
        self.typeID = slimItem.typeID
        godma = sm.GetService('godma')
        godmaStateManager = godma.GetStateManager()
        godmaType = godmaStateManager.GetType(self.typeID)
        shipType = cfg.invtypes.Get(slimItem.typeID)
        self.turretTypeID = godmaType.gfxTurretID
        missileTypeID = godmaType.entityMissileTypeID
        self.launcherTypeID = self.DetermineLauncherTypeFromMissileID(slimItem.typeID, missileTypeID)
        fileName = self.GetTrinityVersionFilename(shipType.GraphicFile())
        spaceObject.SpaceObject.LoadModel(self, fileName, useInstance)

    def Assemble(self):
        if self.model is not None:
            self.FitBoosters()
            if hasattr(self.model, 'ChainAnimationEx'):
                self.model.ChainAnimationEx('NormalLoop', 0, 0, 1.0)
            self.SetupAmbientAudio()

    def DetermineLauncherTypeFromMissileID(self, typeID, missileTypeID):
        launcherType = self.launcherTypeCache.get(missileTypeID, None)
        if launcherType:
            return launcherType
        clientDogma = sm.GetService('clientDogmaStaticSvc')
        usesMissiles = clientDogma.TypeHasEffect(typeID, const.effectMissileLaunchingForEntity)
        if not usesMissiles:
            return
        godma = sm.GetService('godma')
        group = int(godma.GetTypeAttribute2(missileTypeID, const.attributeLauncherGroup))
        if group in cfg.typesByGroups:
            for typeObj in cfg.typesByGroups[group]:
                if typeObj.typeID in cfg.invmetatypesByParent:
                    launcherType = typeObj.typeID
                    self.launcherTypeCache[missileTypeID] = launcherType
                    break

        return launcherType

    def LookAtMe(self):
        if self.model is None:
            return
        if not self.fitted:
            self.FitHardpoints()

    def FitHardpoints(self, blocking = False):
        if self.model is None:
            self.LogWarn('FitHardpoints - No model')
            return
        if self.fitted:
            return
        self.fitted = True
        turretLocatorCount = int(self.model.GetTurretLocatorCount())
        if self.launcherTypeID:
            launcherSet = turretSet.TurretSet.FitTurret(self.model, self.typeID, self.launcherTypeID, turretLocatorCount, 1)
            self.modules[0] = launcherSet
            turretLocatorCount = max(turretLocatorCount - 1, 1)
        newTurretSet = turretSet.TurretSet.FitTurret(self.model, self.typeID, self.turretTypeID, -1, turretLocatorCount)
        if newTurretSet is not None:
            self.modules[self.id] = newTurretSet

    def Explode(self):
        if self.typeID is None:
            return
        if self.radius < 100.0:
            explosionURL = entityExplosionsS[self.typeID % 3]
        elif self.radius < 400.0:
            explosionURL = entityExplosionsM[self.typeID % 3]
        else:
            explosionURL = entityExplosionsL[self.typeID % 3]
        return spaceObject.SpaceObject.Explode(self, explosionURL, randomRotation=True)

    def Release(self):
        if self.released:
            return
        for loc in self.turretList:
            if hasattr(loc, 'object'):
                loc.object = None

        for turretPair in self.modules.itervalues():
            if turretPair is not None:
                turretPair.Release()
                turretPair.owner = None

        self.modules = {}
        self.boosters = []
        self.targets = []
        self.turretList = []
        spaceObject.SpaceObject.Release(self)


class EntitySleeper(EntityShip):
    __guid__ = 'spaceObject.EntitySleeper'

    def FitHardpoints(self, blocking = False):
        if self.launcherTypeID:
            self.launcherTypeID = 0
        spaceObject.EntityShip.FitHardpoints(self)


exports = {'spaceObject.EntityShip': EntityShip,
 'spaceObject.EntitySleeper': EntitySleeper}