#Embedded file name: c:\depot\games\branches\release\EVE-TRANQUILITY\carbon\common\lib\paste\debug\profile.py
import sys
import os
import hotshot
import hotshot.stats
import threading
import cgi
import time
from cStringIO import StringIO
from paste import response
__all__ = ['ProfileMiddleware', 'profile_decorator']

class ProfileMiddleware(object):
    style = 'clear: both; background-color: #ff9; color: #000; border: 2px solid #000; padding: 5px;'

    def __init__(self, app, global_conf = None, log_filename = 'profile.log.tmp', limit = 40):
        self.app = app
        self.lock = threading.Lock()
        self.log_filename = log_filename
        self.limit = limit

    def __call__(self, environ, start_response):
        catch_response = []
        body = []

        def replace_start_response(status, headers, exc_info = None):
            catch_response.extend([status, headers])
            start_response(status, headers, exc_info)
            return body.append

        def run_app():
            app_iter = self.app(environ, replace_start_response)
            try:
                body.extend(app_iter)
            finally:
                if hasattr(app_iter, 'close'):
                    app_iter.close()

        self.lock.acquire()
        try:
            prof = hotshot.Profile(self.log_filename)
            prof.addinfo('URL', environ.get('PATH_INFO', ''))
            try:
                prof.runcall(run_app)
            finally:
                prof.close()

            body = ''.join(body)
            headers = catch_response[1]
            content_type = response.header_value(headers, 'content-type')
            if content_type is None or not content_type.startswith('text/html'):
                return [body]
            stats = hotshot.stats.load(self.log_filename)
            stats.strip_dirs()
            stats.sort_stats('time', 'calls')
            output = capture_output(stats.print_stats, self.limit)
            output_callers = capture_output(stats.print_callers, self.limit)
            body += '<pre style="%s">%s\n%s</pre>' % (self.style, cgi.escape(output), cgi.escape(output_callers))
            return [body]
        finally:
            self.lock.release()


def capture_output(func, *args, **kw):
    out = StringIO()
    old_stdout = sys.stdout
    sys.stdout = out
    try:
        func(*args, **kw)
    finally:
        sys.stdout = old_stdout

    return out.getvalue()


def profile_decorator(**options):
    if options.get('no_profile'):

        def decorator(func):
            return func

        return decorator

    def decorator(func):

        def replacement(*args, **kw):
            return DecoratedProfile(func, **options)(*args, **kw)

        return replacement

    return decorator


class DecoratedProfile(object):
    lock = threading.Lock()

    def __init__(self, func, **options):
        self.func = func
        self.options = options

    def __call__(self, *args, **kw):
        self.lock.acquire()
        try:
            return self.profile(self.func, *args, **kw)
        finally:
            self.lock.release()

    def profile(self, func, *args, **kw):
        ops = self.options
        prof_filename = ops.get('log_filename', 'profile_data.log.tmp')
        prof = hotshot.Profile(prof_filename)
        prof.addinfo('Function Call', self.format_function(func, *args, **kw))
        if ops.get('add_info'):
            prof.addinfo('Extra info', ops['add_info'])
        exc_info = None
        try:
            start_time = time.time()
            try:
                result = prof.runcall(func, *args, **kw)
            except:
                exc_info = sys.exc_info()

            end_time = time.time()
        finally:
            prof.close()

        stats = hotshot.stats.load(prof_filename)
        os.unlink(prof_filename)
        if ops.get('strip_dirs', True):
            stats.strip_dirs()
        stats.sort_stats(*ops.get('sort_stats', ('time', 'calls')))
        display_limit = ops.get('display_limit', 20)
        output = capture_output(stats.print_stats, display_limit)
        output_callers = capture_output(stats.print_callers, display_limit)
        output_file = ops.get('log_file')
        if output_file in (None, 'stderr'):
            f = sys.stderr
        elif output_file in ('-', 'stdout'):
            f = sys.stdout
        else:
            f = open(output_file, 'a')
            f.write('\n%s\n' % ('-' * 60))
            f.write('Date: %s\n' % time.strftime('%c'))
        f.write('Function call: %s\n' % self.format_function(func, *args, **kw))
        f.write('Wall time: %0.2f seconds\n' % (end_time - start_time))
        f.write(output)
        f.write(output_callers)
        if output_file not in (None, '-', 'stdout', 'stderr'):
            f.close()
        if exc_info:
            raise exc_info[0], exc_info[1], exc_info[2]
        return result

    def format_function(self, func, *args, **kw):
        args = map(repr, args)
        args.extend([ '%s=%r' % (k, v) for k, v in kw.items() ])
        return '%s(%s)' % (func.__name__, ', '.join(args))


def make_profile_middleware(app, global_conf, log_filename = 'profile.log.tmp', limit = 40):
    limit = int(limit)
    return ProfileMiddleware(app, log_filename=log_filename, limit=limit)