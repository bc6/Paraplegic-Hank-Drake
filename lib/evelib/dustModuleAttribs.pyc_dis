#Embedded file name: c:\depot\games\branches\release\EVE-TRANQUILITY\eve\common\lib\dustModuleAttribs.py
from extraCatmaConfig import GROUPS
from catma.catmaConfig import ATTRIB_FLAGS, DEFAULT_ATTRIB_FLAGS, MODIFY_TYPE_CHANGED, MODIFY_REMOVED, MODIFY_RENAMED
try:
    import dust
except ImportError:
    import sys, blue, os
    sys.path.append(os.path.abspath(blue.os.ResolvePath(u'root:/common/modules')))

from dust import stims
from catma.axiom import Enumerate
from dust.catmaExtension import AttribRefForModAttribModifier

def _InitEnumTypes(ax2):
    axiomClass = ax2.CreateClass('EModuleEvent', Enumerate, group=GROUPS.Logic)
    axiomClass.AddElement('EME_DID_FIT')
    axiomClass.AddElement('EME_WILL_UNFIT')
    axiomClass.AddElement('EME_IS_IDLE')
    axiomClass.AddElement('EME_IS_ACTIVATING')
    axiomClass.AddElement('EME_DID_START_PULSE')
    axiomClass.AddElement('EME_DID_FINISH_PULSE')
    axiomClass.AddElement('EME_IS_CHARGING')
    axiomClass.AddElement('EME_DID_CHARGE')
    axiomClass.AddElement('EME_OWNER_DID_DIE')


def PopulateMSEs(ax2):
    _InitEnumTypes(ax2)
    axiomClass = ax2.CreateClass('DustMSE', modifyFlag=MODIFY_REMOVED, standalone=True, group=GROUPS.Logic)
    axiomClass = ax2.CreateClass('DustMSEExplosiveSuicide', modifyFlag=MODIFY_REMOVED, standalone=True, group=GROUPS.Logic)
    axiomClass = ax2.CreateClass('DustMSEChameleonField', modifyFlag=MODIFY_REMOVED, standalone=True, forUE3=False, group=GROUPS.Logic)
    axiomClass = ax2.CreateClass('DustMSESpeedBlur', modifyFlag=MODIFY_REMOVED, standalone=True, forUE3=False, group=GROUPS.Logic)


def PopulateIndividualModules(ax2):
    axiomClass = ax2.CreateClass('ModuleCloaking', standalone=True, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('ContentReference mMaterialOverride', group=GROUPS.Content, caption='Material to Override', text='The material applied to the object when the module is activated')
    axiomClass = ax2.CreateClass('RepairSpec', standalone=False, forUE3=True)
    axiomClass.AddAttribute('Float armorRepairRate = 0', range=(0, None), caption='Repair Rate - Armor')
    axiomClass.AddAttribute('Float shieldRepairRate = 0', range=(0, None), caption='Repair Rate - Shield')
    axiomClass.AddAttribute('Float healthRepairRate = 0', range=(0, None), caption='Repair Rate - Health')
    axiomClass.AddAttribute('Bool asPercentage = False', caption='Rate as Percentage?')
    axiomClass = ax2.CreateClass('ModuleGenericRepair', standalone=True, forUE3=True, group=GROUPS.Logic, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Bool mAllowUsedOnHost', caption='Can use on host')
    axiomClass.AddAttribute('RepairSpec mInfantrySpec', caption='Repair Spec - Infanry')
    axiomClass.AddAttribute('RepairSpec mVehicleSpec', caption='Repair Spec - Vehicle')
    axiomClass.AddAttribute('RepairSpec mInstallationSpec', caption='Repair Spec - Installation')
    axiomClass = ax2.CreateClass('ModuleAfterBurner', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('SimpleEffect mMotionEffect', caption='Motion Effect', text='The motion effect that should be applied to the host.', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('MeterPerSecond mMinEffectSpeed = 10', range=(0.0, None), caption='Min Effect Speed', text='The min speed at which and below which the effect scale is considered to be 0.')
    axiomClass.AddAttribute('MeterPerSecond mMaxEffectSpeed = 50', range=(0.0, None), caption='Max Effect Speed', text='The max speed at which and above which the max effect scale is taken.')
    axiomClass.AddAttribute('Float mMaxEffectScale = 1', range=(0.0, None), caption='Max Effect Scale', text='The max scale of the effect that should be applied to the host.')
    axiomClass = ax2.CreateClass('ModuleExplosiveSuicide', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('TypeReference mExplosionTypeID', allowedClasses='ExplosionContent', group=GROUPS.Content, caption='Explosion Type ID', text='The type id used to spawn the explosion')
    axiomClass.AddAttribute('TypeReference mSplashDamageType', allowedClasses='DamageType', group=GROUPS.Combat, caption='Splash Damage Type', text='The splash damage type of the explosion')
    axiomClass.AddAttribute('Meter mSplashDamageRadius = 30', group=GROUPS.Combat, range=(0.0, None), caption='Splash Damage Radius', text='The effective radius of the splash damage of the explosion')
    axiomClass.AddAttribute('Float mSplashDamageAmount = 50', group=GROUPS.Combat, range=(0.0, None), caption='Splash Damage Amount', text='The amount of splash damage for the explosion')
    axiomClass.AddAttribute('Bool mIsFriendlyFireScaleHonored = True', group=GROUPS.Combat, caption='Is FriendlyFireScale Honored', text='Whether the FriendlyFireScale setting should be honored by this module')
    axiomClass = ax2.CreateClass('DamageModifier', standalone=False, forUE3=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference tag', allowedClasses='Tag', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float modifier', range=(0.0, None))
    axiomClass = ax2.CreateClass('DamageModifierModule', standalone=True, forUE3=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('DamageModifier mDamageModifiers', caption='Damage Modifiers', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('DamageModifier mResistanceModifiers', caption='Resistance Modifiers', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)


def PopulateModules(ax2):
    PopulateMSEs(ax2)
    axiomClass = ax2.CreateClass('EModuleCreationCondition', Enumerate, forUE3=True)
    axiomClass.AddElement('MNU_LocalOnly', description='Local Only')
    axiomClass.AddElement('MNU_ServerOnly', description='Server Only')
    axiomClass.AddElement('MNU_ServerAndOwningClient', description='Server and Owning Client')
    axiomClass.AddElement('MNU_ServerAndClients', description='Server and All Clients')
    axiomClass = ax2.CreateClass('AttribRefForModAttribModifier', AttribRefForModAttribModifier)
    axiomClass = ax2.CreateClass('EModuleType', Enumerate, forUE3=False)
    axiomClass.AddElement('MT_General')
    axiomClass.AddElement('MT_Spawn')
    axiomClass = ax2.CreateClass('EModuleMannerOfUse', Enumerate, forUE3=False)
    for manner in stims.MOD_MANNERS_OF_USE_ALL:
        axiomClass.AddElement(manner)

    axiomClass = ax2.CreateClass('ESlotType', Enumerate, forUE3=False)
    for slotType, stringResource in stims.SLOTNAME_STRING_RESOURCES.iteritems():
        slotLabel = stringResource.split('/')[-1]
        axiomClass.AddElement(slotType, '%s : %s' % (slotType, slotLabel))

    axiomClass = ax2.CreateClass('EAttributeModifier', Enumerate, forUE3=False)
    for modifier in stims.MOD_ALL:
        axiomClass.AddElement(modifier)

    axiomClass = ax2.CreateClass('EModuleAttributeType', Enumerate, forUE3=False, modifyFlag=MODIFY_REMOVED)
    axiomClass = ax2.CreateClass('ModifierDeclaration', standalone=True, forUE3=False)
    axiomClass.AddAttribute('String mModifierClasses', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.NOT_DUMPED, caption='Adapter Classes', text="A list of CATMA class names connected by '+' whose attributes with the 'Modulized' flag will be considered as valid modifier attribute name")
    axiomClass.AddAttribute('AttribRefForModAttribModifier mAttributeName', caption='Attribute Name', text='the name of the attribute that this declaration is about', allowedAttributeFlags=ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('EAttributeModifier mModifierType', caption='Modifier Type', text='the type of the modifier that is applied to the specified attribute')
    axiomClass.AddAttribute('Bool mIsPositive', caption='Is Positive?', text='whether the modifier applies positive bonus, this means positive adds or scaler bigger than 1')
    axiomClass = ax2.CreateClass('EModuleBonusDomain', Enumerate, forUE3=True, exportAsIndex=True)
    axiomClass.AddElement('DOMAIN_Host')
    axiomClass.AddElement('DOMAIN_Mount')
    axiomClass.AddElement('DOMAIN_Squad')
    axiomClass.AddElement('DOMAIN_Enemy')
    axiomClass.AddElement('DOMAIN_Friendly')
    axiomClass = ax2.CreateClass('BonusModifier', standalone=False, forUE3=False, group=GROUPS.Logic, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('TypeReference affectedModifier', caption='Affected Modifier', text='Declaration of the affected modifier', allowedClasses='ModifierDeclaration')
    axiomClass.AddAttribute('Float modifierValue', caption='Modifier Value', text='The value to apply')
    axiomClass.AddAttribute('EModuleBonusDomain domain = DOMAIN_Host', caption='Domain')
    axiomClass.AddAttribute('Meter effectiveRadius = -1', caption='Effective Radius', text='Effective radius of the bonus')
    axiomClass.AddAttribute('TypeReference adapterTags', caption='Adapter Tags', text='Tags used to identify adapter', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, allowedClasses='Tag')
    axiomClass.AddAttribute('TypeReference moduleTags', caption='Module Tags', text='Tags used to identify module', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, allowedClasses='Tag')
    axiomClass = ax2.CreateClass('AttributeModifier', standalone=False, forUE3=False, group=GROUPS.Logic, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('AttribRefForModAttribModifier attributeName', modifyFlag=MODIFY_TYPE_CHANGED, allowedAttributeFlags=ATTRIB_FLAGS.MODULIZED, caption='Attribute Name', text='The name of the attribute to be modified')
    axiomClass.AddAttribute('Float modifierValue', caption='Modifier Value', text='The value to apply')
    axiomClass.AddAttribute('EAttributeModifier modifierType', caption='Modifier Type', text='The modifier type in terms of operation')
    axiomClass.AddAttribute('EModuleBonusDomain domain = DOMAIN_Host', caption='Domain')
    axiomClass.AddAttribute('Meter effectiveRadius = -1', caption='Effective Radius', text='Effective radius of the bonus')
    axiomClass.AddAttribute('TypeReference tags', caption='Tags', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, allowedClasses='Tag')
    axiomClass = ax2.CreateClass('DustModule', standalone=True, group=GROUPS.Logic, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('EModuleType moduleType = MT_General', caption='Module Type', text='The type of this module')
    axiomClass.AddAttribute('ESlotType slotType', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.PRECACHE, caption='Slot Type', text='Which type of slot this module is compatible with')
    axiomClass.AddAttribute('String mModifierClasses', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.NOT_DUMPED, caption='Modifier Classes', text="A list of CATMA class names connected by '+' whose attributes with the 'Modulized' flag will be considered as valid modifier attribute name")
    axiomClass.AddAttribute('AttributeModifier modifier', caption='Passive Modifiers', text='Attribute modifiers applied regardless module is activated or not.', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('BonusModifier bonusModifiers', caption='Bonus Modifiers', text='Bonus modifier applied to other modules', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TypeReference restricted', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Allowed Adapters', allowedClasses='Adapter', text='If set, can only be fitted to the listed adapters.')
    axiomClass.AddAttribute('Int maximumPerFitting = 0', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.PRECACHE, caption='Maximum Per Fitting', text='Maximum copies of this module allowed in a single fitting (0 means no limit)', range=(0, None))
    axiomClass = ax2.CreateClass('DustModuleAdvanced', standalone=True, group=GROUPS.Logic, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('EModuleMannerOfUse manner = ' + stims.MANNER_PASSIVE, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.PRECACHE, caption='Manner Of Use', text='In which manner the module is to be used')
    axiomClass.AddAttribute('Second activationTime', range=(0, None), caption='Activation Time', text='How long it takes for this module to become active. <=0 for indefinitely')
    axiomClass.AddAttribute('Second rechargeTime', range=(0, None), caption='Recharge Time', text='The recharge time of the module, in seconds. <=0 for instant recharging')
    axiomClass.AddAttribute('Second duration', range=(0, None), caption='Active Duration', text='Time in seconds this module lasts active for an activation.')
    axiomClass.AddAttribute('Int cycles', range=(0, None), caption='Num. of Cycles', text='Number of cycles in an activation.')
    axiomClass.AddAttribute('Second pulseDuration', range=(0, None), caption='Pulse Duration', text="Time in seconds that the module stays 'on' during a cycle, must be less than the duration of a cycle (duration / cycles)")
    axiomClass.AddAttribute('AttributeModifier activeAttributeModifiers', caption='Active Modifiers', text='Attribute modifiers applied only when this module is in active states.', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SimpleEffect mSpecialEffects', caption='Pulse Special Effects', text='The special effects that will be played in each active pulse', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SimpleMaterialEffect mMaterialEffect', caption='Pulse Material Effect', text='The material effect that will be played in each active pulse', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('SimpleSound mCycleSoundEffect', modifyFlag=MODIFY_RENAMED, caption='Sound Effect', text='The sound effect for the whole cycle of the module, we use RTPC value to do the transition within wwise')
    axiomClass = ax2.CreateClass('SlotInfo', standalone=False, group=GROUPS.Logic, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('ESlotType slotType', caption='Slot Type', text='The type of this slot')
    axiomClass.AddAttribute('String boneSocketName = none', caption='Bone Socket Name', text='The socket name of this slot in mesh skeleton-bone')
    axiomClass.AddAttribute('TypeReference defaultModuleType = -1', modifyFlag=MODIFY_TYPE_CHANGED, caption='Default Module', allowedClasses='DustModule', text='The default module for this slot.')
    axiomClass.AddAttribute('Bool mandatory = False', caption='Mandatory', text='Set as true to make the mandatory that this slot MUST have a module to fit on it')
    axiomClass.AddAttribute('Bool visible = True', caption='Visible', text='Set as false to hide this slot in the UI so that the player can not edit it')
    axiomClass = ax2.CreateClass('EAttributeValueDisplayConversion', Enumerate, group=GROUPS.Logic, forUE3=False)
    axiomClass.AddElement('EAVDC_CENTIMETER_TO_METER')
    axiomClass.AddElement('EAVDC_SECONDS_INTERVAL_TO_RATE_PER_MINUTE')
    axiomClass.AddElement('EAVDC_FLOAT_TO_PERCENT')
    axiomClass.AddElement('EAVDC_FLOAT_TO_INCREASED_PERCENT')
    axiomClass.AddElement('EAVDC_NONE')
    axiomClass = ax2.CreateClass('EAttributeValueSource', Enumerate, group=GROUPS.Logic, forUE3=False)
    axiomClass.AddElement('EAVS_FOR_STACKING_PENALTY')
    axiomClass.AddElement('EAVS_FROM_TYPE')
    axiomClass.AddElement('EAVS_FROM_MODIFIER')
    axiomClass.AddElement('EAVS_FROM_ACTIVE_MODIFIER')
    axiomClass = ax2.CreateClass('AttributeData', standalone=True, group=GROUPS.Logic, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('String mModifierClasses', modifyFlag=MODIFY_REMOVED, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.NOT_DUMPED, caption='Modifier Classes', text="A list of CATMA class names connected by '+' whose attributes with the 'Modulized' flag will be considered as valid modifier attribute name")
    axiomClass.AddAttribute('String attributeName', modifyFlag=MODIFY_TYPE_CHANGED, caption='Attribute Name', text='The name of the attribute')
    axiomClass.AddAttribute('TypeReference parentAttribute = -1', modifyFlag=MODIFY_REMOVED, caption='Parent Attribute', text='The parent attribute for this attribute', allowedClasses='AttributeData')
    axiomClass.AddAttribute('Bool highIsGood = True', caption='High Is Good', text='If the value of the attribute is the higher the better.')
    axiomClass.AddAttribute('Bool stackingPenaltyEnabled = True', caption='Stacking Penalty Enabled', text='Whether stacking penalty is enabled for this attribute.')
    axiomClass.AddAttribute('Float stackingPenaltyNerfConst = 2.67', caption='Stacking Nerf Constant', text='The nerf constant when stacking penalty is enabled.')
    axiomClass.AddAttribute('Float stackingClamp', caption='Stacking Clamp', text='The limit of the bonus for this attribute, if High Is Good, representing the upper bound, otherwise, the lower bound.')
    axiomClass.AddAttribute('TypeReference mIconRef = -1', modifyFlag=MODIFY_REMOVED, attributeFlag=ATTRIB_FLAGS.NOT_NULL | DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.PRECACHE, allowedClasses='Icon', text='Icon', caption='Icon')
    axiomClass.AddAttribute('EAttributeValueDisplayConversion valueConvert = EAVDC_NONE', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('EAttributeValueSource valueSource = EAVS_FROM_TYPE', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('String displayName', modifyFlag=MODIFY_REMOVED, text='Display Name', group=GROUPS.Logic)
    axiomClass.AddAttribute('String Units', modifyFlag=MODIFY_REMOVED, text='Units', group=GROUPS.Logic)
    axiomClass = ax2.CreateClass('AttributeDescriptor', standalone=True, group=GROUPS.Logic, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('String mModifierClasses', modifyFlag=MODIFY_REMOVED, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.NOT_DUMPED, caption='Modifier Classes', text="A list of CATMA class names connected by '+' whose attributes with the 'Modulized' flag will be considered as valid modifier attribute name")
    axiomClass.AddAttribute('String attributeName', modifyFlag=MODIFY_TYPE_CHANGED, caption='Attribute Name', text='The name of the attribute')
    axiomClass.AddAttribute('TypeReference parentAttribute = -1', caption='Parent Attribute', text='The parent attribute for this attribute', allowedClasses='AttributeDescriptor')
    axiomClass.AddAttribute('Bool highIsGood = True', modifyFlag=MODIFY_REMOVED, caption='High Is Good', text='If the value of the attribute is the higher the better.')
    axiomClass.AddAttribute('Bool stackingPenaltyEnabled = True', modifyFlag=MODIFY_REMOVED, caption='Stacking Penalty Enabled', text='Whether stacking penalty is enabled for this attribute.')
    axiomClass.AddAttribute('Float stackingPenaltyNerfConst = 2.67', modifyFlag=MODIFY_REMOVED, caption='Stacking Nerf Constant', text='The nerf constant when stacking penalty is enabled.')
    axiomClass.AddAttribute('Float stackingClamp', modifyFlag=MODIFY_REMOVED, caption='Stacking Clamp', text='The limit of the bonus for this attribute, if High Is Good, representing the upper bound, otherwise, the lower bound.')
    axiomClass.AddAttribute('TypeReference mIconRef = -1', attributeFlag=ATTRIB_FLAGS.NOT_NULL | DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.PRECACHE, allowedClasses='Icon', text='Icon', caption='Icon')
    axiomClass.AddAttribute('EAttributeValueDisplayConversion valueConvert = EAVDC_NONE')
    axiomClass.AddAttribute('EAttributeValueSource valueSource = EAVS_FROM_TYPE')
    axiomClass.AddAttribute('LocalizedString displayName', text='Display Name', group=GROUPS.Logic, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('LocalizedString Units', text='Units', group=GROUPS.Logic, modifyFlag=MODIFY_TYPE_CHANGED)
    PopulateIndividualModules(ax2)