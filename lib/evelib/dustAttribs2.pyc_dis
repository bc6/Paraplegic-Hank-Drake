#Embedded file name: c:\depot\games\branches\release\EVE-TRANQUILITY\eve\common\lib\dustAttribs2.py
import math
import appConst
from extraCatmaConfig import GROUPS, CUSTOM_FLAGS
from catma.catmaConfig import ATTRIB_FLAGS, DEFAULT_ATTRIB_FLAGS, MODIFY_TYPE_CHANGED, MODIFY_REMOVED, MODIFY_RENAMED, EDITORFLAG_MULTILINE
from catma.internalUtil import Overwrite
from catma import axiom
from catma import units
from dustContent import PopulateContent2
from dustEnums import PopulateEnums
from dustModuleAttribs import PopulateModules
import dust.skill
import dust.character
import dust.catmaExtension
attFlag_Default = DEFAULT_ATTRIB_FLAGS
attFlag_Precache = attFlag_Default | ATTRIB_FLAGS.PRECACHE
attFlag_Set = attFlag_Default | ATTRIB_FLAGS.IS_SET
attFlag_NotNull = attFlag_Default | ATTRIB_FLAGS.NOT_NULL
attFlag_Modulized = attFlag_Default | ATTRIB_FLAGS.MODULIZED
attFlag_NotDumped = attFlag_Default | ATTRIB_FLAGS.NOT_DUMPED

class Name(axiom.String):
    ue3Type = 'name'


class ContentReference(axiom.String):

    def GetAdditionalAttFlag(self):
        return ATTRIB_FLAGS.CONTENT_REF


class Degree(units.FloatUnit):
    unitAbbr = 'deg'
    unitCaption = 'Degree'

    def ConvertTo(self, destUnit, value):
        if type(destUnit) is units.Radian:
            return value * math.pi / 180
        return super(Degree, self).ConvertTo(destUnit, value)

    def ConvertFrom(self, srcUnit, srcValue):
        if type(srcUnit) is units.Radian:
            return srcValue * 180 / math.pi
        return super(Degree, self).ConvertFrom(srcUnit, srcValue)


class UE3Degree(Degree):
    unitAbbr = 'deg'
    unitCaption = 'UE3Degree'
    ue3Type = 'int'
    scalar = 182.04166666666666

    def GetExportedValue(self, value):
        if value is not None:
            return int(round(value * self.scalar))


class MeterPerSecond(units.FloatUnit):
    unitAbbr = 'm/s'

    def GetExportedValue(self, value):
        if value is not None:
            return 100 * value


class Percent(units.FloatUnit):
    unitAbbr = '%'

    def GetExportedValue(self, value):
        if value is not None:
            return value / 100


class MeterExportedSqured(units.FloatUnit):
    unitAbbr = 'm*m'
    unitCaption = 'Meter'

    def GetExportedValue(self, value):
        if value is None:
            return
        value *= 100
        value *= value
        return value


def PopulateUnits(ax2):

    @Overwrite(units.Meter)
    def GetExportedValue(self, value):
        if value is not None:
            return 100 * value

    ax2.CreateClass('Degree', Degree)
    ax2.CreateClass('UE3Degree', UE3Degree)
    ax2.CreateClass('MeterPerSecond', MeterPerSecond)
    ax2.CreateClass('Percent', Percent)
    ax2.CreateClass('MeterExportedSqured', MeterExportedSqured)


def PopulateUE3Basics(ax2):
    ax2.CreateClass('Name', Name)
    ax2.CreateClass('ContentReference', ContentReference)


def PopulateGeneric(ax2):
    axiomClass = ax2.CreateClass('AttributeReference', dust.catmaExtension.AttributeReference)
    axiomClass = ax2.CreateClass('DustVisionProperties', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float m_fViewAngle = 45', range=(0, 360), caption='View Angle', text='View angle in degrees')
    axiomClass.AddAttribute('Bool m_bMustHaveLOS = True', caption='Must have a LOS')
    axiomClass.AddAttribute('Bool m_bIgnoreBlockingActors = False', caption='Ignore blocking actors', text='Ignore blocking actors, shooters will shoot through things in their way')
    axiomClass.AddAttribute('Meter m_fMccViewDistance = 1000', range=(0, 3000), caption='Mcc View Distance', text='View distance in meters', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Meter m_fOnFootViewDistance = 75', range=(0, 250), caption='On Foot View Distance', text='View distance in meters', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Meter m_fGroundVehicleViewDistance = 150', range=(0, 1000), caption='Ground Vehicle View Distance', text='View distance in meters', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Meter m_fFlyingVehicleViewDistance = 150', range=(0, 3000), caption='Flying Vehicle View Distance', text='View distance in meters', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Meter m_fTurretViewDistance = 150', range=(0, 3000), caption='Turret view distance', text='View distance in meters', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Meter m_fCloseDistance = 10', range=(0, 200), caption='Close Distance', text='AI will be aware when closer than this distance', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Float m_fTimeTillForget = 5', range=(0, 10), caption='Forget time', text='Time until we forget about this target if unseen')
    axiomClass.AddAttribute('Float m_fCoolOffTime = 1', range=(0, 3), caption='CoolOff Time', text='Time until a target is marked as hidden if a linecheck fails')
    axiomClass.AddAttribute('Int m_iActorCheckPerFrame = 20', range=(0, 100), caption='Actor Check Per Frame', text='Max actors to check per frame')
    axiomClass.AddAttribute('Int m_iLineChecksPerFrame = 5', range=(0, 20), caption='Linechecks per frame', text='Max linechecks per frame')
    axiomClass.AddAttribute('Meter m_fHackDistance = 5', range=(0, 100), caption='Hack Distance', text='Ignore turret if it is within this distance so player can hack')
    axiomClass.AddAttribute('Bool m_bDeaf = True', caption='Is Deaf', text='False if this AI can hear noise')
    axiomClass.AddAttribute('Bool m_bHearFriendlyNoise = False', caption='Hear Friendly Noise', text='Can hear and respond to noises from teammates - if not deaf')
    axiomClass = ax2.CreateClass('DustTargettingProperties', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float m_fMccBias = 0', range=(-1000, 1000), caption='MCC target bias')
    axiomClass.AddAttribute('Float m_fOnFootBias = 0', range=(-1000, 10000), caption='On Foot target Bias')
    axiomClass.AddAttribute('Float m_fGroundVehicleBias = 0', range=(-1000, 1000), caption='Ground Vehicle Bias')
    axiomClass.AddAttribute('Float m_fFlyingVehicleBias = 0', range=(-1000, 1000), caption='Flying Vehicle Bias')
    axiomClass.AddAttribute('Float m_fTurretBias = 0', range=(-1000, 1000), caption='Turret Bias')
    axiomClass.AddAttribute('Float m_fCurrentTargetBias = 5', range=(-1000, 1000), caption='Current Target Bias', text='Score current target higher. This prevents oscillation between 2 close targets')
    axiomClass.AddAttribute('Float m_fAimingAtCost = 1', range=(-1000, 1000), caption='Target aiming Bias')
    axiomClass.AddAttribute('Float m_fShotAtCost = 1', range=(-1000, 1000), caption='Target shooting Bias')
    axiomClass.AddAttribute('Float m_fHiddenBias = 1', range=(-1000, 1000), caption='Target hiding (Unseen) bias')
    axiomClass.AddAttribute('Float m_fVisibleBias = 5', range=(-1000, 1000), caption='Target is visible bias')
    axiomClass.AddAttribute('Float m_fDistanceCost = 2', range=(0, 1000), caption='Distance Cost', text='Cost relative to primary target. Per meter closer')
    axiomClass.AddAttribute('Float m_fPreferredTargetBias = 100', range=(0, 1000), caption='Preferred target Bias')
    axiomClass.AddAttribute('Float m_fHitPercentage = 0.25', modifyFlag=MODIFY_REMOVED, range=(0, 1.0), caption='Hit Percentage', text='Chance of hitting the target per shot')
    axiomClass.AddAttribute('Float m_fCurrentTargetScoreReduction = 0', modifyFlag=MODIFY_REMOVED, range=(-1000, 1000), caption='Target Score Reduction Over Time (Target Cycling)')
    axiomClass = ax2.CreateClass('DustAIAccuracyProperties', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float m_fMaxOffsetAngle  = 3', range=(0, 5), caption='Max offset angle', text='Maximum offset angle - 100% innacurate')
    axiomClass.AddAttribute('Float m_fMinOffsetAngle = 0.2', range=(0, 5), caption='Min offset angle', text='Minimum offset andgle - 100% accurate')
    axiomClass.AddAttribute('Float m_fPitchOffsetScalar = 0.1', range=(0, 1), caption='Pitch Scaler', text='Scale the offset for pitch as it looks odd if we shoot in the air or at our feet')
    axiomClass.AddAttribute('Float m_fMaxShootAtTimeAccuracy = 1', range=(0, 5), caption='Max Shoot at time accuracy', text='Maximum amount we will increase accuracy when shooting for some time')
    axiomClass.AddAttribute('Float m_fMaxStationaryAccuracy = 2', range=(0, 5), caption='Max shoot at time accuracy', text="Maximum amount we will increase accuracy when the target isn't moving")
    axiomClass.AddAttribute('Float m_fNoiseConstant = 0.1', range=(0, 5), caption='Accuracy noise', text='A bit of noise that we always add so we are never 100% accurate')
    axiomClass.AddAttribute('Float m_fNewOffsetInterval = 2', range=(1, 5), caption='New Offset Interval', text='How long between picking a new offset')
    axiomClass.AddAttribute('Float m_fShotTimeTillAccurate = 15', range=(0, 50), caption='Shot Time till max accuracy', text='How long we have to shoot at something to have max accuracy')
    axiomClass.AddAttribute('Float m_fStationaryTimeTillAccurate = 15', range=(0, 50), caption='Still time till max accuracy', text='How long a target should remain still until we reach max accuracy')
    axiomClass.AddAttribute('Float m_fStationaryDecay = 50', range=(0, 100), caption='Stationary Decay', text='Decay stationary time when target starts moving - per second')
    axiomClass = ax2.CreateClass('FighterRotatioParam', standalone=False, group=GROUPS.Physics)
    axiomClass.AddAttribute('Bool limitMaxRotation', caption='Limit Max Rotation')
    axiomClass.AddAttribute('Bool limitMinRotation', caption='Limit Min Rotation')
    axiomClass.AddAttribute('Float maxRotation', caption='Max Rotation')
    axiomClass.AddAttribute('Float minRotation', caption='Min Rotation')
    axiomClass.AddAttribute('Float maxRotationSpeed', caption='Max Rotation Speed')
    axiomClass.AddAttribute('Float rotationAccelation', caption='Rotation Acceleration')
    axiomClass.AddAttribute('Float rotationDeaccelation', caption='Rotation Deceleration')
    axiomClass.AddAttribute('Float currRotationSpeed', caption='Current Rotation Speed')
    axiomClass.AddAttribute('Float maxRotationPeakSpeedDegree', text="at which degree the rotation speed reaches the max when it's rotating towards to the max degree", caption='Max Rotation Peak Speed Degree')
    axiomClass.AddAttribute('Float minRotationPeakSpeedDegree', text="at which degree the rotation speed reaches the max when it's rotating towards to the min degree", caption='Min Rotation Peak Speed Degree')
    axiomClass.AddAttribute('Bool needsDecellaration', caption='Needs Deceleration')
    axiomClass.AddAttribute('Float vehicleInput', caption='Vehicle Input')
    axiomClass = ax2.CreateClass('FighterRotatioParamSet', standalone=False, group=GROUPS.Physics)
    axiomClass.AddAttribute('FighterRotatioParam rotationParamSet', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('SmoothControlParam', standalone=False, group=GROUPS.Physics)
    axiomClass.AddAttribute('Bool limitMaxValue', caption='Limit Max Value')
    axiomClass.AddAttribute('Bool limitMinValue', caption='Limit Min Value')
    axiomClass.AddAttribute('Float maxValue', caption='Max Value')
    axiomClass.AddAttribute('Float minValue', caption='Min Value')
    axiomClass.AddAttribute('Bool autoKeepBlance', caption='Auto Keep Balance')
    axiomClass.AddAttribute('Float blanceValue', caption='Balance Value')
    axiomClass.AddAttribute('Float targetVar', caption='TargetVar')
    axiomClass.AddAttribute('Float currentValue', caption='Current Value')
    axiomClass.AddAttribute('Float currentVelocity', caption='Current Velocity')
    axiomClass.AddAttribute('Float accelerate', caption='Accelerate')
    axiomClass.AddAttribute('Float decelerate', caption='Decelerate')
    axiomClass.AddAttribute('Float controlSpeed', caption='Control Speed')
    axiomClass.AddAttribute('Float preValue', caption='Prevalue')
    axiomClass.AddAttribute('Float senseFromController', caption='Sense From Controller')
    axiomClass = ax2.CreateClass('Vector', standalone=False, forUE3=False)
    axiomClass.AddAttribute('Float x')
    axiomClass.AddAttribute('Float y')
    axiomClass.AddAttribute('Float z')
    axiomClass = ax2.CreateClass('Rotator', standalone=False, forUE3=False)
    axiomClass.AddAttribute('Int Pitch')
    axiomClass.AddAttribute('Int Yaw')
    axiomClass.AddAttribute('Int Roll')
    axiomClass = ax2.CreateClass('Color', standalone=False, forUE3=False)
    axiomClass.AddAttribute('Int R')
    axiomClass.AddAttribute('Int G')
    axiomClass.AddAttribute('Int B')
    axiomClass = ax2.CreateClass('LinearColor', standalone=False, forUE3=False)
    axiomClass.AddAttribute('Float R')
    axiomClass.AddAttribute('Float G')
    axiomClass.AddAttribute('Float B')
    axiomClass.AddAttribute('Float A')
    axiomClass = ax2.CreateClass('Object', standalone=False, forUE3=False)
    axiomClass = ax2.CreateClass('Actor', standalone=False, forUE3=False)
    axiomClass = ax2.CreateClass('nceTurret', standalone=False, forUE3=False)
    axiomClass = ax2.CreateClass('EInterpCurveMode', axiom.Enumerate, forUE3=False)
    axiomClass.AddElement('CIM_Linear')
    axiomClass.AddElement('CIM_CurveAuto')
    axiomClass.AddElement('CIM_Constant')
    axiomClass.AddElement('CIM_CurveUser')
    axiomClass.AddElement('CIM_CurveBreak')
    axiomClass.AddElement('CIM_CurveAutoClamped')
    axiomClass = ax2.CreateClass('InterpCurvePointFloat', standalone=False, forUE3=False)
    axiomClass.AddAttribute('Float InVal')
    axiomClass.AddAttribute('Float OutVal')
    axiomClass = ax2.CreateClass('InterpCurveFloat', standalone=False, forUE3=False)
    axiomClass.AddAttribute('InterpCurvePointFloat Points', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('EInterpCurveMode InterpMethod')
    axiomClass = ax2.CreateClass('EWheelSide', axiom.Enumerate, forUE3=False)
    axiomClass.AddElement('SIDE_None')
    axiomClass.AddElement('SIDE_Left')
    axiomClass.AddElement('SIDE_Right')
    axiomClass = ax2.CreateClass('CurveReference', standalone=False, forUE3=False)
    axiomClass.AddAttribute('ContentReference curveObject', text='This is the curve object ref.', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Int curveIndex = 0')
    axiomClass.AddAttribute('Float maxInValue = 1')
    axiomClass.AddAttribute('Float m_fMultiplier = 1.0', caption='Curve Multiplier', text="Value to multiply the curve's output by before use", attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float m_fOffset = 0.0', caption='Curve Offset', text="Value to offset the curve's output by before use", attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass = ax2.CreateClass('EVehicleGroup', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('VehicleGroup_SPD')
    axiomClass.AddElement('VehicleGroup_LAV')
    axiomClass.AddElement('VehicleGroup_HAV')
    axiomClass.AddElement('VehicleGroup_Fighter')
    axiomClass.AddElement('VehicleGroup_DropShip')
    axiomClass = ax2.CreateClass('EVehicleSize', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('VehicleSize_Small')
    axiomClass.AddElement('VehicleSize_Medium')
    axiomClass.AddElement('VehicleSize_Large')
    axiomClass.AddElement('VehicleSize_VeryLarge')
    axiomClass.AddElement('VehicleSize_MAX')
    axiomClass = ax2.CreateClass('EInstallationGroup', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('InstallationGroup_Capacitor')
    axiomClass.AddElement('InstallationGroup_CRU')
    axiomClass.AddElement('InstallationGroup_OffmapSupport')
    axiomClass.AddElement('InstallationGroup_InstallationSupport')
    axiomClass.AddElement('InstallationGroup_PlayerSupport')
    axiomClass.AddElement('InstallationGroup_AntiVehicle')
    axiomClass.AddElement('InstallationGroup_AntiInfantry')
    axiomClass.AddElement('InstallationGroup_AntiAir')
    axiomClass.AddElement('InstallationGroup_AntiMCC')
    axiomClass.AddElement('InstallationGroup_AntiVehicle_Small')
    axiomClass.AddElement('InstallationGroup_AntiInfantry_Small')
    axiomClass.AddElement('InstallationGroup_AntiAir_Small')
    axiomClass.AddElement('InstallationGroup_DroneHive')
    axiomClass.AddElement('InstallationGroup_DefenseRelay')
    axiomClass = ax2.CreateClass('EConsoleGroup', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('ConsoleGroup_SuperCapacitor')
    axiomClass.AddElement('ConsoleGroup_ShieldControl')
    axiomClass.AddElement('ConsoleGroup_AntiMccControl')
    axiomClass = ax2.CreateClass('EDustAudioMsg', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('DustAudioMsg_None')
    axiomClass.AddElement('DustAudioMsg_CR_50')
    axiomClass.AddElement('DustAudioMsg_CR_10')
    axiomClass.AddElement('DustAudioMsg_CRs_Depleted')
    axiomClass.AddElement('DustAudioMsg_OM_ChessTimer_01')
    axiomClass.AddElement('DustAudioMsg_OM_ChessTimer_02')
    axiomClass.AddElement('DustAudioMsg_OM_ChessTimer_03')
    axiomClass.AddElement('DustAudioMsg_OM_ChessTimer_04')
    axiomClass.AddElement('DustAudioMsg_OM_ChessTimer_05')
    axiomClass.AddElement('DustAudioMsg_Obj_Shields_down')
    axiomClass.AddElement('DustAudioMsg_Obj_Destroyed')
    axiomClass.AddElement('DustAudioMsg_Amb_MissionTimer_half')
    axiomClass.AddElement('DustAudioMsg_Amb_MissionTimer_1min')
    axiomClass.AddElement('DustAudioMsg_Amb_MissionTimer_30sec')
    axiomClass.AddElement('DustAudioMsg_Amb_MissionTimer_20sec')
    axiomClass.AddElement('DustAudioMsg_Amb_MissionTimer_10sec')
    axiomClass.AddElement('DustAudioMsg_Mission_Victory')
    axiomClass.AddElement('DustAudioMsg_Mission_Loss')
    axiomClass.AddElement('DustAudioMsg_AttHackComplete_ObjDefRelay_Defenders')
    axiomClass.AddElement('DustAudioMsg_AttGainsControl_ObjCapasitor_Defenders')
    axiomClass.AddElement('DustAudioMsg_ObjSelfDestrDisrupted_Defenders')
    axiomClass.AddElement('DustAudioMsg_ObjTransfControlDisrupted_ObjCapasitor_Defenders')
    axiomClass.AddElement('DustAudioMsg_DefHackComplete_ObjCapasitor_Defenders')
    axiomClass.AddElement('DustAudioMsg_DefGainsControl_ObjCapasitor_Defenders')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjDefRelay_50orLess_Defenders')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjDefRelay_10orLess_Defenders')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjCapasitor_50orLess_Defenders')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjCapasitor_10orLess_Defenders')
    axiomClass.AddElement('DustAudioMsg_MCC_shield_50_Defenders')
    axiomClass.AddElement('DustAudioMsg_MCC_shield_10_Defenders')
    axiomClass.AddElement('DustAudioMsg_MCC_shield_0_Defenders')
    axiomClass.AddElement('DustAudioMsg_MCC_armor_50_Defenders')
    axiomClass.AddElement('DustAudioMsg_MCC_armor_10_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionSuccess_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionSuccess_MCC_Retreat_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionSuccess_MCC_Destroyed_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionFail_MCC_Docked_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionFail_CR_Depleted_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionFail_noSpawnPoints_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionEnter_Stage_01_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionEnter_Stage_02_Defenders')
    axiomClass.AddElement('DustAudioMsg_MissionActive_Defenders')
    axiomClass.AddElement('DustAudioMsg_AttHackComplete_ObjMissileConsole_Defenders')
    axiomClass.AddElement('DustAudioMsg_AttGainsControl_ObjMissileConsole_Defenders')
    axiomClass.AddElement('DustAudioMsg_ObjTransfControlDisrupted_ObjMissileConsole_HackedByAttacker')
    axiomClass.AddElement('DustAudioMsg_DefHackComplete_ObjMissileConsole_Defenders')
    axiomClass.AddElement('DustAudioMsg_DefGainsControl_ObjMissileConsole_Defenders')
    axiomClass.AddElement('DustAudioMsg_HackComplete_destr_Attackers')
    axiomClass.AddElement('DustAudioMsg_HackComplete_capt_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjControl_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjSelfDestrDisrupted_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjTransfControlDisrupted_ObjCapasitor_Attackers')
    axiomClass.AddElement('DustAudioMsg_DefHackComplete_ObjCapasitor_Attackers')
    axiomClass.AddElement('DustAudioMsg_DefGainsControl_ObjCapasitor_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjDefRelay_50orLess_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjDefRelay_10orLess_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjCapasitor_50orLess_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjArmor_ObjCapasitor_10orLess_Attackers')
    axiomClass.AddElement('DustAudioMsg_MCC_shield_50_Attackers')
    axiomClass.AddElement('DustAudioMsg_MCC_shield_10_Attackers')
    axiomClass.AddElement('DustAudioMsg_MCC_shield_0_Attackers')
    axiomClass.AddElement('DustAudioMsg_MCC_armor_50_Attackers')
    axiomClass.AddElement('DustAudioMsg_MCC_armor_10_Attackers')
    axiomClass.AddElement('DustAudioMsg_MissionSuccess_Attackers')
    axiomClass.AddElement('DustAudioMsg_MissionFail_Attackers')
    axiomClass.AddElement('DustAudioMsg_MissionFail_MCC_Retreat_Attackers')
    axiomClass.AddElement('DustAudioMsg_MissionFail_MCC_Destroyed_Attackers')
    axiomClass.AddElement('DustAudioMsg_MissionEnter_Stage_01_Attackers')
    axiomClass.AddElement('DustAudioMsg_MissionEnter_Stage_02_Attackers')
    axiomClass.AddElement('DustAudioMsg_MissionActive_Attackers')
    axiomClass.AddElement('DustAudioMsg_AttHackComplete_Attackers')
    axiomClass.AddElement('DustAudioMsg_AttGainsControl_Attackers')
    axiomClass.AddElement('DustAudioMsg_ObjTransfControlDisrupted_ObjMissileConsole_HackedByDefender')
    axiomClass.AddElement('DustAudioMsg_DefHackComplete_ObjMissileConsole_Attackers')
    axiomClass.AddElement('DustAudioMsg_DefGainsControl_ObjMissileConsole_Attackers')
    axiomClass.AddElement('DustAudioMsg_AttHackComplete_ObjCapasitor_Defenders')
    axiomClass = ax2.CreateClass('DustWheelProperties', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Name m_BoneName', caption='Bone Name')
    axiomClass.AddAttribute('Vector m_vBoneOffset', caption='Bone Offset')
    axiomClass.AddAttribute('Float m_fWheelRadius = 35.0', caption='Wheel Radius')
    axiomClass.AddAttribute('Float m_fSuspensionTravel = 60.0', caption='Suspension Travel')
    axiomClass.AddAttribute('Float m_fSteerFactor = 1.0', caption='Steer Factor')
    axiomClass.AddAttribute('Float m_fLongSlipFactor = 1.0', caption='Long Slip Factor')
    axiomClass.AddAttribute('Float m_fLatSlipFactor = 1.0', caption='Lat Slip Factor')
    axiomClass.AddAttribute('Float m_fHandbrakeLongSlipFactor = 1.0', caption='Handbrake Long Slip Factor')
    axiomClass.AddAttribute('Float m_fHandbrakeLatSlipFactor = 1.0', caption='Handbrake Lat Slip Factor')
    axiomClass.AddAttribute('Float m_fSuspensionSpeed = 100.0', caption='Suspension Speed')
    axiomClass.AddAttribute('Name m_SkelControlName', caption='Skel Control Name')
    axiomClass.AddAttribute('EWheelSide m_eSide = SIDE_None', caption='Wheel Side')
    axiomClass.AddAttribute('Bool m_bPoweredWheel = True', caption='Powered Wheel')
    axiomClass.AddAttribute('Float m_fParkedSlipFactor = 1.0', caption='Parked Slip Factor')
    axiomClass.AddAttribute('Bool m_HandbrakeLockWheel = False', caption='HandbrakeLockWheel')
    axiomClass.AddAttribute('Bool m_bHoverWheel = False', caption='Hover Wheel')
    axiomClass.AddAttribute('Bool m_bUseWheelEffect = False', caption='Use Wheel Effect')
    axiomClass.AddAttribute('Float m_fSuspensionStiffness = 0.0', caption='Wheel Suspension Stiffness', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSuspensionDamping = 0.0', caption='Wheel Suspension Damping', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSuspensionBias = 0.0', caption='Wheel Suspension Bias')
    axiomClass = ax2.CreateClass('VehicleUprightConstraints', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Bool bStayUpright = True', caption='bStayUpright')
    axiomClass.AddAttribute('Float StayUprightRollResistAngle = 5.0', caption='StayUprightRollResistAngle')
    axiomClass.AddAttribute('Float StayUprightPitchResistAngle = 5.0', caption='StayUprightPitchResistAngle')
    axiomClass.AddAttribute('Float StayUprightStiffness = 1000.0', caption='StayUprightStiffness')
    axiomClass.AddAttribute('Float StayUprightDamping = 1000.0', caption='StayUprightDamping')
    axiomClass = ax2.CreateClass('VehiclePhysicalMaterials', standalone=False, forUE3=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('ContentReference m_pDrivingPhysicalMaterial', caption='m_pDrivingPhysicalMaterial')
    axiomClass.AddAttribute('ContentReference m_pDefaultPhysicalMaterial', caption='m_pDefaultPhysicalMaterial')
    axiomClass = ax2.CreateClass('WeaponAimTargetQuad', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Float widthScaleStart = 1.2', text='scaled width, the aim assist function (friction or adhesion) starts to take effects when reticule enters this area')
    axiomClass.AddAttribute('Float widthScaleMax = 0.8', text='scaled width, the aim assist function (friction or adhesion) reaches the maximum effects when reticule enters this area')
    axiomClass.AddAttribute('Float heightScaleStart = 1.2', text='scaled height, the aim assist function (friction or adhesion) starts to take effects when reticule enters this area')
    axiomClass.AddAttribute('Float heightScaleMax = 0.8', text='scaled height, the aim assist function (friction or adhesion) reaches the maximum effects when reticule enters this area')
    axiomClass = ax2.CreateClass('WeaponAimFriction', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Float playerYawSpeedScale = 0.5', text="it scales the player yaw rotating speed, also affected by the frictional factor (which is interpolated from the current position between 'Start' and 'Max')")
    axiomClass.AddAttribute('Float playerPitchSpeedScale = 0.5', text="it scales the player pitch rotating speed, also affected by the frictional factor (which is interpolated from the current position between 'Start' and 'Max')")
    axiomClass.AddAttribute('Bool enable = True', text='If the aim-friction is enabled')
    axiomClass.AddAttribute('Bool aimFrictionPlayers = True', caption='whether aim-friction is enabled for enemy players')
    axiomClass.AddAttribute('Bool aimFrictionVehicles = True', caption='whether aim-friction is enabled for enemy vehicles')
    axiomClass.AddAttribute('Bool aimFrictionTurrets = True', caption='whether aim-friction is enabled for enemy turrets')
    axiomClass.AddAttribute('Float activeRangeMax = 5000', text='the maximum range that the friction is activated (in unreal length unit)')
    axiomClass.AddAttribute('Float activeRangeMin = 300', text='the minimum range that the friction is activated (in unreal length unit)')
    axiomClass.AddAttribute('WeaponAimTargetQuad targetQuad', text='it defines two nested scaled quads(width & height) of the target')
    axiomClass.AddAttribute('Float activeRangeMaxZoomed = 5000', text='the maximum range that the friction is activated (in unreal length unit) when zoomed')
    axiomClass.AddAttribute('Float playerYawSpeedScaleZoomed = 0.5', text="it scales the player yaw rotating speed, also affected by the frictional factor (which is interpolated from the current position between 'Start' and 'Max') when zoomed")
    axiomClass.AddAttribute('Float playerPitchSpeedScaleZoomed = 0.5', text="it scales the player pitch rotating speed, also affected by the frictional factor (which is interpolated from the current position between 'Start' and 'Max') when zoomed")
    axiomClass = ax2.CreateClass('WeaponAimAdhesion', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Bool enable = True', text='If the aim-adhesion is enabled')
    axiomClass.AddAttribute('Bool aimAdhesionPlayers = True', caption='whether aim-adhesion is enabled for enemy players')
    axiomClass.AddAttribute('Bool aimAdhesionVehicles = True', caption='whether aim-adhesion is enabled for enemy vehicles')
    axiomClass.AddAttribute('Bool aimAdhesionTurrets = True', caption='whether aim-adhesion is enabled for enemy turrets')
    axiomClass.AddAttribute('Float activeRangeMax = 5000', text='the maximum range that the adhesion is activated (in unreal length unit)')
    axiomClass.AddAttribute('Float activeRangeMin = 300', text='the minimum range that the adhesion is activated (in unreal length unit)')
    axiomClass.AddAttribute('Float maxFollowingRateYaw = 30', text='the maximum angular velocity (degrees per second) that the Aim Adhesion will give you')
    axiomClass.AddAttribute('Float maxFollowingRatePitch = 30', text='the maximum angular velocity (degrees per second) that the Aim Adhesion will give you')
    axiomClass.AddAttribute('Float adhesivePercentageYaw = 1.0', text='the percentage of the adhesive capacity, that the Aim Adhesion will replicate for you when the target is moving.')
    axiomClass.AddAttribute('Float adhesivePercentagePitch = 1.0', text='the percentage of the adhesive capacity, that the Aim Adhesion will replicate for you when the target is moving.')
    axiomClass.AddAttribute('WeaponAimTargetQuad targetQuad', text='it defines two nested scaled quads(width & height) of the target')
    axiomClass.AddAttribute('Float activeRangeMaxZoomed = 5000', text='the maximum range that the adhesion is activated (in unreal length unit) when zoomed')
    axiomClass.AddAttribute('Float maxFollowingRateYawZoomed = 30', text='the maximum angular velocity (degrees per second) that the Aim Adhesion will give you when zoomed')
    axiomClass.AddAttribute('Float maxFollowingRatePitchZoomed = 30', text='the maximum angular velocity (degrees per second) that the Aim Adhesion will give you when zoomed')
    axiomClass.AddAttribute('Float adhesivePercentageYawZoomed = 1.0', text='the percentage of the adhesive capacity when zoomed, that the Aim Adhesion will replicate for you when the target is moving.')
    axiomClass.AddAttribute('Float adhesivePercentagePitchZoomed = 1.0', text='the percentage of the adhesive capacity when zoomed, that the Aim Adhesion will replicate for you when the target is moving.')
    axiomClass = ax2.CreateClass('WeaponCameraRotationScale', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float scaleZoomed = 0.6', text='the camera rotation scale when the weapon is zoomed')
    axiomClass.AddAttribute('Float scaleNotZoomed = 1.0', text='the camera rotation scale when the weapon is not zoomed')
    axiomClass = ax2.CreateClass('WeaponDispersion', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Float maxAngleInDegrees = 3.0', caption='default maximum dispersion angle (in degrees)')
    axiomClass.AddAttribute('Float step = 0.2', caption='Step Percentage Per Shot - (0 - 1.0)')
    axiomClass.AddAttribute('Float lowerBound = 0.0', caption='The minimum dispersion factor (0 - 1.0)')
    axiomClass.AddAttribute('Float timeCostFromMaxToMin = 0.5', caption='total time cost when the dispersion falls from max to min (in seconds)')
    axiomClass.AddAttribute('Float moveTurnPenalty = 0.3', caption='Dispersion panetaly factor when player is moving or turning- (0 - 1.0)')
    axiomClass.AddAttribute('Float movePenaltyLowerBound = 200', caption='Velocity lower bound of Moving Penalty Calculation (in Unreal unit)')
    axiomClass.AddAttribute('Float movePenaltyUpperBound = 500', caption='Velocity upper bound of Moving Penalty Calculation (in Unreal unit)')
    axiomClass.AddAttribute('Float turnPenaltyLowerBound = 5000', caption='Lower bound of Turing Penalty Calculation (in Unreal rotator unit)')
    axiomClass.AddAttribute('Float turnPenaltyUpperBound = 25000', caption='Upper bound of Turing Penalty Calculation (in Unreal rotator unit)')
    axiomClass.AddAttribute('Float crouchFactor = 0.8', caption='Crouch Factor (0 - 1.0)')
    axiomClass = ax2.CreateClass('WeaponOverHeating', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Bool enable = False', text='Enable overheating on this weapon')
    axiomClass.AddAttribute('Float maximumHeat = 100', text='maximum heat this weapon can tolerate befoer it will either seize or damage the player')
    axiomClass.AddAttribute('Float overheatIntensity = 2.0', text='scale to control the intensity of overheating color')
    axiomClass.AddAttribute('Float heatCostPerSecond = 20', text='how much heat builds up per second (for continuous fire weapons), or the heat cost per shot * rate of fire', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float standardOperationalLimit = 0.75', text='the operation limit of the weapon when overheating (range of 0 to 1)')
    axiomClass.AddAttribute('Float rateOfFirePenalty = 0.5', text='the penalty to the rate of fire while outside of the operational limit')
    axiomClass.AddAttribute('Float dispersionIncrease = 0.5', text='the increase in dispersion while outside of the operational limit')
    axiomClass.AddAttribute('CurveReference heatBasedDamageMultiplier', text='the weapon heat on the X axis and the damage multiplier on the y axis, this multiplier is applied as the heat changes.', group=GROUPS.Combat)
    axiomClass.AddAttribute('CurveReference coolDownRate', text="Curve which defines the weapon's cooldown behaviour.", group=GROUPS.Combat)
    axiomClass.AddAttribute('CurveReference coolDownRateIfOverheated', text="Curve which defines the weapon's cooldown behaviour, once overheated.", group=GROUPS.Combat)
    axiomClass.AddAttribute('Float cooldownTime = 3.0', range=(0.01, None), caption='cooldown Time', text='How long the weapon takes to cooldown', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float coolDownTimeIfOverheated = 5.0', range=(0.01, None), caption='cooldown Time if overheated', text='How long the weapon takes to cooldown if it overheated')
    axiomClass.AddAttribute('Float feedbackDamage = -1.0', text='feedback damage done to the player when exceeding maximum heat threshold, if -1 weapon will seize instead')
    axiomClass.AddAttribute('Float siezeDuration = 5.0', text='how long the weapon will reamin siezed once it has passed the maximum heat threshold')
    axiomClass.AddAttribute('Float maximumHeatToFire = 0.25', text='how much the weapon needs to recover before it can fire')
    axiomClass = ax2.CreateClass('WeaponCrosshair', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float crosshairMinSize = 0', caption='Min Crosshair Size (ratio to the vertical screen size)')
    axiomClass.AddAttribute('Float crosshairMaxSize = 0', caption='Max Crosshair Size (ratio to the vertical screen size)')
    axiomClass = ax2.CreateClass('WeaponRecoil', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float recoilAscentSpeed = 0', caption='Recoil Ascent Speed')
    axiomClass.AddAttribute('Float recoilAscentMaxSpeed = 0', caption='Recoil Ascent Max Speed')
    axiomClass.AddAttribute('Float recoilReturnSpeed = 0', caption='Recoil Return Speed')
    axiomClass.AddAttribute('Float recoilReturnMaxSpeed = 0', caption='Recoil Return Max Speed')
    axiomClass.AddAttribute('Float recoilPitchLimit = 0', caption='Recoil Pitch Limit')
    axiomClass.AddAttribute('Float recoilHandFactor = 0', caption='Recoil Hand Factor')
    axiomClass.AddAttribute('Float recoilForce = 0', caption='Physical Recoil Force')
    axiomClass = ax2.CreateClass('WeaponPlacementInfo', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Vector locationOffset', caption='location offset')
    axiomClass.AddAttribute('Rotator rotationOffset', caption='rotation offset')
    axiomClass = ax2.CreateClass('WeaponDOFInfo', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float defaultDistance', caption='DOF distance in default mode')
    axiomClass.AddAttribute('Float defaultInnerRadius', caption='DOF inner radius (control the fading range) in default mode')
    axiomClass.AddAttribute('Float zoomedDistance', caption='DOF distance in zoomed mode')
    axiomClass.AddAttribute('Float zoomedInnerRadius', caption='DOF inner radius (control the fading range) in zoomed mode')
    axiomClass = ax2.CreateClass('WeaponSpring', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool enableWeaponSpring', caption='Enabled?')
    axiomClass.AddAttribute('Vector locationInterpSpeed', caption='Location Interpolation Speed')
    axiomClass.AddAttribute('Vector locationStrength', caption='Location Strength')
    axiomClass.AddAttribute('Vector rotationInterpSpeedPYR', caption='Rotation Interpolation Speed (Pitch, Yaw, Roll)')
    axiomClass.AddAttribute('Vector rotationStrengthPYR', caption='Rotation Strength (Pitch, Yaw, Roll)')
    axiomClass.AddAttribute('Float rotationAxisOffset', caption='Offset of rotation axis')
    axiomClass = ax2.CreateClass('ENceCameraMode', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('NCE_CM_FIRST_PERSON')
    axiomClass.AddElement('NCE_CM_THIRD_PERSON')
    axiomClass.AddElement('NCE_CM_VEHICLE')
    axiomClass.AddElement('NCE_CM_VEHICLE_FIRST_PERSON')
    axiomClass.AddElement('NCE_CM_TURRET_FIRST_PERSON')
    axiomClass.AddElement('NCE_CM_AIR_VEHICLE')
    axiomClass.AddElement('NCE_CM_TURRET_THIRD_PERSON')
    axiomClass.AddElement('NCE_CM_ARCBALL')
    axiomClass.AddElement('NCE_CM_TURRET_EMPTY')
    axiomClass.AddElement('NCE_CM_VEHICLE_DEATH')
    axiomClass = ax2.CreateClass('NceCameraModeVehicleParams', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool m_bJumpCameraEnable = False')
    axiomClass.AddAttribute('UE3Degree m_fJumpCameraMaxPitch = -16', text='the max pitch angle')
    axiomClass.AddAttribute('Bool m_bCameraDeathEnable = False', caption='Enable death camera')
    axiomClass.AddAttribute('UE3Degree m_iCameraDeathRotationSpeed = 11', caption='Death camera rotation speed', text='Rotation speed on yaw, degree per second')
    axiomClass.AddAttribute('Float fLookAroundEaseInSlerpRate = 3.2', caption='Look around camera ease in slerp rate ')
    axiomClass.AddAttribute('Float fLookAroundEaseOutSlerpRate = 2.2', caption='Look around camera ease out slerp rate ')
    axiomClass.AddAttribute('Float fBottomOutCameraShakeScale = 0.0', caption='The multiplier applied to bottom out camera shake', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSuspensionCameraShakeScale = 0.0', caption='The multiplier applied to suspension camera shake', range=(0.0, None))
    axiomClass.AddAttribute('CurveReference m_LookAroundCurveYawLerp', uemodifier='norep', caption='Controller Input Yaw Lerp Curve')
    axiomClass.AddAttribute('CurveReference m_LookAroundCurvePitchLerp', uemodifier='norep', caption='Controller Input Pitch Lerp Curve')
    axiomClass = ax2.CreateClass('NceCameraModeAirVehicleParams', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Meter fCameraDisplacementY = 5', text='the distance the boom origin moves in Y at maximum roll')
    axiomClass.AddAttribute('Meter fCameraDisplacementZ = -1', text='the distance the boom origin moves in Z at maximum roll')
    axiomClass.AddAttribute('UE3Degree fCameraDisplacementMaxRoll = 30', text='the max roll for the displacement')
    axiomClass.AddAttribute('Float fCameraDisplacementBlend = 0.05', text='the blend rate for the displacement')
    axiomClass.AddAttribute('Float fCameraDisplacementMinLinearVelocityY = 1', text='minimum speed before the displacement begins ( KPH )', range=(0.0, None))
    axiomClass.AddAttribute('Float fCameraDisplacementMaxLinearVelocityY = 55', text='speed at which the maximum displacement is reached ( KPH )', range=(0.0, None))
    axiomClass = ax2.CreateClass('NceCameraModeParams', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ENceCameraMode eCameraMode = NCE_CM_THIRD_PERSON', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float fBoomLength = 650')
    axiomClass.AddAttribute('Vector vBoomOrigin')
    axiomClass.AddAttribute('Vector vBoomOffset')
    axiomClass.AddAttribute('Vector vFocalPointOffset')
    axiomClass.AddAttribute('Vector vSafeCameraOffset')
    axiomClass.AddAttribute('Float fFieldOfView = 75')
    axiomClass.AddAttribute('Float fSecondaryFieldOfView = 90')
    axiomClass.AddAttribute('Float fTurrentSlerpRate = 0')
    axiomClass.AddAttribute('Float fTargetActorSlerpRate = 0')
    axiomClass.AddAttribute('Name sFollowSocketName', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Actor m_pParentActor', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED)
    axiomClass.AddAttribute('nceTurret m_pTurret', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED)
    axiomClass.AddAttribute('Bool m_bPivotOnTurret = False')
    axiomClass.AddAttribute('Bool m_bLookBackEnable = False')
    axiomClass.AddAttribute('Float fovBlendTime = 1', text='the time in seconds to blend between first the secondary FOV')
    axiomClass.AddAttribute('NceCameraModeAirVehicleParams CameraModeAirVehicleParams', text="the air vehicle's params")
    axiomClass.AddAttribute('NceCameraModeVehicleParams CameraModeVehicleParams', text='the vehicle params')
    axiomClass = ax2.CreateClass('CameraControlInfo', standalone=False, group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float yawSpeed = 120', text='General yaw speed when the joystick is not pushed to the limit, which is also the base speed for acceleration.', group=GROUPS.Content)
    axiomClass.AddAttribute('Float yawExtremeSpeed = 360', text='Extreme yaw speed that could be reached after acceleration when the joystick is pushed to the limit', group=GROUPS.Content)
    axiomClass.AddAttribute('Float pitchSpeed = 60', text='General pitch speed when the joystick is not pushed to the limit, which is also the base speed for acceleration.', group=GROUPS.Content)
    axiomClass.AddAttribute('Float pitchExtremeSpeed = 100', text='Extreme pitch speed that could be reached after acceleration when the joystick is pushed to the limit', group=GROUPS.Content)
    axiomClass.AddAttribute('Float timeToExtreme = 4', text='the acceleration time for both yaw & pitch(in seconds)', group=GROUPS.Content)
    axiomClass.AddAttribute('Float minAccelMagnitude = 0.95', text='minimum controller magnitude to begin accumulating controller acceleration', group=GROUPS.Content)
    axiomClass.AddAttribute('Float max3rdPersonPitchLimit = 75', text='the max third person pitch limit (in degrees)', group=GROUPS.Content)
    axiomClass.AddAttribute('Float min3rdPersonPitchLimit = -15', text='the min third person pitch limit (in degrees)', group=GROUPS.Content)
    axiomClass.AddAttribute('CurveReference curveMagnitudeScaling', text='controls how the basic speed changes based on the magnitude')
    axiomClass.AddAttribute('CurveReference curveAcceleration', text='controls how acceleration is applied')
    axiomClass.AddAttribute('CurveReference curveBearingScaling', text='controls the scaling of camera bearing, for additional smoothing')
    axiomClass = ax2.CreateClass('RDVDeploymentSettings', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float m_fCloakEffectTime = 3.0', uemodifier='private', caption='Time span of the cloak effect', range=(0.0, 60.0))
    axiomClass.AddAttribute('Float m_fCloakDistanceEntry = 100.0', uemodifier='private', caption='Entry distance from dropoff location to uncloak', range=(0.0, 5000.0))
    axiomClass.AddAttribute('Float m_fCloakDistanceExit = 100.0', uemodifier='private', caption='Exit distance from dropoff location to cloak', range=(0.0, 5000.0))
    axiomClass.AddAttribute('Float m_fCloakDestroyTime = 3.0', uemodifier='private', caption='Time after cloaking before destroying', range=(0.0, 60.0))
    axiomClass.AddAttribute('Float m_fRDVSpawnDistance = 600.0', uemodifier='private', caption='Initial Spawn Distance', range=(100.0, 5000.0))
    axiomClass.AddAttribute('Float m_fRDVSpawnHeight = 75.0', uemodifier='private', caption='Spawn Height above landscape', range=(0.0, 500.0))
    axiomClass.AddAttribute('Float m_fDropOffRandDist = 10.0', uemodifier='private', caption='Drop Off Randomise Distance', range=(0.0, 5000.0))
    axiomClass.AddAttribute('Float m_fDropOffHeightAdjust = 0.0', uemodifier='private', caption='Drop Off Height Adjust', range=(0.0, 100.0))
    axiomClass.AddAttribute('Float m_fDropOffSlowSpeed = 10.0', uemodifier='private', caption='Drop Off Max Speed', range=(5.0, 50.0))
    axiomClass.AddAttribute('Float m_fDropOffCloseDist = 15.0', uemodifier='private', caption='Drop Off Close Enough Distance', range=(1.0, 50.0))
    axiomClass.AddAttribute('Float m_fDropOffTime = 0.0', uemodifier='private', caption='Wait Time after dropping vehicle', range=(0.0, 10.0))
    axiomClass.AddAttribute('Float m_fEntryPathHeight = 10.0', uemodifier='private', caption='Height before making final descent', range=(5.0, 50.0))
    axiomClass.AddAttribute('Float m_fCloseDistPreDescend = 5.0', uemodifier='private', caption='Distance before making final descent', range=(5.0, 50.0))
    axiomClass.AddAttribute('Float m_fDeploySafeDist = 25.0', uemodifier='private', caption='Deploy Distance Prioritised', range=(0.0, 100.0))
    axiomClass.AddAttribute('Float m_fDeployMaxDist = 150.0', uemodifier='private', caption='Deploy Distance Fallback', range=(0.0, 250.0))
    axiomClass.AddAttribute('Float m_fDeploySafeReduction = 20.0', uemodifier='private', caption='Distance to reduce Navmesh bounds by', range=(10.0, 100.0))
    axiomClass.AddAttribute('Name m_VehicleSpawnSocketName = VehicleSpawnSocket', uemodifier='private', caption='Vehicle Spawn Socket Name')
    axiomClass.AddAttribute('Name m_VehicleAttachSocketName = VehicleAttachSocket', uemodifier='private', caption='Vehicle Attach Socket Name')
    axiomClass.AddAttribute('Float m_fJointLinearLimitValue = 0.1', uemodifier='private', caption='Joint Linear Limit Value', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fJointLinearLimitRestitution = 0.25', uemodifier='private', caption='Joint Linear Limit Restitution', range=(0.0, 1.0))
    axiomClass.AddAttribute('Float m_fJointLinearLimitSpring = 30000.0', uemodifier='private', caption='Joint Linear Limit Spring', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fJointLinearLimitDamping = 50000.0', uemodifier='private', caption='Joint Linear Limit Damping', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fJointPitchLimitValue = 1.0', uemodifier='private', caption='Joint Pitch Limit Value', range=(-90.0, 90.0))
    axiomClass.AddAttribute('Float m_fJointPitchLimitRestitution = 0.25', uemodifier='private', caption='Joint Pitch Limit Restitution', range=(0.0, 1.0))
    axiomClass.AddAttribute('Float m_fJointPitchLimitSpring = 150000.0', uemodifier='private', caption='Joint Pitch Limit Spring', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fJointPitchLimitDamping = 30000000.0', uemodifier='private', caption='Joint Pitch Limit Damping', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fJointRollLimitValue = 1.0', uemodifier='private', caption='Joint Roll Limit Value', range=(-90.0, 90.0))
    axiomClass.AddAttribute('Float m_fJointRollLimitRestitution = 0.25', uemodifier='private', caption='Joint Roll Limit Restitution', range=(0.0, 1.0))
    axiomClass.AddAttribute('Float m_fJointRollLimitSpring = 150000.0', uemodifier='private', caption='Joint Roll Limit Spring', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fJointRollLimitDamping = 30000000.0', uemodifier='private', caption='Joint Roll Limit Damping', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fLightInnerCone = 20.0', uemodifier='private', caption='Light Inner Cone Angle', range=(0.0, 89.0))
    axiomClass.AddAttribute('Float m_fLightOuterCone = 25.0', uemodifier='private', caption='Light Outer Cone Angle', range=(0.0, 89.0))
    axiomClass.AddAttribute('Meter m_fLightRadius = 250.0', uemodifier='private', caption='Light Radius', range=(0.0, 1000.0))
    axiomClass.AddAttribute('Float m_fLightFallOff = 0.5', uemodifier='private', caption='Light Fall Off Exponent', range=(0.1, 5.0))
    axiomClass.AddAttribute('Float m_fLightBrightness = 10.0', uemodifier='private', caption='Light Max Brightness', range=(0.1, 16.0))
    axiomClass.AddAttribute('Int m_iLightColourR = 200', uemodifier='private', caption='Light Colour Red Channel', range=(0, 255))
    axiomClass.AddAttribute('Int m_iLightColourG = 220', uemodifier='private', caption='Light Colour Green Channel', range=(0, 255))
    axiomClass.AddAttribute('Int m_iLightColourB = 255', uemodifier='private', caption='Light Colour Blue Channel', range=(0, 255))
    axiomClass.AddAttribute('Bool m_bCastDynamicShadows = True', uemodifier='private', caption='Light To Cast Dynamic Shadows')
    axiomClass.AddAttribute('Name m_SpotLightSocketName = LightSocket01', uemodifier='private', caption='SpotLight Socket Name')
    axiomClass = ax2.CreateClass('AIBlackboardSettings', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float m_fMaxSuspiciousDamage = 1000', uemodifier='private', caption='Max Suspicious Damage', range=(0, 2000), text='Clamp damage an enemy has applied to the target, otherwise large targets dont forget')
    axiomClass.AddAttribute('Float m_fSuspiciousDecayRate = 100', uemodifier='private', caption='Suspicious Decay Rate', range=(0, 2000), text='Rate the suspicious damage is decayed per second - so the owner forgets')
    axiomClass = ax2.CreateClass('AISettings', standalone=True, forUE3=True)
    axiomClass.AddAttribute('RDVDeploymentSettings m_RDVSettings', uemodifier='private', caption='RDV Deployment Settings')
    axiomClass.AddAttribute('AIBlackboardSettings m_AIBlackboardSettings', uemodifier='private', caption='AI Blackboard Settings')
    axiomClass = ax2.CreateClass('AIVisionManagerSetting', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Int m_iMaxLinechecksPerFrame = 20', uemodifier='private', caption='Max lineChecks per frame', range=(0, 100), text='Maximum amount of linechecks for the vision system. Linechecks are expensive, so keep as low as possible')
    axiomClass.AddAttribute('Int m_iVisionComponentsUpdatePerFrame = 10', uemodifier='private', caption='Vision component updated per frame', range=(0, 100), text='Amount of actors to update in a single frame')
    axiomClass.AddAttribute('Degree m_fStartShootingAngle = 25', uemodifier='private', caption='Start Shooting Angle', range=(0, 180), text='Angle between target and current aim to start shooting')
    axiomClass = ax2.CreateClass('AIVisionSettings', standalone=True, forUE3=True)
    axiomClass.AddAttribute('AIVisionManagerSetting m_AIVisionManagerSettings', uemodifier='private', caption='AI Vision Manager Settings')
    axiomClass = ax2.CreateClass('EAIBehaviourLibrary', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('AIBL_Default', description='Default')
    axiomClass.AddElement('AIBL_DefaultDrone', description='Drone Default')
    axiomClass.AddElement('AIBL_SearchDrone', description='Drone Search')
    axiomClass.AddElement('AIBL_PatrolDrone', description='Drone Patrol')
    axiomClass.AddElement('AIBL_HuntDrone', description='Drone Hunt')
    axiomClass.AddElement('AIBL_Turret', description='Turret')
    axiomClass.AddElement('AIBL_RDV', description='RDV')
    axiomClass.AddElement('AIBL_Profile', description='Infantry Profile')
    axiomClass = ax2.CreateClass('AITemplate', standalone=True, forUE3=True)
    axiomClass.AddAttribute('DustAIAccuracyProperties m_AccuracyProperties', group=GROUPS.Combat, caption='AI Accuracy Properties')
    axiomClass.AddAttribute('DustVisionProperties m_VisionProperties', group=GROUPS.Combat, caption='Vision Properties')
    axiomClass.AddAttribute('DustTargettingProperties m_TargettingProperties', group=GROUPS.Combat, caption='Targeting Properties')
    axiomClass.AddAttribute('EAIBehaviourLibrary m_BehaviourType = AIBL_Default', group=GROUPS.Combat, caption='Behaviour Library', text='Which behaviour library should be use')
    axiomClass.AddAttribute('Bool m_bUseStrategyLayer = False', group=GROUPS.Combat, caption='Use Strategy Layer', text='Give the AI a strategy layer for things like squad behaviours')
    axiomClass = ax2.CreateClass('NPCDefinition', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('String m_sDisplayName', caption='Display Name', text="The NPC's display name")
    axiomClass.AddAttribute('TypeReference m_iPawnTypeID', caption='Pawn Type', text="The NPC's pawn type", allowedClasses='DustVIC_Character')
    axiomClass.AddAttribute('TypeReference m_aiFittingTypeIDs', caption='Fittings', text="The NPC's fitting types", allowedClasses='InventoryItem', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TypeReference m_AITemplate', caption='AI Template', text='The type of AI', allowedClasses='AITemplate')
    axiomClass = ax2.CreateClass('WorldIcon', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('String iconSocketName', text='The socket name of this icon in mesh skeleton-bone', caption='Icon Socket Name')
    axiomClass.AddAttribute('Float verticalOffset', text='The offset on vertical direction', caption='Vertical Offset')
    axiomClass = ax2.CreateClass('WorldIconFadeDistances', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Meter iconFadeDistMin = 150.0', text='Icon starts to fade if distance is greater than the value', caption='Icon Fade Dist Min')
    axiomClass.AddAttribute('Meter iconFadeDistMax = 200.0', text='Icon fade to transparent if distance is greater than the value', caption='Icon Fade Dist Max')
    axiomClass.AddAttribute('Meter infoFadeDistMin = 20.0', text='Info starts to fade if distance is greater than the value', caption='Info Fade Dist Min')
    axiomClass.AddAttribute('Meter infoFadeDistMax = 35.0', text='Info fade to transparent if distance is greater than the value', caption='Info Fade Dist Max')
    axiomClass.AddAttribute('Float iconFadeLength = 5000.0', modifyFlag=MODIFY_REMOVED, text='Icon is fully transparent when further away than Near + Length', caption='Icon far fade in length (cm)')
    axiomClass.AddAttribute('Float iconFadeNear = 15000.0', modifyFlag=MODIFY_REMOVED, text='Icon is fully faded in when closer', caption='Icon near fade in distance (cm)')
    axiomClass.AddAttribute('Float infoFadeLength = 1500.0', modifyFlag=MODIFY_REMOVED, text='Name is fully transparent when further away than Near + Length', caption='Name far fade in length (cm)')
    axiomClass.AddAttribute('Float infoFadeNear = 2000.0', modifyFlag=MODIFY_REMOVED, text='Name is fully faded in when closer', caption='Name near fade in distance (cm)')
    axiomClass = ax2.CreateClass('WorldIconFadeSettings', standalone=True, forUE3=True)
    axiomClass.AddAttribute('Float innerViewConeAngle = 18', range=(0, 180), text='Inner Angle for view cone, the obj will be seen fully in the view cone', caption='Inner View Cone')
    axiomClass.AddAttribute('Float outerViewConeAngle = 36', range=(0, 180), text='Outer Angle for view cone, the obj will have a alpha decrease from inner angle to outer angle', caption='Outer View Cone')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_enemyTroops', text='Fading distances for enemy troops', caption='Enemy Troops')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_teamMembers', text='Fading distances for team members', caption='Team Members')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_squadMembers', text='Fading distances for squad members', caption='Squad Members')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_enemyVehicles', text='Fading distances for enemy vehicles', caption='Enemy Vehicles')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_teamVehicles', text='Fading distances for team vehicles', caption='Team Vehicles')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_squadVehicles', text='Fading distances for squad vehicles', caption='Squad Vehicles')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_enemyMcc', text='Fading distances for enemy MCC', caption='Enemy MCC')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_teamMcc', text='Fading distances for team MCC', caption='Team MCC')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_enemyInstallations', text='Fading distances for enemy installations', caption='Enemy Installations')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_teamInstallations', text='Fading distances for team installations', caption='Team Installations')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_primaryControlledObjectives', text='Fading distances for controlled primary objectives', caption='Primary Controlled Objectives')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_secondaryControlledObjectives', text='Fading distances for controlled secondary objectives', caption='Secondary Controlled Objectives')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_teamEquipment', text='Fading distances for team equipments', caption='Team Equipments')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_enemyEquipment', text='Fading distances for enemy equipments', caption='Enemy Equipments')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_enemyConsole', text='Fading distances for enemy consoles', caption='Enemy Consoles')
    axiomClass.AddAttribute('WorldIconFadeDistances worldiconfadedist_teamConsole', text='Fading distances for team consoles', caption='Team Consoles')
    axiomClass = ax2.CreateClass('CmdObjTargetProp', standalone=False, group=GROUPS.Logic, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float radiusForAttack = 15000.0', text='The scope of commander objective when attacking the target', caption='Radius When Attacking')
    axiomClass.AddAttribute('Float radiusForDefend = 10000.0', text='The scope of commander objective when defending the target', caption='Radius When Defending')
    axiomClass.AddAttribute('Float radiusForScout = 8000.0', text='The scope of commander objective when scouting', caption='Radius For Scout')
    axiomClass.AddAttribute('Float wpMultiplierForAttackCommander = 1.5', text='The multiplier of war points for commander when attacking the target', caption='Commander WarPoint Multiplier When Attacking')
    axiomClass.AddAttribute('Float wpMultiplierForAttackInfantry = 1.5', text='The multiplier of war points for infantry when attacking the target', caption='Infantry WarPoint Multiplier When Attacking')
    axiomClass.AddAttribute('Float wpMultiplierForDefendCommander = 2.5', text='The multiplier of war points for commander when defending the target', caption='Commander WarPoint Multiplier When Defending')
    axiomClass.AddAttribute('Float wpMultiplierForDefendInfantry = 2.5', text='The multiplier of war points for infantry when defending the target', caption='Infantry WarPoint Multiplier When Defending')
    axiomClass.AddAttribute('Float wpMultiplierForScoutCommander = 1.0', text='The multiplier of war points for commander when scouting', caption='Commander WarPoint Multiplier When Scouting')
    axiomClass.AddAttribute('Float wpMultiplierForScoutInfantry = 1.5', text='The multiplier of war points for infantry when scouting', caption='Infantry WarPoint Multiplier When Scouting')
    axiomClass = ax2.CreateClass('SimpleSound', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference soundTemplate')
    axiomClass.AddAttribute('Bool isLocal = True')
    axiomClass = ax2.CreateClass('TaggedSound', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('String soundTag')
    axiomClass.AddAttribute('ContentReference soundTemplate', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Bool isLocal = False')
    axiomClass.AddAttribute('Bool isDummyOneShot = False')
    axiomClass.AddAttribute('String socketName')
    axiomClass = ax2.CreateClass('EEffectAttachmentType', axiom.Enumerate)
    axiomClass.AddElement('Effect_AttachOwner')
    axiomClass.AddElement('Effect_AboveTerrain')
    axiomClass.AddElement('Effect_SpawnOwnerLocation')
    axiomClass = ax2.CreateClass('SimpleEffectFloatParam', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Name paramName', caption='Parameter')
    axiomClass.AddAttribute('Float value', caption='Value')
    axiomClass.AddAttribute('Bool isEnabled = False', caption='Enabled', text='If this parameter is enabled. Especially, if true, and Parameter is unset, then the module script will handle the parameter.')
    axiomClass = ax2.CreateClass('SimpleEffectColorParam', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Name paramName', caption='Parameter')
    axiomClass.AddAttribute('LinearColor value', caption='Value')
    axiomClass.AddAttribute('Bool isEnabled = False', caption='Enabled', text='If this parameter is enabled. Especially, if true, and Parameter is unset, then the module script will handle the parameter.')
    axiomClass = ax2.CreateClass('SimpleEffectVectorParam', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Name paramName', caption='Parameter')
    axiomClass.AddAttribute('Vector value', caption='Value')
    axiomClass.AddAttribute('Bool isEnabled = False', caption='Enabled', text='If this parameter is enabled. Especially, if true, and Parameter is unset, then the module script will handle the parameter.')
    axiomClass = ax2.CreateClass('SimpleEffectTextureParam', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name paramName', caption='Parameter')
    axiomClass.AddAttribute('ContentReference value', caption='Value')
    axiomClass.AddAttribute('Bool isEnabled = False', caption='Enabled', text='If this parameter is enabled. Especially, if true, and Parameter is unset, then the module script will handle the parameter.')
    axiomClass = ax2.CreateClass('SimpleEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference effectTemplate', caption='Effect Template')
    axiomClass.AddAttribute('SimpleEffectFloatParam floatParam', caption='Float Parameter')
    axiomClass.AddAttribute('SimpleEffectColorParam colorParam', caption='Color Parameter')
    axiomClass.AddAttribute('SimpleEffectVectorParam vectorParam', caption='Vector Parameter')
    axiomClass.AddAttribute('SimpleEffectTextureParam textureParam', caption='Texture Parameter')
    axiomClass.AddAttribute('String socketNamePrefix', caption='Socket Name Prefix')
    axiomClass.AddAttribute('Bool isContinuous = False', caption='Is Continuous')
    axiomClass = ax2.CreateClass('SimpleMaterialEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SimpleEffectFloatParam floatParam', caption='Float Parameter')
    axiomClass.AddAttribute('Bool isContinuous = False', caption='Is Continuous')
    axiomClass.AddAttribute('Bool isEnabled = False', caption='Is Enabled')
    axiomClass = ax2.CreateClass('MaterialModifier', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SimpleEffectFloatParam floatParam', caption='Float Parameter')
    axiomClass.AddAttribute('SimpleEffectColorParam colorParam', caption='Color Parameter')
    axiomClass.AddAttribute('SimpleEffectVectorParam vectorParam', caption='Vector Parameter')
    axiomClass.AddAttribute('SimpleEffectTextureParam textureParam', caption='Texture Parameter')
    axiomClass.AddAttribute('Int channel', caption='Channel', text='The channel of the material to be affected.')
    axiomClass = ax2.CreateClass('TaggedEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('String effectStartTag')
    axiomClass.AddAttribute('String effectEndTag')
    axiomClass.AddAttribute('ContentReference effectTemplate', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('String effectSocket')
    axiomClass.AddAttribute('String beamEndParamName')
    axiomClass.AddAttribute('Bool ignoreOwnerHidden = False')
    axiomClass.AddAttribute('EEffectAttachmentType attachmentType = Effect_AttachOwner')
    axiomClass.AddAttribute('Float scale = 1')
    axiomClass.AddAttribute('Float terrainZOffset = 500')
    axiomClass = ax2.CreateClass('DamageSurfaceInteraction', standalone=False, forUE3=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('TypeReference surfaceType', allowedClasses='DustCollisionPhysMeterial')
    axiomClass.AddAttribute('Float damageModifier = 1', range=(0.0, None))
    axiomClass = ax2.CreateClass('DamageType', standalone=True, forUE3=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('DamageSurfaceInteraction surfaceInteractions', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('MaterialPerChannel', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference material', caption='Material')
    axiomClass.AddAttribute('Int channel', caption='Channel', text='The channel for the material')
    axiomClass = ax2.CreateClass('MaterialBasedWreckEffectSpec', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('MaterialPerChannel materials', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Per Channel Materials', text='Materials and their channels for the wreck effect')
    axiomClass.AddAttribute('Second overallDuration = 8', caption='Overall Duration', range=(0, None), text='The overall duration of the wreck effect in second')
    axiomClass.AddAttribute('Second durationBeforeFadeOut = 4', caption='Duration Before Fade Out', range=(0, None), text='The duration of the stage from the beginning of the wreck effect to the point it starts to fade out, measured in second')
    axiomClass.AddAttribute('Name fadeOutParamName', caption='Fade Out Param Name', text='The name of the parameter exposed in the material. Changing the value of the parameter from 0.0 to 1.0 wound cause the actor with the material to fade out.')


def PopulateWreckable(ax2):
    ac = ax2.CreateClass('DustWreckable', standalone=True, group=GROUPS.Content)
    ac.AddAttribute('MaterialBasedWreckEffectSpec mWreckEffectSpec', caption='Wreck Effect Spec', text='The material based wreck effect specification')
    ac.AddAttribute('MaterialBasedWreckEffectSpec mMaterialBasedWreckEffectSpec', caption='Wreck Effect Spec (deprecated)', text='The material based wreck effect specification')


def PopulateLockOn(ax2):
    axiomClass = ax2.CreateClass('ELockOnRestrictionTeam', axiom.Enumerate, standalone=False, group=GROUPS.LockOn)
    axiomClass.AddElement('ELORT_FRIENDLY', description='FRIENDLY')
    axiomClass.AddElement('ELORT_HOSTILE', description='HOSTILE')
    axiomClass.AddElement('ELORT_NEUTRAL', description='NEUTRAL')
    axiomClass = ax2.CreateClass('EVICType', axiom.Enumerate, standalone=False, group=GROUPS.Logic)
    axiomClass.AddElement('VIC_Vehicle', description='Vehicle')
    axiomClass.AddElement('VIC_Installation', description='Installation')
    axiomClass.AddElement('VIC_Character', description='Character')
    axiomClass.AddElement('VIC_Unknown', description='Custom')
    axiomClass = ax2.CreateClass('DustLockOnSpec', standalone=True, forUE3=True, group=GROUPS.LockOn)
    axiomClass.AddAttribute('Bool mLockOnRequired = False', caption='Is LockOn Required', text='If lock-on is required for the type (with this class)')
    axiomClass.AddAttribute('Bool mAutoLockOnActivation = False', caption='Auto LockOn Activation', text='If lock-on can be activated automatically')
    axiomClass.AddAttribute('Float mLockOnViewportWidth = 320', range=(0, None), caption='LockOn Viewport Width', text='The width of the viewport used for lock-on')
    axiomClass.AddAttribute('Float mLockOnViewportHeight = 240', range=(0, None), caption='LockOn Viewport Height', text='The height of the viewport used for lock-on')
    axiomClass.AddAttribute('Int mMinNumTargets = 1', range=(0, None), caption='Min Num Targets', text='The min number of targets allowed')
    axiomClass.AddAttribute('Int mMaxNumTargets = 1', range=(0, None), caption='Max Num Targets', text='The max number of targets allowed')
    axiomClass.AddAttribute('Meter mPrimaryLockOnRange = 0', range=(0, None), caption='Primary LockOn Range', text='Primary lock-on range. If left zero for weapons, the weapon range will be assumed.')
    axiomClass.AddAttribute('Second mLockOnStartDelay = 0.5', range=(0, None), caption='LockOn Start Delay', text='The delay before lock on starts after the target is focused.')
    axiomClass.AddAttribute('Second mLockOnAcquisitionTime = 1', range=(0, None), caption='LockOn Acquisition Time', text='Time required before a lock-on is acquired.')
    axiomClass.AddAttribute('Second mLockOnLosingTime = 0.3', range=(0, None), caption='LockOn Losing Time', text='Time required for an already / being locked on target being invalid to be lost.')
    axiomClass.AddAttribute('Degree mLockOnLosingAngle = 90', range=(0, 180), caption='LockOn Losing Angle', text='Angle between origin-target and origin-forward, for a locked on target to be lost.')
    axiomClass.AddAttribute('ELockOnRestrictionTeam mAllowedTeams', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Teams Allowed', text='The LockOn restriction on target team.')
    axiomClass.AddAttribute('EVICType mAllowedUnitTypes', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.LockOn, caption='Unit Types Allowed', text='The LockOn restriction on target unit type.')
    axiomClass.AddAttribute('TaggedSound mLockOnSounds', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Lock On Sounds', text='Lock On Sounds')
    axiomClass.AddAttribute('Name mTraceEffectInstigatorSocketName', group=GROUPS.Content, caption='Trace Effect Instigator Socket Name', text='The name of the instigator socket, to which the trace effect is attached')
    axiomClass.AddAttribute('SimpleEffect mTraceEffect', group=GROUPS.Content, caption='Trace Effect', text='The special effect that will be played to form a trace between the instigator and the targets in each active pulse')
    axiomClass.AddAttribute('Bool mTSEsOnTraceHitLocation = False', group=GROUPS.Content, caption='TSEs On Trace Hit Location', text='Whether the target special effects should be attached to the trace hit location on targets')
    axiomClass.AddAttribute('SimpleEffect mTargetSpecialEffects', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Target Special Effects', text='The special effects that will be played on the target in each active pulse')
    axiomClass.AddAttribute('SimpleMaterialEffect mTargetMaterialEffect', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS, caption='Target Material Effect', text='The material effect that will be played on the target in each active pulse')


def PopulateBarrelRotationInfo(ax2):
    axiomClass = ax2.CreateClass('BarrelRotationProperties', standalone=False)
    axiomClass.AddAttribute('TypeReference barrelInfoTag', group=GROUPS.Combat, allowedClasses='Tag', caption='Tag to look up for a specific set of barrel info setting')
    axiomClass.AddAttribute('Float initialRatationRoundsPerSecond = 2', group=GROUPS.Combat, caption='Initial Ratation Rounds Per Second', text='larger than zero means counter-clockwise when observed from the front of the gun, vice versa')
    axiomClass.AddAttribute('Float maxRatationRoundsPerSecond = 2', group=GROUPS.Combat, caption='Max Ratation Rounds Per Second', text='larger than zero means counter-clockwise when observed from the front of the gun, vice versa')
    axiomClass.AddAttribute('Float roationAcceleration = 0', group=GROUPS.Combat, caption='Roation Acceleration, Rounds per second', text='rounds per second triggered by per fire. larger than zero means acceleration counter-clockwise,  when observed from the front of the gun')
    axiomClass.AddAttribute('Float decelerationDuration = 2', group=GROUPS.Combat, caption='Rotation Deceleration Duration in Second', text='in second, time it takes to stop spinning')
    axiomClass = ax2.CreateClass('DustBarrelRotationInfo', standalone=True)
    axiomClass.AddAttribute('BarrelRotationProperties mBarrelRotationProperties', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.Combat, caption='Barrel Rotation Properties')


def PopulateEntityAndAdapter(ax2):
    axiomClass = ax2.CreateClass('Entity', standalone=True, group=GROUPS.Content, forUE3=False, attributeFlag=attFlag_NotNull)
    axiomClass.AddAttribute('LocalizedString mDisplayName', attributeFlag=attFlag_NotNull | attFlag_Precache, text='The short display name of this entity type.', caption='Display Name', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('LocalizedString mDescription', attributeFlag=attFlag_NotNull | attFlag_Precache, text='Detailed description of this entity type.', caption='Description', editorFlag=EDITORFLAG_MULTILINE, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('LocalizedString mShortDescription', attributeFlag=attFlag_NotNull | attFlag_Precache, text='Short description of this entity type.', caption='Short Description', editorFlag=EDITORFLAG_MULTILINE, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('String mUE3Class = DustGame.NonUE3Type', attributeFlag=attFlag_NotNull | attFlag_Precache, text='The UE3 class that is used to spawn this entity in the world', group=GROUPS.Engineering, caption='UE3 Class')
    axiomClass.AddAttribute('TypeReference mIconRef = -1', attributeFlag=attFlag_NotNull | attFlag_Precache, allowedClasses='Icon', text='Icon', caption='Icon')
    axiomClass.AddAttribute('URL mGameMechanicsRef = http://dustwiki', caption='Game Mechanics Reference', attributeFlag=attFlag_NotNull | attFlag_NotDumped)
    axiomClass.AddAttribute('URL mAuthoringRef = http://dustwiki', caption='Content Authoring Reference', attributeFlag=attFlag_NotNull | attFlag_NotDumped)
    axiomClass.AddAttribute('Bool mIsPublished = False', text='whether this entity can be used in the game', caption='Is Published', attributeFlag=attFlag_NotNull | attFlag_NotDumped)
    axiomClass = ax2.CreateClass('Icon', standalone=True, group=GROUPS.Content, forUE3=False)
    axiomClass = ax2.CreateClass('Adapter', standalone=True, group=GROUPS.Content, forUE3=False)
    axiomClass.AddAttribute('SlotInfo mModuleSlots', text='the array of all the slots this vic has(new)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.Logic, caption='Slots')


def PopulatePawn(ax2):
    attFlag = DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL
    axiomClass = ax2.CreateClass('Character_Melee_Property', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Float meleeAttackTime', modifyFlag=MODIFY_REMOVED, group=GROUPS.Combat, range=(0.0, None), caption='Time used for each melee attack')
    axiomClass.AddAttribute('Float meleeHitTime', group=GROUPS.Combat, range=(0.0, None), caption='Time to hit target after melee_loop is played')
    axiomClass.AddAttribute('Float meleeAnimTimeForMeleeStart = 0.2', group=GROUPS.Combat, range=(0.0, None), caption='Time of the Animation Melee_In')
    axiomClass.AddAttribute('Float meleeAnimTimeForMeleeAttack = 0.53333', group=GROUPS.Combat, range=(0.0, None), caption='Time of the Animation Melee_Loop')
    axiomClass.AddAttribute('Float meleeAnimTimeForMeleeEnd = 0.2', group=GROUPS.Combat, range=(0.0, None), caption='Time of the Animation Melee_Out')
    axiomClass.AddAttribute('Float meleeDamage', group=GROUPS.Combat, range=(0.0, None), attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Melee damage')
    axiomClass.AddAttribute('Meter meleeRange', group=GROUPS.Combat, range=(0.0, None), attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Melee Range (Meter)')
    axiomClass.AddAttribute('Float meleeAngularRange', group=GROUPS.Combat, range=(0.0, 360.0), attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Melee Angular Range')
    axiomClass.AddAttribute('Float meleeMomentum', group=GROUPS.Combat, range=(0.0, None), caption='Melee Hit Momentum', text='momentum transfer scaling for melee damage')
    axiomClass.AddAttribute('TypeReference damageType', allowedClasses='DamageType', group=GROUPS.Combat, caption='Damage Type', text='The damage type')
    axiomClass.AddAttribute('TypeReference meleeContent', allowedClasses='DustMeleeContent', group=GROUPS.Content, caption='Melee Content ID', text='The type id used to spawn MeleeContent')
    axiomClass.AddAttribute('Float meleeStaminaCost = 30', group=GROUPS.Combat, range=(0, None), attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Melee Stamina Cost', text='The amount of stamina one melee action shot costs.')
    attFlag = DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL
    axiomClass = ax2.CreateClass('MovementAnimationSpeedThreshold', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Meter walkSpeedThreshold = 1.5', range=(0, None), group=GROUPS.Physics, caption='Max speed to play walking animation(Meter/Sec)')
    axiomClass.AddAttribute('Meter runSpeedThreshold = 6', range=(0, None), group=GROUPS.Physics, caption='Max speed to play running animation(Meter/Sec)')
    axiomClass.AddAttribute('Meter sprintSpeedThreshold = 15', range=(0, None), group=GROUPS.Physics, caption='Max speed to play sprinting animation(Meter/Sec)')
    axiomClass = ax2.CreateClass('RefMovementAnimationResourceData', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Float walkAnimDistance = 150.0', range=(0, None), group=GROUPS.Engineering, caption='Distance Covered by Walk Anim', text="Distance a full walk animation will cover when it's played by rate 1.0")
    axiomClass.AddAttribute('Float walkAnimDuration = 1.0', range=(0, None), group=GROUPS.Engineering, caption='Walk Anim Duration')
    axiomClass.AddAttribute('Float runAnimDistance = 300.0', range=(0, None), group=GROUPS.Engineering, caption='Distance Covered by Run Anim', text="Distance a full run animation will cover when it's played by rate 1.0")
    axiomClass.AddAttribute('Float runAnimDuration = 0.666', range=(0, None), group=GROUPS.Engineering, caption='Run Anim Duration')
    axiomClass.AddAttribute('Float sprintAnimDistance = 350.0', range=(0, None), group=GROUPS.Engineering, caption='Distance Covered by Sprint Anim', text="Distance a full sprint animation will cover when it's played by rate 1.0")
    axiomClass.AddAttribute('Float sprintAnimDuration = 1.0', range=(0, None), group=GROUPS.Engineering, caption='Sprint Anim Duration')
    axiomClass = ax2.CreateClass('DustPawn', standalone=True, forUE3=True)
    axiomClass.AddAttribute('NceCameraModeParams m_CameraFirstPersonParams', text='first person camera params', group=GROUPS.Content)
    axiomClass.AddAttribute('NceCameraModeParams m_CameraThirdPersonParams', text='third person camera params', group=GROUPS.Content)
    axiomClass.AddAttribute('CameraControlInfo mCamCtrlParam', text='parameters for camera control', group=GROUPS.Content)
    axiomClass.AddAttribute('Character_Melee_Property mCharMeleeProp', caption='Melee Properties')
    axiomClass.AddAttribute('TypeReference mMorphTag', group=GROUPS.Content, allowedClasses='Tag', caption='Tag to look up morphset from weapon effector')
    axiomClass.AddAttribute('MovementAnimationSpeedThreshold speedThresholdFor1PAnimation', group=GROUPS.Physics, caption='Speed Threshold For 1P Animation')
    axiomClass.AddAttribute('MovementAnimationSpeedThreshold speedThresholdFor3PAnimation', group=GROUPS.Physics, caption='Speed Threshold For 3P Animation')
    axiomClass.AddAttribute('RefMovementAnimationResourceData ref3PMovementAnimResourceData', group=GROUPS.Engineering, caption='Source Data of the Reference 3P movement Animation')
    axiomClass.AddAttribute('RefMovementAnimationResourceData ref3PMovementAnimResourceDataForDoodle', group=GROUPS.Engineering, caption='Source Data of the Reference 3P movement Animation In Doodle Mode')
    axiomClass.AddAttribute('Float mFreeFallVelocityThreshold = 10', group=GROUPS.Content)
    axiomClass.AddAttribute('DustAIAccuracyProperties m_AccuracyProperties', group=GROUPS.Combat, caption='AI Accuracy Properties')
    axiomClass.AddAttribute('DustVisionProperties m_VisionProperties', group=GROUPS.Combat, caption='Vision Properties')
    axiomClass.AddAttribute('DustTargettingProperties m_TargettingProperties', group=GROUPS.Combat, caption='Targeting Properties')
    axiomClass.AddAttribute('Second mBleedOutDuration = 10', group=GROUPS.Combat, range=(0, None), caption='Bleed Out Duration', text='The maximum amount of time the player can remain in the bleedout state before actual dying.')
    axiomClass.AddAttribute('Int mBleedOutHealth = 100', group=GROUPS.Combat, range=(0, None), caption='Bleed Out Health', text='Damage amount that can be taken while in the bleed out state.')
    axiomClass.AddAttribute('Int mOverkillDamage = 60', group=GROUPS.Combat, range=(0, None), caption='Overkill Damage', text='Left-over damage amount exceeds which the last hit would overkill the player.')
    axiomClass.AddAttribute('Bool takeAnimTreeLodFromMesh = True', modifyFlag=MODIFY_REMOVED, group=GROUPS.Content, caption='Whether AnimTree LOD is same as Mesh LOD')


def PopulateVIC(ax2):
    axiomClass = ax2.CreateClass('WPRewardSettingKilling', standalone=False)
    axiomClass.AddAttribute('Int wpRewardOnDestroy = 50', text='How many war points rewarded to the destroyer when this unit is killed', group=GROUPS.Logic, caption='War Point Reward On Destroy', uemodifier='const')
    axiomClass.AddAttribute('Int wpPunishOnDestroy = 30', text='How many war points punishment to the destroyer when destroyed by teammate', group=GROUPS.Logic, caption='War Point Punishment On Destroyed by Teammate', uemodifier='const')
    axiomClass.AddAttribute('Int maxKillAssists = 2', text='Only the last X people that damage me get killing assist reward', group=GROUPS.Logic, caption='Max Num Of Killing Assist')
    axiomClass.AddAttribute('Int wpKillAssistReward = 10', text='Num of war points given for single killing assist action', group=GROUPS.Logic, caption='War Point Reward For Killing Assist')
    axiomClass.AddAttribute('Int wpVehicleKillAssist = 10', text='Num of war points given to a passenger when a player in same vehicle kills me', group=GROUPS.Logic, caption='War Point Reward For Vehicle Kill Assist')
    axiomClass = ax2.CreateClass('WPRewardSettingHacking', standalone=False)
    axiomClass.AddAttribute('Int wpHackReward = 200', text='How many war points will be rewarded to the player that hacks the installation/vehicle', group=GROUPS.Logic, caption='War Point Reward For Hacking')
    axiomClass.AddAttribute('Int wpHackAssistReward = 50', text='Number war points rewarded for assisting hacking', group=GROUPS.Logic, caption='War Point Reward For Hacking Assist')
    axiomClass.AddAttribute('Int maxHackAssist = 2', text='Another X players could help hacking it together', group=GROUPS.Logic, caption='Max Hack Assist')
    axiomClass.AddAttribute('Float minHackTimeForHackAssist = 5', text='help hack for at least this time(seconds) to be considered a qualified hack assistant', group=GROUPS.Logic, caption='Min Hack Time For Hack Assist')
    axiomClass = ax2.CreateClass('WPRewardSettingDamageHeal', standalone=False)
    axiomClass.AddAttribute('Second damageHealRecordLifeTime = 20', text='The damage/heal record will be removed after X seconds if not updated', group=GROUPS.Logic, caption='Record Lifespan')
    axiomClass.AddAttribute('Int damageRewardThreshold = 50', text="If someone's damage on me accumulated X, he'll get some reward.", group=GROUPS.Logic, caption='Amount of Accumulated Damage To Deliver Reward.')
    axiomClass.AddAttribute('Int wpDamageReward = 10', text='The num of war points rewarded for accumulated damage on me', group=GROUPS.Logic, caption='War Point Reward For Accumulated Damage')
    axiomClass.AddAttribute('Int healRewardThreshold = 50', text="If someone heals me for this amount of points, he'll get some reward", group=GROUPS.Logic, caption='Amount Of Accumulated Heal To Deliver Reward')
    axiomClass.AddAttribute('Int wpHealReward = 5', text='The num of war points rewarded for accumulated healing points.', group=GROUPS.Logic, caption='War Point Reward For Accumulated Healing Points')
    axiomClass = ax2.CreateClass('WPRewardSettingRevival', standalone=False)
    axiomClass.AddAttribute('Second minRewardInterval = 15', group=GROUPS.Logic, caption='Min Reward Interval', text='At least X seconds after a revival will the next revival instigator be rewarded.')
    axiomClass.AddAttribute('Int wpReward = 20', group=GROUPS.Logic, caption='WP Reward', text='The number of war points that will be rewarded to the revival instigator.')
    axiomClass = ax2.CreateClass('WarPointRewardSettings', standalone=False)
    axiomClass.AddAttribute('Int deployWarPointCost', text='How many war points it costs to deploy this unit to the battlefield', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='War Point Cost', uemodifier='const')
    axiomClass.AddAttribute('WPRewardSettingKilling killingRelatedSettings', group=GROUPS.Logic, caption='WP - Killing', text='Killing Related WP Settings')
    axiomClass.AddAttribute('WPRewardSettingHacking hackingRelatedSettings', group=GROUPS.Logic, caption='WP - Hacking', text='Hacking Related WP Settings')
    axiomClass.AddAttribute('WPRewardSettingDamageHeal damageHealRelatedSettings', group=GROUPS.Logic, caption='WP - DamageHeal', text='DamageHeal Related WP Settings')
    axiomClass.AddAttribute('WPRewardSettingRevival revivalRelatedSettings', group=GROUPS.Logic, caption='WP - Revival', text='Revival Related WP Settings')
    axiomClass.AddAttribute('Float damageHealRecordLifeTime = 20', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='Max life of damage/heal record(Seconds)')
    axiomClass.AddAttribute('Int damageRewardThreshold = 50', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='Amount of Accumulated Damage To Deliver Reward.')
    axiomClass.AddAttribute('Int wpDamageReward = 10', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Reward For Accumulated Damage')
    axiomClass.AddAttribute('Int healRewardThreshold = 50', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='Amount Of Accumulated Heal To Deliver Reward')
    axiomClass.AddAttribute('Int wpHealReward = 5', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Reward For Accumulated Healing Points')
    axiomClass.AddAttribute('Int maxKillAssists = 2', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='Max Num Of Killing Assist')
    axiomClass.AddAttribute('Int wpKillAssistReward = 10', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Reward For Killing Assist')
    axiomClass.AddAttribute('Int wpVehicleKillAssist = 10', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Reward For Vehicle Kill Assist')
    axiomClass.AddAttribute('Int wpHackReward = 200', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Reward For Hacking')
    axiomClass.AddAttribute('Int wpHackAssistReward = 50', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Reward For Hacking Assist')
    axiomClass.AddAttribute('Int maxHackAssist = 2', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='Max Hack Assist')
    axiomClass.AddAttribute('Float minHackTimeForHackAssist = 5', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='Min Hack Time For Hack Assist')
    attFlag = DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL
    attFlag_Thunker = attFlag | CUSTOM_FLAGS.THUNKER_CODE
    axiomClass = ax2.CreateClass('DustVIC_Property', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Int maxShield', attributeFlag=attFlag_Thunker, group=GROUPS.Combat, caption='Max Shield', uemodifier='const')
    axiomClass.AddAttribute('Int maxArmor', attributeFlag=attFlag_Thunker, group=GROUPS.Combat, caption='Max Armor', uemodifier='const')
    axiomClass.AddAttribute('Int maxHealth', attributeFlag=attFlag_Thunker, group=GROUPS.Combat, caption='Max HP', uemodifier='const')
    axiomClass.AddAttribute('Float healShieldRate', text='Heal rate for the shield, values in per second', group=GROUPS.Combat, caption='Heal Shield Rate', uemodifier='const')
    axiomClass.AddAttribute('Float healArmorRate', text='Heal rate for the armor, values in per second', group=GROUPS.Combat, caption='Heal Armor Rate', uemodifier='const')
    axiomClass.AddAttribute('Float healHealthRate', text='Heal rate for the health, values in per second', group=GROUPS.Combat, caption='Heal Health Rate', uemodifier='const')
    axiomClass.AddAttribute('Float healWarPointCostRatio', modifyFlag=MODIFY_REMOVED, text="The amount of war points that's needed to heal this unit from zero to full health", group=GROUPS.Logic, caption='War Point Cost to Heal', uemodifier='const')
    axiomClass.AddAttribute('Int deployWarPointCost', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Cost', uemodifier='const')
    axiomClass.AddAttribute('Int sight', text='Fog of war clearance range', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='FoW Sight Range', uemodifier='const')
    axiomClass.AddAttribute('Int signatureScanProfile = 10', range=(0, None), text='Fog of war signature scan profile', group=GROUPS.Logic, caption='FoW Signature Scan Profile', uemodifier='const')
    axiomClass.AddAttribute('Int signatureScanPrecision = 10', range=(-1, 100), text='Fog of war signature scan precision', group=GROUPS.Logic, caption='FoW Signature Scan Precision', uemodifier='const')
    axiomClass.AddAttribute('Meter signatureScanRadius = 10', range=(0, None), text='Fog of war signature scan distance', group=GROUPS.Logic, caption='FoW Signature Scan Distance', uemodifier='const')
    axiomClass.AddAttribute('Float signatureFadeTime = 0', range=(0, None), text='Fog of war signature fade out time', group=GROUPS.Logic, caption='FoW Signature Fade Out Time', uemodifier='const')
    axiomClass.AddAttribute('Float signatureScanVisibilityExtensionTimer = 0', range=(0, None), text='Fog of war signature visibility extentsion time', group=GROUPS.Logic, caption='FoW Signature Visibility Extension Time', uemodifier='const')
    axiomClass.AddAttribute('Float shieldDamageScale = 1', attributeFlag=attFlag_Thunker, text='The multiplier applied to damage caused to shield', group=GROUPS.Combat, caption='Shield Damage Scale', uemodifier='const')
    axiomClass.AddAttribute('Float armorDamageScale = 1', attributeFlag=attFlag_Thunker, text='The multiplier applied to damage caused to armor', group=GROUPS.Combat, caption='Armor Damage Scale', uemodifier='const')
    axiomClass.AddAttribute('Float healthDamageScale = 1', attributeFlag=attFlag_Thunker, text='The multiplier applied to damage caused to health', group=GROUPS.Combat, caption='Helath Damage Scale', uemodifier='const')
    axiomClass.AddAttribute('Int amountCpuUsage = 0', text='The amount of cpu used by modules/subsystems', group=GROUPS.Logic, caption='CPU Usage', uemodifier='const')
    axiomClass.AddAttribute('Int amountPowerUsage = 0', text='The amount of power used by modules/subsystems', group=GROUPS.Logic, caption='PG Usage', uemodifier='const')
    axiomClass.AddAttribute('Int maxCpuReserve', text='The cpu reserve to support the modules/subsystems', group=GROUPS.Logic, caption='Max CPU', uemodifier='const')
    axiomClass.AddAttribute('Int maxPowerReserve', text='The power grid reserve to support the modules/subsystems', group=GROUPS.Logic, caption='Max PG', uemodifier='const')
    axiomClass.AddAttribute('Float massScale = 1', text='The mass scale which can be multiplied with the mass value automatically calculated by the physics system', group=GROUPS.Physics, caption='Mass Scale', uemodifier='const')
    axiomClass.AddAttribute('Int wpRewardOnDestroy', text='removed', group=GROUPS.Logic, caption='War Point Reward On Destroy', modifyFlag=MODIFY_REMOVED, uemodifier='const')
    axiomClass.AddAttribute('Int wpPunishOnDestroy', text='removed', group=GROUPS.Logic, modifyFlag=MODIFY_REMOVED, caption='War Point Punishment On Destroyed by Teammate', uemodifier='const')
    axiomClass.AddAttribute('Float commanderWPCommission = 0.2', text='The percentage of WP earned by all the team members that goes to the commander', group=GROUPS.Logic, caption='Commander WP Commission', uemodifier='const')
    axiomClass.AddAttribute('Float groundSpeed', attributeFlag=attFlag_Thunker, text='The maximum ground speed', group=GROUPS.Physics, caption='Max Ground Speed', uemodifier='const')
    axiomClass.AddAttribute('Float airSpeed', attributeFlag=attFlag_Thunker, text='The maximum flying speed', group=GROUPS.Physics, caption='Max Air Speed', uemodifier='const')
    axiomClass.AddAttribute('Float rateOfFireMultiplier = 1', attributeFlag=attFlag_Thunker, text='The multiplier for the rate of fire', group=GROUPS.Combat, caption='RoF Multiplier', uemodifier='const')
    axiomClass.AddAttribute('Float reloadTimeMultiplier = 1', attributeFlag=attFlag_Thunker, text='The multiplier for the weapon reload time', group=GROUPS.Combat, caption='Reload Time Multiplier', uemodifier='const')
    axiomClass.AddAttribute('Float magazineSizeMultiplier = 1', attributeFlag=attFlag_Thunker, text='The multiplier applied to all weapons that will scale the size of magazines', group=GROUPS.Combat, caption='Ammo Capacity Multiplier', uemodifier='const')
    axiomClass.AddAttribute('Float damageMultiplier = 1', attributeFlag=attFlag_Thunker, text='The multiplier to the weapon damage', group=GROUPS.Combat, caption='Damage Multiplier', uemodifier='const')
    axiomClass.AddAttribute('WorldIcon worldIcon', text='The position adjust for 3D icon of Character, Vehicle, Installation', group=GROUPS.Content, caption='3DIcon', uemodifier='const')
    axiomClass.AddAttribute('Float continuousAttackRecordTimeInterval = 1.0', text='How long each record is (In seconds)', group=GROUPS.Logic, caption='Continuous Attack Record Time Interval', uemodifier='const')
    axiomClass.AddAttribute('Float timeToRecordContinuousAttack = 0.0', text='How long records are in all (In seconds)', group=GROUPS.Logic, caption='Time To Record Continuous Attack', uemodifier='const')
    axiomClass.AddAttribute('Float damageNotificationThreshold = 200.0', text='The amount of damage that will trigger notification', group=GROUPS.Logic, caption='Damage Notification Threshold', uemodifier='const')
    axiomClass.AddAttribute('Float shieldRechargeDelay = 0.0', range=(0, None), text='the delay of shield recharge when the vic gets damage', group=GROUPS.Combat, caption='Shield Recharge Delay', uemodifier='const')
    axiomClass.AddAttribute('Float shieldRechargePauseOnShieldDepleted = 0.0', range=(0, None), text='the delay of shield recharge when the vic shield reaches 0', group=GROUPS.Combat, caption='Shield Recharge Pause On Shield Depleted', uemodifier='const')
    axiomClass.AddAttribute('Float activeScannerEffectiveRange = 0.0', range=(0, None), text='The effective range of active scanner modules in unreal unit. If set to 0, it means no special effect will be assumed.', group=GROUPS.Combat, caption='Active Scaner Effective Range', uemodifier='const')
    axiomClass.AddAttribute('Float m_fThreatLevel = 0.0', group=GROUPS.Combat, range=(0.0, None), text='The threat level for AI target selection', caption='Threat Level', uemodifier='const')
    axiomClass.AddAttribute('Name m_aTargetSockets', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.Combat, caption='Target sockets', text='Target points for AI shooting')
    axiomClass = ax2.CreateClass('DustVIC', standalone=True)
    axiomClass.AddAttribute('DustVIC_Property mVICProp', text='The default properties streamed from CATMA', uemodifier='const', caption='VIC Properties')
    axiomClass.AddAttribute('WarPointRewardSettings mWPRewardSettings', text='Settings about War Point Rewards', caption='War Point Reward Settings')
    axiomClass.AddAttribute('CmdObjTargetProp mCmdObjTargetProp', text='Properties affecting attached commander objectives', group=GROUPS.Logic, caption='Commander Objective Target Properties')
    axiomClass.AddAttribute('Int mArmor = 0', modifyFlag=MODIFY_REMOVED, text='The armor of the VIC', group=GROUPS.Logic, caption='Armor', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL | CUSTOM_FLAGS.DIRECT_ATTRIB | CUSTOM_FLAGS.THUNKER_CODE | CUSTOM_FLAGS.SERVER_UPDATE_ONLY)


def PopulateVIC_Vehicle(ax2):
    attFlag = DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL
    attFlag_Thunker = attFlag | CUSTOM_FLAGS.THUNKER_CODE
    axiomClass = ax2.CreateClass('VehicleFlipSettings', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Bool m_bMustBeUprightToEnter = False', group=GROUPS.Logic, caption='Must Be Upright To Enter', text="If set to 'true' the vehicle cannot be entered while inverted (attempting to enter the vehicle while inverted will only cause it to be flipped back upright if 'Can Be Flipped' is also set to 'True', otherwise the vehicle will simply be un-enterable)", uemodifier='const')
    axiomClass.AddAttribute('Bool m_bEjectPassengersWhenFlipped = False', group=GROUPS.Logic, caption='Eject Passengers When Flipped', text="If set to 'true', all passengers (including the driver) will be ejected if the vehicle flips over", uemodifier='const')
    axiomClass.AddAttribute('Bool m_bCanBeFlipped = False', group=GROUPS.Logic, attributeFlag=attFlag_Thunker, caption='Can Be Flipped', text="If set to 'true' the vehicle can be flipped back upright by trying to enter it while inverted (if 'Must Be Upright To Enter' is also set to 'true'), otherwise the vehicle will simply be un-enterable", uemodifier='const')
    axiomClass.AddAttribute('Float m_fMinInvertedAngle = 80.0', group=GROUPS.Logic, range=(0.0, 180.0), attributeFlag=attFlag_Thunker, caption='Min Inverted Angle', text="Minimum angle from upright for the vehicle to consider itself 'inverted'", uemodifier='const')
    axiomClass.AddAttribute('Bool m_bMustBeOffGround = True', group=GROUPS.Logic, caption='Wheels Must Be Off Ground To Flip', text="If set to 'true' the vehicle can only be flipped back upright if none of its wheels are touching the ground", uemodifier='const')
    axiomClass.AddAttribute('Float m_fMaxFlipSpeed = 0.2', group=GROUPS.Logic, range=(0.0, None), caption='Max Speed To Flip (kph)', text='Maximum speed the vehicle can be moving at while inverted to be flipped back upright', uemodifier='const')
    axiomClass.AddAttribute('Float m_fUprightLiftStrength = 0.0', group=GROUPS.Logic, range=(0.0, None), attributeFlag=attFlag_Thunker, caption='Upright Lift Strength', text='Strength of force used to lift the vehicle to flip it', uemodifier='const')
    axiomClass.AddAttribute('Float m_fUprightTorqueStrength = 0.0', group=GROUPS.Logic, range=(0.0, None), attributeFlag=attFlag_Thunker, caption='Upright Torque Strength', text='Strength of torque applied to the vehicle to flip it', uemodifier='const')
    axiomClass.AddAttribute('Float m_fUprightTime = 0.0', group=GROUPS.Logic, range=(0.0, None), attributeFlag=attFlag_Thunker, caption='Upright Time', text='Time spent applying forces to the vehicle to flip it', uemodifier='const')
    axiomClass = ax2.CreateClass('DustVIC_Vehicle_Property', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Bool ejectPassengersWhenFlipped', text='If true, all passengers (inc. the driver) will be ejected if the vehicle flips over', group=GROUPS.Logic, caption='[MOVED] Eject passengers when flipped', uemodifier='const', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Bool mustBeUpright', text='If true, vehicle must be upright to be entered', group=GROUPS.Logic, caption='[MOVED] Must be upright', uemodifier='const', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float explosionDamageAmount', group=GROUPS.Combat, caption='Explosion Damage Amount', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float explosionDamageRadius', group=GROUPS.Combat, caption='Explosion Damage Radius', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float explosionDamageMomentum', group=GROUPS.Combat, caption='Explosion Damage Momentum', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float minRunOverSpeed', text='Speed must be greater than this for running into someone to do damage', group=GROUPS.Combat, caption='Min Ramming Speed', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float proximityShakeRadius', text='Maximum distance at which proximity shake occurs', group=GROUPS.Content, caption='Proximity Shake Radius', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float personOwnershipExpireTime = 5.0', text="How many seconds does it take before the ownership 'owned by person' expires", group=GROUPS.Logic, caption='Owned by Person Ownership Timer', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float squadOwnershipExpireTime = 10.0', text="How many seconds does it take before ownership 'owned by squad' expires", group=GROUPS.Logic, caption='Owned by Squad Ownership Expiration Timer', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float teamOwnershipExpireTime = 30.0', text="How many seconds does it take before ownership 'owned by team' expires", group=GROUPS.Logic, caption='Owned by Team Ownership Expiration Timer', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float ownershipExpireRadius', text='If all the friendly players are out of this radius, the expire timer will be started', group=GROUPS.Logic, caption='Ownership Expiration Radius', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float abandonDamageRatio', text='Percent of health to lose every abandonDamageInterval', group=GROUPS.Logic, caption='Abandon Damage Ratio', range=(0.0, 1.0), uemodifier='const')
    axiomClass.AddAttribute('Float abandonDamageInterval', text='Abandon damage interval', group=GROUPS.Logic, caption='Abandon Damage Interval', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Bool canSpawnPlayer', text='Whether this vehicle can be used as a spawn point', group=GROUPS.Logic, caption='Can Spawn Player', uemodifier='const')
    axiomClass.AddAttribute('Float customGravityScaling = 1', text='Custom gravity scaling, default to 1.0', group=GROUPS.Physics, caption='Custom Gravity Scaling', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float m_fThreatLevel = 10', group=GROUPS.Combat, caption='Threat Level', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('TypeReference simObjType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='NceVehicleSimBase', text='the type of the simulation object', group=GROUPS.Physics, caption='Simulation Object Type', uemodifier='const')
    axiomClass.AddAttribute('Bool canFlip', attributeFlag=attFlag_Thunker, text='If true, vehicle can be uprighted by player', group=GROUPS.Physics, caption='[MOVED] Can Flip', uemodifier='const', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float m_fUprightLiftStrength = 0.0', group=GROUPS.Physics, range=(0.0, None), caption='[MOVED] Upright Lift Strength', text='Strength of force used to lift the vehicle to flip it (if Can Flip is TRUE)', uemodifier='const', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float m_fUprightTorqueStrength = 0.0', group=GROUPS.Physics, range=(0.0, None), caption='[MOVED] Upright Torque Strength', text='Strength of torque applied to the vehicle to flip it (if Can Flip is TRUE)', uemodifier='const', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float m_fUprightTime = 0.0', group=GROUPS.Physics, range=(0.0, None), caption='[MOVED] Upright Time', text='Time spent applying forces to the vehicle to flip it (if Can Flip is TRUE)', uemodifier='const', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Bool turnInPlace', text='Whether vehicle can turn in place', group=GROUPS.Physics, caption='Turn In Place', uemodifier='const')
    axiomClass.AddAttribute('Float maxSpeed', attributeFlag=attFlag_Thunker, text='Absolute max physics speed', group=GROUPS.Physics, caption='Max Speed', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Vector cMassOffset', text='Offset of the center of mass', group=GROUPS.Physics, caption='Centre-Of-Mass Offset', uemodifier='const')
    axiomClass.AddAttribute('Vector inertiaTensorMultiplier', text='Inertia Tensor', group=GROUPS.Physics, caption='Inertia Tensor Multiplier', uemodifier='const')
    axiomClass.AddAttribute('Float wpTimeToJudgeAbandoned = 2.0', text='The vehicle will be thought of abandoned if all passengers leave it for this time', group=GROUPS.Logic, caption='Time To Judge Abandoned', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float wpRewardRatioForAbandoned = 0.1', text="Only part of war points for destroying the vehicle will be available if it's abandoned", group=GROUPS.Logic, caption='WP Ratio For Abandoned Vehicle', range=(0.0, 1.0), uemodifier='const')
    axiomClass.AddAttribute('Float m_fExitRadius = 5.0', attributeFlag=attFlag_Thunker, group=GROUPS.Logic, caption='Exit Radius', text='The distance from the vehicle at which exiting characters will be placed', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('Float m_fEyeHeight = 0.9', attributeFlag=attFlag_Thunker, group=GROUPS.Logic, caption='Eye Height', text='Eye Height', uemodifier='const')
    axiomClass.AddAttribute('Float m_fMomentumMult = 1.0', attributeFlag=attFlag_Thunker, group=GROUPS.Physics, caption='Momentum Multiplier', text='Momentum Multiplier', range=(0.0, None), uemodifier='const')
    axiomClass.AddAttribute('VehicleFlipSettings m_FlipSettings', group=GROUPS.Logic, caption='Flip Settings', text='Settings for determining when and how the vehicle can be flipped back onto its wheels', uemodifier='const')
    axiomClass.AddAttribute('Float m_fSlidingDamage = 0.0', group=GROUPS.Physics, caption='Sliding Damage')
    axiomClass.AddAttribute('Float m_fSlidingThreshold = 10.0', group=GROUPS.Physics, caption='Sliding Damage Speed Threshold')
    axiomClass.AddAttribute('Float m_fSlidingSpeedMin = 10.0', group=GROUPS.Physics, caption='Sliding Damage Minimum Speed (KPH)')
    axiomClass.AddAttribute('Float m_fSlidingSpeedMax = 100.0', group=GROUPS.Physics, caption='Sliding Damage Maximum Speed (KPH)')
    axiomClass.AddAttribute('Float m_fSlidingIntervalMin = 1.0', group=GROUPS.Physics, caption='Sliding Damage Minimum Interval (Seconds)')
    axiomClass.AddAttribute('Float m_fSlidingIntervalMax = 0.1', group=GROUPS.Physics, caption='Sliding Damage Maximum Interval (Seconds)')
    axiomClass = ax2.CreateClass('DustVIC_Vehicle', standalone=True)
    axiomClass.AddAttribute('DustVIC_Vehicle_Property mVehProp', uemodifier='const', caption='Vehicle Properties')
    axiomClass = ax2.CreateClass('NceVehicle', standalone=True)
    axiomClass.AddAttribute('MaterialModifier mMeshMaterialModifiers', modifyFlag=MODIFY_REMOVED, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Mesh Material Modifiers', text='Modifiers that setup the parameters for the mesh materials')
    axiomClass.AddAttribute('NceCameraModeParams m_aSeatCameraFirstPerson', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, uemodifier='private', caption='Camera modes used for the 1st-person view')
    axiomClass.AddAttribute('NceCameraModeParams m_aSeatCameraThirdPerson', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, uemodifier='private', caption='Camera modes used for the 3rd-person view')
    axiomClass.AddAttribute('NceCameraModeParams mCameraGarage', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, uemodifier='private transient', caption='Camera modes used for the fitting screen')
    axiomClass.AddAttribute('NceCameraModeParams m_CameraDeath', uemodifier='private', caption='Camera mode used for the vehicle death camera')
    axiomClass.AddAttribute('CurveReference m_FieldOfViewVsSpeedCurve', uemodifier='norep', caption='Field of View vs Speed Curve')
    axiomClass.AddAttribute('CurveReference m_SteeringCurveNce', uemodifier='norep', caption='Steering Curve')
    axiomClass.AddAttribute('String mSimObjClass', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED, group=GROUPS.Physics, caption='Sim Obj Class', text='The UE3 object class used to create the sim object')
    axiomClass.AddAttribute('String mVehicleClassName', group=GROUPS.Content, caption='Vehicle Class Name')
    axiomClass.AddAttribute('EVehicleGroup mVehicleGroup', group=GROUPS.Content, caption='Vehicle Group')
    axiomClass.AddAttribute('EVehicleSize mVehicleSize = VehicleSize_Small', group=GROUPS.Content, caption='Vehicle Size for RDV location point')
    axiomClass.AddAttribute('String mVehicleDesignationName', group=GROUPS.Content, caption='Vehicle Designation Name')
    axiomClass.AddAttribute('Float m_fInputBufferAngle = 0.0', group=GROUPS.Content, uemodifier='private', caption='Input Buffer Angle', range=(-89.9, 89.9))
    axiomClass.AddAttribute('DustWheelProperties m_aVehicleWheels', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, uemodifier='private', caption='Vehicle Wheels')
    axiomClass.AddAttribute('VehicleUprightConstraints m_UprightConstraints', group=GROUPS.Physics, uemodifier='private', caption='Upright Constraints')
    axiomClass.AddAttribute('VehiclePhysicalMaterials m_VehiclePhysicalMaterials', group=GROUPS.Physics, uemodifier='private', caption='Physical Materials')
    axiomClass.AddAttribute('Float mTimeToHack = 10.0', group=GROUPS.Logic, caption='Time To Hack', text='How long it will take to finish hacking this vehicle')
    axiomClass.AddAttribute('Float mSpeedFactorForHackAssist = 0.5', group=GROUPS.Logic, caption='Speed Factor For Hack Assist', text='Affect speed increment for hacking assist http://dustwiki/index.php/Hacking-assist')
    axiomClass.AddAttribute('Float SquealThreshold = 200.0', group=GROUPS.Content, caption='Squeal Threshold', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float SquealLatThreshold = 200.0', group=GROUPS.Content, caption='Lateral Squeal Threshold', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Int m_iLeftTreadMaterialIndex = 1', group=GROUPS.Content, caption='Tread Material Index - Left', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Int m_iRightTreadMaterialIndex = 2', group=GROUPS.Content, caption='Tread Material Index - Right', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('DustAIAccuracyProperties m_AccuracyProperties', group=GROUPS.Combat, caption='AI Accuracy Properties')


def PopulateNceVehicleAir(ax2):
    axiomClass = ax2.CreateClass('NceVehicleAir', standalone=True)
    axiomClass.AddAttribute('Float m_fHeightToOpenLandingGear = 1000.0', uemodifier='private', group=GROUPS.Content, caption='The Height at which to open the landing gear', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSpeedToOpenLandingGear = 100.0', uemodifier='private', group=GROUPS.Content, caption='The Speed at which to open the landing gear', range=(0.0, None))
    axiomClass.AddAttribute('String m_sOpenLandingGearInputName', text='The name of the input on the blend node that contains the landing gear open animation', group=GROUPS.Content, caption='Landing Gear Open Input')
    axiomClass.AddAttribute('String m_sCloseLandingGearInputName', text='The name of the input on the blend node that contains the landing gear close animation', group=GROUPS.Content, caption='Landing Gear Close Input')
    axiomClass.AddAttribute('String m_sOpenDoorsInputName', text='The name of the input on the blend node that contains the doors open animation', group=GROUPS.Content, caption='Doors Open Input')
    axiomClass.AddAttribute('String m_sCloseDoorsInputName', text='The name of the input on the blend node that contains the doors close animation', group=GROUPS.Content, caption='Doors Close Input')
    axiomClass.AddAttribute('String m_sLandingGearBlendNodeName', text='The name of the anim blend node that contains the landing gear animations', group=GROUPS.Content, caption='Landing Gear Animation Blend Node')
    axiomClass.AddAttribute('String m_sDoorsBlendNodeName', text='The name of the anim blend node that contains the doors animations', group=GROUPS.Content, caption='Doors Animation Blend Node')
    axiomClass.AddAttribute('String m_asEngineName', text='The name of the anim control that contains the engine animation', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Engine Animation')


def PopulateNceVehicleSCV(ax2):
    axiomClass = ax2.CreateClass('NceVehicleSCVSiegeModeProperties', standalone=False, forUE3=False, group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float m_fBrakeAmount = 0.5', uemodifier='private', caption='Brake Amount', text='Braking throttle to apply while slowing down', range=(0.0, 1.0))
    axiomClass.AddAttribute('Float m_fStopThreshold = 25.0', uemodifier='private', caption='Stop Threshold', text='Threshold speed to determine when the vehicle has stopped', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fDeployTime = 2.0', uemodifier='private', caption='Deploy Time', text='Time taken to deploy', range=(0.01, None))
    axiomClass.AddAttribute('ContentReference m_pDeployingEffect', uemodifier='private', caption='Deploying Effect', text='Particle effect for deploying')
    axiomClass.AddAttribute('Float m_fRetractTime = 2.0', uemodifier='private', caption='Retract Time', text='Time taken to retract', range=(0.01, None))
    axiomClass.AddAttribute('Float m_fSuspensionChange = -0.75', uemodifier='private', caption='Suspension Change', text='Suspension bias change')
    axiomClass.AddAttribute('Float m_fGripScale = 5.0', uemodifier='private', caption='Grip Scale', text='Wheel friction multiplier', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fInertiaTensorScale = 3.0', uemodifier='private', caption='Inertia Tensor Scale', text='Intertia tensor multiplier', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fMassScale = 3.0', uemodifier='private', caption='Mass Scale', text='Mass multiplier', range=(0.0, None))
    axiomClass.AddAttribute('Vector m_vCOMMod', uemodifier='private', caption='COM Mod', text='Centre-of-mass modifier')
    axiomClass.AddAttribute('Float m_fDamageMod = 2.0', uemodifier='private', caption='Damage Mod', text='Damage resistance modifier', range=(0.0, None))
    axiomClass.AddAttribute('NceCameraModeParams m_CameraMode', uemodifier='private', caption='Camera Mode', text='Camera mode')
    axiomClass = ax2.CreateClass('NceVehicleSCVSiegeMode', standalone=True)
    axiomClass.AddAttribute('NceVehicleSCVSiegeModeProperties m_SiegeModeProperties', uemodifier='private transient', caption='SCV Siege Mode Properties')


def PopulateVIC_Character(ax2):
    attFlag = DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL
    axiomClass = ax2.CreateClass('DustPawnMovement', standalone=False, group=GROUPS.Physics, attributeFlag=attFlag)
    axiomClass.AddAttribute('Float groundSpeedScale = 1', attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Ground Speed Scale')
    axiomClass.AddAttribute('Float strafeSpeedScale = 1', attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Strafe Speed Scale')
    axiomClass.AddAttribute('Float backwardSpeedScale = 1', attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Backward Speed Scale')
    axiomClass.AddAttribute('Float jumpSpeed', caption='Vertical Jump Speed', text='The vertical speed the character starts at when he jumps', attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float maxLength = -1', caption='Max Length', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float collisionHeight', caption='Collision Height')
    axiomClass.AddAttribute('Float collisionRadius', caption='Collision Radius')
    axiomClass.AddAttribute('Float meshOffsetZ', caption='Mesh Offset Z')
    axiomClass.AddAttribute('Float eyeOffsetZ', caption='Eye Offset Z')
    axiomClass.AddAttribute('Float turningSpeedScale = 1', attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Turning Speed Scale')
    axiomClass.AddAttribute('Float jumpStaminaCost = 20', range=(0, None), group=GROUPS.Combat, attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Jump Stamina Cost', text='The amount of stamina one jump shot costs.')
    axiomClass.AddAttribute('Bool isEnabled = True', caption='Is Enabled')
    attFlag = DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL
    axiomClass = ax2.CreateClass('WalkingAnimationSpeedThreshold', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Meter walkSpeedThreshold = 1.5', range=(0, None), group=GROUPS.Physics, caption='Max speed to play walking animation(Meter/Sec)')
    axiomClass.AddAttribute('Meter runSpeedThreshold = 6', range=(0, None), group=GROUPS.Physics, caption='Max speed to play running animation(Meter/Sec)')
    axiomClass.AddAttribute('Meter sprintSpeedThreshold = 15', range=(0, None), group=GROUPS.Physics, caption='Max speed to play sprinting animation(Meter/Sec)')
    attFlag = DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL
    axiomClass = ax2.CreateClass('DustVIC_Character_Property', standalone=False, attributeFlag=attFlag)
    axiomClass.AddAttribute('Float jumpVelocityPenalty', group=GROUPS.Physics, caption='Jump Velocity Multiplier', uemodifier='const')
    axiomClass.AddAttribute('Float maxAccelRate', group=GROUPS.Physics, caption='Max Acceleration Rate', text='Multiplies current horizontal movement speed by this factor when the character jumps', uemodifier='const')
    axiomClass.AddAttribute('Float fallingAccelRate', group=GROUPS.Physics, caption='Falling Acceleration Rate', uemodifier='const')
    axiomClass.AddAttribute('Float aimOffsetInterpSpeed', group=GROUPS.Content, caption='Aim Offset InterpSpeed', uemodifier='const')
    axiomClass.AddAttribute('Float viewRotationInterpSpeedYaw', group=GROUPS.Content, caption='View Rotation InterpSpeed Yaw', uemodifier='const')
    axiomClass.AddAttribute('Float viewRotationInterpSpeedPitch', group=GROUPS.Content, caption='View Rotation InterpSpeed Pitch', uemodifier='const')
    axiomClass.AddAttribute('Float timeToSwitchToRelaxedPose = 2.0', group=GROUPS.Content, caption='Time to switch to relaxed pose', uemodifier='const')
    axiomClass.AddAttribute('Bool playHitReactionAnimation = True', group=GROUPS.Physics, caption='Play Hit Reaction Animation', text='Whether to play hit reaction animation or physical hit reaction', uemodifier='const')
    axiomClass.AddAttribute('DustPawnMovement movementRun', uemodifier='const')
    axiomClass.AddAttribute('DustPawnMovement movementSprint', uemodifier='const')
    axiomClass.AddAttribute('DustPawnMovement movementCrouch', uemodifier='const')
    axiomClass.AddAttribute('DustPawnMovement movementFreeWalk', uemodifier='const')
    axiomClass.AddAttribute('DustPawnMovement movementInTurret', uemodifier='const')
    axiomClass.AddAttribute('TypeReference inertiaCancellerContent', allowedClasses='DustInertiaCancellerContent', group=GROUPS.Content, caption='Inertia Canceller Content ID', text='The type id used to spawn Inertia Canceller', uemodifier='const')
    axiomClass.AddAttribute('Name firstPersonRootSocket', group=GROUPS.Content, caption='1P Root Socket', uemodifier='const')
    axiomClass.AddAttribute('Name thirdPersonRootSocket', group=GROUPS.Content, caption='3P Root Socket', uemodifier='const')
    axiomClass.AddAttribute('Float positionMotorDriveSpring = 50', group=GROUPS.Physics, caption='Joint Spring of position motor drive when dying', uemodifier='const')
    axiomClass.AddAttribute('Float positionMotorDriveDamping = 20', group=GROUPS.Physics, caption='Joint Damping of position motor drive when dying', uemodifier='const')
    axiomClass.AddAttribute('Float velocityMotorDriveForceLimit = 0.02', group=GROUPS.Physics, caption='Force Limit of velocity motor drive when in ragdoll', uemodifier='const')
    axiomClass.AddAttribute('WalkingAnimationSpeedThreshold speedThresholdForFirstPersonAnimation', modifyFlag=MODIFY_REMOVED, group=GROUPS.Physics, caption='Speed Threshold For 1P Animation', uemodifier='const')
    axiomClass.AddAttribute('WalkingAnimationSpeedThreshold speedThresholdForThirdPersonAnimation', modifyFlag=MODIFY_REMOVED, group=GROUPS.Physics, caption='Speed Threshold For 3P Animation', uemodifier='const')
    axiomClass.AddAttribute('Float sprintStaminaCostPerSecond = 30', attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, range=(0, None), group=GROUPS.Combat, caption='Sprint Stamina Cost Per Second', text='The amount of stamina sprint costs per second.', uemodifier='const')
    axiomClass.AddAttribute('Float staminaRecoveryPerSecond = 10', attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, range=(0, None), group=GROUPS.Combat, caption='Stamina Recover Per Second', text='The amount of stamina recovers per second in non-sprinting state.', uemodifier='const')
    axiomClass.AddAttribute('Float maxStamina = 100', group=GROUPS.Combat, range=(0, None), attributeFlag=attFlag | ATTRIB_FLAGS.MODULIZED, caption='Max Stamina', text='The maximum value of stamina.', uemodifier='const')
    axiomClass = ax2.CreateClass('DustVIC_Character', standalone=True)
    axiomClass.AddAttribute('DustVIC_Character_Property mCharProp', uemodifier='const', caption='Character Properties')


def PopulateVIC_Installation(ax2):
    axiomClass = ax2.CreateClass('DustVIC_Installation_Property', modifyFlag=MODIFY_REMOVED, standalone=False, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Int cpuRequirement', modifyFlag=MODIFY_REMOVED, text='The CPU requirement of this installation', group=GROUPS.Logic, caption='[MOVED] CPU Requirement', uemodifier='const')
    axiomClass.AddAttribute('Int pgRequirement', modifyFlag=MODIFY_REMOVED, text='The PG requirement of this installation', group=GROUPS.Logic, caption='[MOVED] PG Requirement', uemodifier='const')
    axiomClass.AddAttribute('Float criticalThreshold', text='Percentage of the health point below which this installation is considered critical', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Critical Threshold', uemodifier='const')
    axiomClass.AddAttribute('Meter playerSpawnInnerRadius = 5', text='Inner radius of the spawn area around the installation', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Player Spawn Radius(Meters) (Inner)', uemodifier='const')
    axiomClass.AddAttribute('Meter playerSpawnOuterRadius = 6', text='Outer radius of the spawn area around the installation', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Player Spawn Radius(Meters) (Outer)', uemodifier='const')
    axiomClass.AddAttribute('Float distancePlayerSpawnAreaToSupplyDepot = 2000', text='Distance From Player Spawn Area To SupplyDepot', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Distance From Player Spawn Area To SupplyDepot', uemodifier='const')
    axiomClass.AddAttribute('Bool invisibleDuringDeployment', text='Whether the installation should be invisible during deployment', modifyFlag=MODIFY_REMOVED, group=GROUPS.Content, caption='[DEPRECATED] Invisible During Deployment', uemodifier='const')
    axiomClass.AddAttribute('Bool hideWhenDying', text='Whether the installation should be hidden when in dying state', modifyFlag=MODIFY_REMOVED, group=GROUPS.Content, caption='[DEPRECATED] Hide When Dying', uemodifier='const')
    axiomClass.AddAttribute('Bool friendlyFire', modifyFlag=MODIFY_REMOVED, text='Whether the installation should attack units on the same team', group=GROUPS.Combat, caption='[MOVED] Friendly Fire', uemodifier='const')
    axiomClass.AddAttribute('TypeReference explosionType = -1', modifyFlag=MODIFY_REMOVED, allowedClasses='ExplosionContent', text='The type id used to spawn installation component explosion', group=GROUPS.Content, caption='[MOVED] Explosion Type ID', uemodifier='const')
    axiomClass.AddAttribute('Float activationDelay', modifyFlag=MODIFY_REMOVED, text='The time after ths installation hits the ground before it starts activation', group=GROUPS.Logic, caption='[MOVED] Activation Delay', uemodifier='const')
    axiomClass.AddAttribute('Float influenceRadius', modifyFlag=MODIFY_REMOVED, text='The radius of the influence this installation has on AI pathfinding', group=GROUPS.Logic, caption='[MOVED] Influence Radius', uemodifier='const')
    axiomClass.AddAttribute('Float baseDeployDamage = 200', modifyFlag=MODIFY_REMOVED, text='The base damage caused by Installation when deployed on the ground', group=GROUPS.Combat, caption='[MOVED] Base Deploy Damage', uemodifier='const')
    axiomClass.AddAttribute('Float deployDamageRadius = 1000', modifyFlag=MODIFY_REMOVED, text='The radius of deploy damage', group=GROUPS.Combat, caption='[MOVED] Deploy Damage Radius', uemodifier='const')
    axiomClass.AddAttribute('NceCameraModeParams m_CameraMode', modifyFlag=MODIFY_REMOVED, uemodifier='private const', caption='[MOVED] Camera Mode', text='Camera mode')
    axiomClass.AddAttribute('Bool isHackable = True', modifyFlag=MODIFY_REMOVED, text="This installation can be hacked, or entered if it's an enemy turret", group=GROUPS.Logic, caption='[MOVED] Is Hackable', uemodifier='const')
    axiomClass.AddAttribute('Bool destroyOnHacked = False', modifyFlag=MODIFY_REMOVED, text='The installation will self-explode on hacked instead of switching team', group=GROUPS.Logic, caption='[MOVED] Self-explode on Hacked', uemodifier='const')
    axiomClass.AddAttribute('Bool isDestructible = True', modifyFlag=MODIFY_REMOVED, text='This installation is destructible or not', group=GROUPS.Logic, caption='[MOVED] Is Destructible', uemodifier='const')
    axiomClass = ax2.CreateClass('DustVIC_Installation', standalone=True, modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('DustVIC_Installation_Property mInstProp', modifyFlag=MODIFY_REMOVED, uemodifier='const', caption='[MOVED] Installation Properties')


def PopulateInstallationComponent(ax2):
    axiomClass = ax2.CreateClass('InstallationInteractionProperties', standalone=False)
    axiomClass.AddAttribute('Float interactionAngleTestMaxAngleAtLongestDistance = 30.0', group=GROUPS.Logic, caption='Interaction AngleTest MaxAngleAtLongestDistance', text='Max angle at longest distance between player view direction vector and player to interactive actor vector. >90: ignore test')
    axiomClass.AddAttribute('Bool isHackable = False', text='Determines if this installation can be interacted with by enemies', group=GROUPS.Logic, caption='Installation can be hacked')
    axiomClass.AddAttribute('Float timeToHack = 6.0', text='How long time if the player hold the button, I am captured', group=GROUPS.Logic, caption='Time to Hack')
    axiomClass.AddAttribute('Float timeToCounterHack = 20.0', text='How long it will take for the player to hack me back when i am in disputed state', group=GROUPS.Logic, caption='Time to Counter Hack')
    axiomClass.AddAttribute('Float hackCompletionDelay', text='How long time will it take to switch team when hacked', group=GROUPS.Logic, caption='Hack Completion Delay')
    axiomClass.AddAttribute('Float speedFactorForHackAssist = 0.5', text='Affect speed increment for hacking assist http://dustwiki/index.php/Hacking-assist', group=GROUPS.Logic, caption='Speed Factor For Hack Assist')
    axiomClass.AddAttribute('Bool destroyOnHacked = False', group=GROUPS.Logic, caption='Self-explode on Hacked', uemodifier='const', text='The installation will self-explode on hacked instead of switching team')
    axiomClass = ax2.CreateClass('DustInstallation', standalone=True)
    axiomClass.AddAttribute('InstallationInteractionProperties mInteractionProps', group=GROUPS.Logic, caption='Interaction Properties')
    axiomClass.AddAttribute('Bool mIsDestructible = True', text='This installation is destructible or not', group=GROUPS.Logic, caption='Is Destructible', uemodifier='const')
    axiomClass.AddAttribute('Float mActivationDelay', text='Time after the installation hits the ground before it starts activation', group=GROUPS.Logic, caption='Activation Delay', uemodifier='const')
    axiomClass.AddAttribute('Float mInfluenceRadius', text='The radius of the influence this installation has on AI pathfinding', group=GROUPS.Logic, caption='Influence Radius', uemodifier='const')
    axiomClass.AddAttribute('Int mCpuRequirement', text='The CPU requirement of this installation', group=GROUPS.Logic, caption='CPU Requirement', uemodifier='const')
    axiomClass.AddAttribute('Int mPgRequirement', text='The PG requirement of this installation', group=GROUPS.Logic, caption='PG Requirement', uemodifier='const')
    axiomClass.AddAttribute('Float mBaseDeployDamage = 200', text='Damage caused by the installation as it hits the ground', group=GROUPS.Combat, caption='Base Deploy Damage', uemodifier='const')
    axiomClass.AddAttribute('Float mDeployDamageRadius = 1000', text='Radius around the installation affected by deployment damage', group=GROUPS.Combat, caption='Deploy Damage Radius', uemodifier='const')
    axiomClass.AddAttribute('Bool mAllowFriendlyFire', text='Whether the installation should attack units on the same team', group=GROUPS.Combat, caption='Allow Friendly Fire', uemodifier='const')
    axiomClass.AddAttribute('EInstallationGroup mInstallationGroup', text='Installation Group', group=GROUPS.Content, caption='Installation Group')
    axiomClass = ax2.CreateClass('SignalAmplifierProperty', standalone=False)
    axiomClass.AddAttribute('Float coverRatio = 1', text='The percentage increase in functional radius when signal amplifier is active [This should not be changed!]', group=GROUPS.Logic, caption='Functional Radius')
    axiomClass.AddAttribute('Float sensorRatio = 1.5', text='The percentage increase in signal radius when signal amplifier is active', group=GROUPS.Logic, caption='Signal Radius')
    axiomClass.AddAttribute('Float mccSensorRatio = 1.5', text='The enemy mcc sensor radius when signal amplifier is active', group=GROUPS.Logic, caption='MCC Sensor Radius')
    axiomClass = ax2.CreateClass('DustSignalAmplifier', standalone=True)
    axiomClass.AddAttribute('SignalAmplifierProperty mAmplifierProp', uemodifier='repnotify', caption='Amplifier Properties')
    axiomClass = ax2.CreateClass('ECCMProperty', standalone=False)
    axiomClass.AddAttribute('Int padding', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED)
    axiomClass = ax2.CreateClass('DustECCM', standalone=True)
    axiomClass.AddAttribute('ECCMProperty mECCMProp', uemodifier='repnotify', caption='ECCM Properties')
    axiomClass = ax2.CreateClass('ShieldGeneratorProperty', standalone=False)
    axiomClass.AddAttribute('Int padding', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED)
    axiomClass = ax2.CreateClass('DustShieldGenerator', standalone=True)
    axiomClass.AddAttribute('ShieldGeneratorProperty mShieldGeneratorProp', uemodifier='repnotify', caption='Shield Generator Properties')
    axiomClass = ax2.CreateClass('SphereGeneratorProperty', standalone=False)
    axiomClass.AddAttribute('Int padding', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED)
    axiomClass = ax2.CreateClass('DustSphereGenerator', standalone=True)
    axiomClass.AddAttribute('SphereGeneratorProperty mSphereGeneratorProp', uemodifier='repnotify', caption='Sphere Generator Properties')
    axiomClass = ax2.CreateClass('SupplyDepotProperty', standalone=False)
    axiomClass.AddAttribute('TypeReference mHealingActorType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustHealingActor', text='The healing actor for this supply depot', group=GROUPS.Logic, caption='Healing Properties')
    axiomClass.AddAttribute('Float mEffectiveVehicleRepairingRadius = 1600.0', text='ally vehicles will get repaired within this radius', group=GROUPS.Logic, caption='Effective Vehicle Repairing Radius')
    axiomClass.AddAttribute('Percent mAmmoReplenishRate = 10', range=(0, 100), text='Ammo replenishment rate in percentage every cycle', group=GROUPS.Logic, caption='Ammo replenish rate(%) in each cycle')
    axiomClass.AddAttribute('Float mAmmoReplenishInterval = 1.0', text='Ammo replenishment interval in second', group=GROUPS.Logic, caption='Ammo replenishment interval')
    axiomClass = ax2.CreateClass('DustSupplyDepot', standalone=True)
    axiomClass.AddAttribute('SupplyDepotProperty mSupplyDepotProp', caption='Supply Depot Properties')
    axiomClass = ax2.CreateClass('CapacitorProperty', modifyFlag=MODIFY_REMOVED, standalone=False, forUE3=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float coveredRatio', modifyFlag=MODIFY_REMOVED, text='Functional radius of capacitor', group=GROUPS.Logic, caption='Functional Radius')
    axiomClass.AddAttribute('Float sensorRatio', modifyFlag=MODIFY_REMOVED, text='Ground Detection Radius', group=GROUPS.Logic, caption='Ground Detection Radius')
    axiomClass.AddAttribute('Float mccSensorRadius', modifyFlag=MODIFY_REMOVED, text='Air Detection Radius', group=GROUPS.Logic, caption='Air Detection Radius')
    axiomClass.AddAttribute('Float targetRefreshInterval', modifyFlag=MODIFY_REMOVED, text='Target update frequency of capacitor', group=GROUPS.Combat, caption='Target Refresh Interval')
    axiomClass = ax2.CreateClass('DustCapacitor', modifyFlag=MODIFY_REMOVED, standalone=True, forUE3=False)
    axiomClass.AddAttribute('CapacitorProperty mCapacitorProp', modifyFlag=MODIFY_REMOVED, uemodifier='repnotify', caption='Capacitor Properties')
    axiomClass = ax2.CreateClass('CommandNodeProperty', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Meter deploymentZoneRadius', text='Functional radius in which components are powered. Multiple deployment zones may not overlap', group=GROUPS.Logic, caption='Deployment Zone Radius')
    axiomClass = ax2.CreateClass('DustCommandNode', standalone=True)
    axiomClass.AddAttribute('CommandNodeProperty mCommandNodeProp', uemodifier='repnotify', caption='Command Node Properties')
    axiomClass = ax2.CreateClass('DustCloneReserveUnit', standalone=True)
    axiomClass.AddAttribute('Int mCloneReservePoolSize = 100', text='The max num of Clone Reserve in the clone reserve pool', group=GROUPS.Logic, caption='Clone Reserve Pool Size')
    axiomClass.AddAttribute('Meter mEffectiveRadius = 30.0', text='Consume CRU clone reserve only if allies spawn within the radius', group=GROUPS.Logic, caption='Effective Radius(Meters)')
    axiomClass.AddAttribute('Float mWarmUpTimeToStartReplenish = 30', text='Being inactive for the time(seconds), the clone reserve will start to replenish', group=GROUPS.Logic, caption='Warm Up Time(seconds) To Start Replenish')
    axiomClass.AddAttribute('Float mReplenishRate = 0.1', text='Every second the clone reserve pool will replenish with the rate', group=GROUPS.Logic, caption='Replenish Rate (per second)')
    axiomClass = ax2.CreateClass('EDustAOAZone', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('DAOA_Inner', description='Inner Zone')
    axiomClass.AddElement('DAOA_Middle', description='Middle Zone')
    axiomClass.AddElement('DAOA_Outer', description='Outer Zone')
    axiomClass.AddElement('DAOA_Any', description='Any Zone')
    axiomClass = ax2.CreateClass('NPCSpawnGroup', standalone=False)
    axiomClass.AddAttribute('TypeReference m_NPCType', caption='NPC to spawn.', text="The NPC's type to spawn.", allowedClasses='NPCDefinition')
    axiomClass.AddAttribute('Int m_iNumberToSpawn = 1', range=(-1, None), caption='Number of NPCs to spawn', text='The number of NPCs to spawn of this type.')
    axiomClass.AddAttribute('Int m_iDronesActiveAtOnce = 1', range=(1, None), text='The number of drones of this type that can be active at once.', caption='Drones of type active at once.')
    axiomClass.AddAttribute('EDustAOAZone m_eDroneAOAZone = DAOA_Any', caption='Drone AOA Zone', text='Patrol area for drone')
    axiomClass = ax2.CreateClass('NPCSpawnRate', standalone=False)
    axiomClass.AddAttribute('Int m_iNumberToSpawn = 1', range=(1, None), caption='Number of NPCs to spawn', text='The number of NPCs to spawn in this time interval.')
    axiomClass.AddAttribute('Float m_fTimeToSpawn = 1.0', range=(1.0, None), caption='Time between spawning AI', text='The time interval to spawn m_iNumberToSpawn in.')
    axiomClass = ax2.CreateClass('EDroneHiveSpawnPrecedence', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('DHSP_OneAtATine', description='Spawn one drone from each group.')
    axiomClass.AddElement('DHSP_AllAtOnce', description='Spawn all the possible drones from one group before moving onto the next.')
    axiomClass.AddElement('DHSP_Random', description='Spawn drones from groups randomly.')
    axiomClass = ax2.CreateClass('DroneHiveProperty', standalone=False)
    axiomClass.AddAttribute('Meter m_fAoAInnerRadius = 25.0', range=(0, None), text='The radius of the inner Area of Activity for this hive in meters.', group=GROUPS.Logic, caption='Inner Area of Activity Radius')
    axiomClass.AddAttribute('Meter m_fAoAMiddleRadius = 50.0', range=(0, None), text='The radius of the middle Area of Activity for this hive in meters.', group=GROUPS.Logic, caption='Middle Area of Activity Radius')
    axiomClass.AddAttribute('Meter m_fAoAOuterRadius = 75.0', range=(0, None), text='The radius of the outer Area of Activity for this hive in meters.', group=GROUPS.Logic, caption='Outer Area of Activity Radius')
    axiomClass.AddAttribute('Bool m_bDestoryAfterSpawningAllDrones = False', text='Sets the drone hive to explode once it has spawned all of its drones.', group=GROUPS.Logic, caption='Explode once all drones spawned.')
    axiomClass.AddAttribute('Bool m_bKillSpawnedDronesWhenDestroyed = False', text='Causes all drones spawned by this hive to explode when the hive is killed', group=GROUPS.Logic, caption='Kill spawned drones when destroyed')
    axiomClass.AddAttribute('NPCSpawnRate m_DroneHiveSpawnRate', caption='Rate to spawn Drones At', text='Stores a number of drones and the time taken to spawn them.')
    axiomClass.AddAttribute('EDroneHiveSpawnPrecedence m_eSpawnPrecedence = DHSP_OneAtATine', caption='How to spawn drones from groups on the hive.', text='The spawn precedence for this hive.')
    axiomClass.AddAttribute('NPCSpawnGroup m_aNPCTypesToSpawn', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Groups of NPCs to Spawn', text='Stores a list of the NPC types to spawn and the number of each type.')
    axiomClass = ax2.CreateClass('DustDroneHive', standalone=True)
    axiomClass.AddAttribute('DroneHiveProperty mDroneHiveProp', uemodifier='repnotify', caption='Drone Hive Properties')


def PopulateWeapon(ax2):
    axiomClass = ax2.CreateClass('SnapAimInfo', standalone=False)
    axiomClass.AddAttribute('Float maxDistance = 10000', caption='the max distance beyond which the auto-aim will not take effect')
    axiomClass.AddAttribute('Bool enabled = False', caption='whether auto-aim is enabled for this fire mode')
    axiomClass.AddAttribute('Bool autoAimPlayers = True', caption='whether auto-aim is enabled for enemy players this fire mode')
    axiomClass.AddAttribute('Bool autoAimVehicles = True', caption='whether auto-aim is enabled for enemy vehicles this fire mode')
    axiomClass.AddAttribute('Bool autoAimTurrets = True', caption='whether auto-aim is enabled for enemy turrets this fire mode')
    axiomClass.AddAttribute('Float angularDistAtOrigin = 5', caption='angular distance(in degrees) between target and aim point, at 0')
    axiomClass.AddAttribute('Float angularDistAtMaxRange = 3', caption='angular distance(in degrees) between target and aim point, max range')
    axiomClass.AddAttribute('Float camRotationSpeed = 20', caption='the camera rotation speed when auto-aiming, in degree per sec')
    axiomClass.AddAttribute('Float cooldownTime = 1', caption='the cooldown time for snap-aim in seconds')
    axiomClass = ax2.CreateClass('EDustWeaponChargeStartType', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('DWCST_OnTriggerPull', description='On Trigger Pull')
    axiomClass.AddElement('DWCST_Automatic', description='Automatic')
    axiomClass = ax2.CreateClass('DustWeaponChargeInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('EDustWeaponChargeStartType m_eChargeStartType = DWCST_OnTriggerPull', caption='Charge Start Type', text='Whether the weapon starts charging when the trigger is pulled, or immediately after the previous shot is fired')
    axiomClass.AddAttribute('Bool m_bChargeOncePerTriggerPress = False', caption='Charge Once Per Trigger Press', text='Whether the weapon charges for every shot, or only for the first shot of each trigger press')
    axiomClass.AddAttribute('Float m_fChargeUpTime = 1.0', range=(0.01, None), caption='Charge Up Time', attributeFlag=attFlag_Modulized, text='How long the weapon takes to reach full charge')
    axiomClass.AddAttribute('CurveReference m_ChargeUpCurve', group=GROUPS.Combat, caption='Charge Up Curve', text="Curve which defines the weapon's charge-up behaviour")
    axiomClass.AddAttribute('Float m_fMinChargeToFire = 0.0', range=(0.0, 1.0), caption='Minimum Charge To Fire', text='What percentage of full charge the weapon must reach before it can fire')
    axiomClass.AddAttribute('Bool m_bFireOnMinCharge = False', caption='Fire On Minimum Charge', text='Whether the weapon will fire automatically when minimum charge is reached, as long as the trigger is held')
    axiomClass.AddAttribute('Float m_fMaxChargeHeldTime = -1.0', range=(-1.0, None), caption='Maximum Charge Held Time', text='How long the weapon can hold its charge at maximum. -1.0 for infinite')
    axiomClass.AddAttribute('Float m_fChargeDownTime = 0.0', range=(0.0, None), caption='Charge Down Time', text='How long the weapon takes to dissipate all charge')
    axiomClass.AddAttribute('CurveReference m_ChargeDownCurve', group=GROUPS.Combat, caption='Charge Down Curve', text="Curve which defines the weapon's charge-down behaviour. If not set, all charge is lost after each shot")
    axiomClass.AddAttribute('CurveReference m_ChargeDamageMultiplierCurve', group=GROUPS.Combat, caption='Charge Damage Multiplier Curve', text="Curve which defines the weapon's damage if fired at less than full charge. If not set, damage is just proportional to the amount of charge")
    axiomClass.AddAttribute('Float m_fChargeMoveSpeedMult = 1.0', range=(0.0, None), caption='Charging Movement Speed Multiplier', text="Multiplier applied to the player's movement speed while charging this weapon")
    axiomClass = ax2.CreateClass('DustWeaponBurstInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Int m_iBurstLength = 5', range=(1, None), caption='Burst Length', text='Number of shots which make up a burst')
    axiomClass.AddAttribute('Float m_fBurstInterval = 1.0', range=(0.0, None), caption='Burst Interval', text='Minimum time between bursts')
    axiomClass.AddAttribute('Bool m_bBurstMustComplete = True', caption='Burst Must Complete', text='Whether the weapon will keep firing to the end of the current burst when the trigger is released, or stop mid-burst')
    axiomClass = ax2.CreateClass('DustWeaponBeamInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float m_fBeamChargeTime = 0.0', range=(0.0, None), caption='Beam Charge Time', text='Time to charge beam weapon to maximum strength')
    axiomClass.AddAttribute('Float m_fMaxBeamDamage = 0.0', range=(0.0, None), caption='Maximum damage per second', text='Damage cause when laser is fully charged')
    axiomClass.AddAttribute('Float m_fMinBeamDamage = 0.0', range=(0.0, None), caption='Minimum damage per second', text='Damage cause when laser charge is empty')
    axiomClass.AddAttribute('Float m_fPulseLength = 0.0', range=(0.0, None), caption='Pulse length', text='Pulse duration. 0 for continuous beam')
    axiomClass.AddAttribute('Float m_fPulseOffLength = 0.0', range=(0.0, None), caption='Pulse off length', text='Length of time beam is off between pulses')
    axiomClass = ax2.CreateClass('DustWeaponKickInfo', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float m_fMinKickPerShot = 0.0', range=(0.0, None), caption='Min Kick Per Shot', text='Minimum amount of kick to apply with each shot (degrees)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float m_fMaxKickPerShot = 0.0', range=(0.0, None), caption='Max Kick Per Shot', text='Maximum amount of kick to apply with each shot (degrees)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float m_fAvgKickDir = 0.0', range=(-180.0, 180.0), caption='Average Kick Direction', text="Which direction the weapon usually kicks (degrees, 0.0f is 'up')")
    axiomClass.AddAttribute('Float m_fMaxKickDirVariance = 0.0', range=(0.0, 180.0), caption='Maximum Kick Direction Variance', text='How far away from the average direction the weapon will kick (degrees)')
    axiomClass.AddAttribute('Float m_fKickPerShotMult = 0.0', range=(0.0, None), caption='Kick Per Shot Multiplier', text='Per-shot accumulated multiplier on the size of the minimum and maximum kick per shot')
    axiomClass.AddAttribute('CurveReference m_KickEaseCurve', group=GROUPS.Content, caption='Kick Ease Curve', text='Curve that shows how the weapon moves to the new kick location, rather than instantly jumping there in one frame')
    axiomClass.AddAttribute('Float m_fKickEasePcnt = 0.5', range=(0.0, 1.0), caption='Kick Ease Percent', text='How long the kick is in effect, as a percentage of the delay between shots')
    axiomClass.AddAttribute('Bool m_bReturn = True', caption='Weapon Return', text='Whether the weapon automatically returns from recoil')
    axiomClass.AddAttribute('Float m_fReturnBaseSpeed = 10.0', range=(0.0, None), caption='Return Base Speed', text='Rate at which the weapon returns at time zero (degrees per second)')
    axiomClass.AddAttribute('CurveReference m_ReturnCurve', group=GROUPS.Content, caption='Return Curve', text='Curve that multiplies the rate of return across time')
    axiomClass.AddAttribute('Float m_fReturnCurveMaxTime = 1.0', range=(0.0, None), caption='Return Curve Max Time', text='How long before the weapon is returning at max speed (seconds)')
    axiomClass.AddAttribute('Float m_fRecoilForce = 0.0', range=(0.0, None), caption='Physical Recoil Force', text='Physical force applied by recoil (vehicle turrets only)')
    axiomClass.AddAttribute('Float m_fCrouchMult = 1.0', range=(0.0, None), caption='Crouched Multiplier', text='Multiplier applied to the amount of kick when crouched')
    axiomClass.AddAttribute('Float m_fRunMult = 1.0', range=(0.0, None), caption='Running Multiplier', text='Multiplier applied to the amount of kick when running')
    axiomClass = ax2.CreateClass('PoseMultipliers', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Float m_fCrouchedMultiplier = 1.0', range=(0.0, None), caption='Crouched Multiplier', text='Multiplier to apply while crouched')
    axiomClass.AddAttribute('Float m_fZoomedMultiplier = 1.0', range=(0.0, None), caption='Zoomed Multiplier', text='Multiplier to apply while zoomed')
    axiomClass.AddAttribute('Float m_fRunningMultiplier = 1.0', range=(0.0, None), caption='Running Multiplier', text='Multiplier to apply while running')
    axiomClass.AddAttribute('Float m_fSprintingMultiplier = 1.0', range=(0.0, None), caption='Sprinting Multiplier', text='Multiplier to apply while sprinting')
    axiomClass = ax2.CreateClass('DustWeaponDispersionInfo', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Bool m_bActiveNormal = true', caption='Dispersion Active (Normal)', text='Whether dispersion is active in normal (unzoomed) mode')
    axiomClass.AddAttribute('Float m_fMultiplierZoomed = 1.0', range=(0.0, None), caption='Dispersion multiplier (Zoomed)', text='Multiplier to apply on dispersion in zoomed mode. 0.0 means turn off dispersion in zoomed mode.')
    axiomClass.AddAttribute('Float m_fGrowthPerShot = 0.0', range=(0.0, None), caption='Growth Per Shot', text='Amount of dispersion growth per shot (degrees)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('PoseMultipliers m_GrowthPerShotMults', caption='Growth Per Shot Multipliers', text='Multipliers for dispersion growth per shot in different poses')
    axiomClass.AddAttribute('Float m_fMin = 0.0', range=(0.0, None), caption='Minimum', text='Minimum amount of dispersion (degrees)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('PoseMultipliers m_MinMults', caption='Minimum Multipliers', text='Multipliers for minimum dispersion in different poses')
    axiomClass.AddAttribute('Float m_fMax = 0.0', range=(0.0, None), caption='Maximum', text='Maximum amount of dispersion (degrees)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('PoseMultipliers m_MaxMults', caption='Maximum Multipliers', text='Multipliers for maximum dispersion in different poses')
    axiomClass.AddAttribute('Float m_fDecayRateAtMin = 0.0', range=(0.0, None), caption='Decay Rate At Minimum', text='Decay rate at minimum amount of dispersion (degrees per second)')
    axiomClass.AddAttribute('Float m_fDecayRateAtMax = 0.0', range=(0.0, None), caption='Decay Rate At Maximum', text='Decay rate at maximum amount of dispersion (degrees per second)')
    axiomClass.AddAttribute('PoseMultipliers m_DecayRateMults', caption='Decay Rate Multipliers', text='Multipliers for dispersion decay rate in different poses')
    axiomClass.AddAttribute('Float m_fGrowthRateBelowMin = 0.0', range=(0.0, None), caption='Growth Rate Below Minimum', text='Rate of growth of dispersion below minimum dispersion (degrees per second)')
    axiomClass.AddAttribute('Bool m_bInverse = False', caption='Inverse', text='Get dispersion to change from max to min, i.e. more and more accurate over time.')
    axiomClass = ax2.CreateClass('DustWeaponSwayMaxValues', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Float m_fFwd = 0.0', range=(0.0, None), caption='Forwards', text='Value to use when the player is moving forwards')
    axiomClass.AddAttribute('Float m_fBwd = 0.0', range=(0.0, None), caption='Backwards', text='Value to use when the player is moving backwards')
    axiomClass.AddAttribute('Float m_fLeft = 0.0', range=(0.0, None), caption='Left', text='Value to use when the player is strafing left')
    axiomClass.AddAttribute('Float m_fRight = 0.0', range=(0.0, None), caption='Right', text='Value to use when the player is strafing right')
    axiomClass = ax2.CreateClass('DustWeaponSwayValues', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Float m_fMin = 0.0', range=(0.0, None), caption='Minimum', text='Minimum value')
    axiomClass.AddAttribute('Float m_fBase = 0.0', range=(0.0, None), caption='Base', text='Base value')
    axiomClass.AddAttribute('DustWeaponSwayMaxValues m_Max', caption='Maximum', text='Maximum values')
    axiomClass = ax2.CreateClass('DustWeaponSwayPoseValues', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('DustWeaponSwayValues m_Times', caption='Sway Cycle Times', text='Lengths of scope sway (seconds)')
    axiomClass.AddAttribute('Float m_fTimeToMinTime = 0.0', range=(0.0, None), attributeFlag=attFlag_Modulized, caption='Time To Minimum Cycle Time', text='Time taken to blend from the base value to the minimum value when the player is standing still (seconds)')
    axiomClass.AddAttribute('Float m_fTimeStateBlendRate = 0.0', range=(0.0, None), caption='Cycle Time State Blend Rate', text='Rate of change for blending between different states (standing, crouching, etc)')
    axiomClass.AddAttribute('DustWeaponSwayValues m_Widths', caption='Sway Scale Widths', text='Widths (yaw) of scope sway (degrees)')
    axiomClass.AddAttribute('DustWeaponSwayValues m_Heights', caption='Sway Scale Heights', text='Heights (pitch) of scope sway (degrees)')
    axiomClass.AddAttribute('Float m_fTimeToMinScale = 0.0', attributeFlag=attFlag_Modulized, range=(0.0, None), caption='Time To Minimum Scale', text='Time taken to blend from the base value to the minimum value when the player is standing still (seconds)')
    axiomClass.AddAttribute('Float m_fScaleStateBlendRate = 0.0', range=(0.0, None), caption='Scale State Blend Rate', text='Rate of change for blending between different states (standing, crouching, etc)')
    axiomClass = ax2.CreateClass('DustWeaponSwayRangeValues', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Float m_fMin = 0.0', caption='Minimum', text='Minimum value')
    axiomClass.AddAttribute('Float m_fMax = 0.0', caption='Maximum', text='Maximum value')
    axiomClass = ax2.CreateClass('DustWeaponSwayInfo', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Bool m_bApplySway = False', caption='Apply Sway', text='Whether this weapon has scope sway applied while zoomed')
    axiomClass.AddAttribute('DustWeaponSwayPoseValues m_Standing', caption='Standing', text='Values for sway when standing')
    axiomClass.AddAttribute('DustWeaponSwayPoseValues m_Crouched', caption='Crouched', text='Values for sway when crouched')
    axiomClass.AddAttribute('DustWeaponSwayRangeValues m_ScaleShift', caption='Scale Shift', text='Range for randomly adjusting the sway scale (degrees)')
    axiomClass.AddAttribute('DustWeaponSwayRangeValues m_RotationShift', caption='Rotation Shift', text='Range for randomly adjusting the sway rotation (degrees)')
    axiomClass.AddAttribute('Float m_fDirectionChangeChance = 0.0', range=(0.0, 1.0), caption='Direction Change Chance', text='Chance that the rotation will switch directions when it loops')
    axiomClass = ax2.CreateClass('EDustWeaponFireMode', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('DWFM_SingleShot', description='Single Shot')
    axiomClass.AddElement('DWFM_SingleBurst', description='Single Burst')
    axiomClass.AddElement('DWFM_MultiBurst', description='Multi-Burst')
    axiomClass.AddElement('DWFM_FullAuto', description='Full Auto')
    axiomClass.AddElement('DWFM_ChargeToFire', description='Charge-To-Fire')
    axiomClass.AddElement('DWFM_BeamFire', description='Beam Fire')
    axiomClass = ax2.CreateClass('DustWeaponFireModeInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Bool canZoom = True', text='Whether this firemode support zooming', caption='Can Zoom')
    axiomClass.AddAttribute('Int maxAmmoCount = 100', attributeFlag=attFlag_NotNull | attFlag_Precache | attFlag_Modulized, text='The max amount of ammo can be carried by the player', caption='Max Ammo', range=(1, None))
    axiomClass.AddAttribute('Int magazineSize = 10', attributeFlag=attFlag_Modulized | CUSTOM_FLAGS.THUNKER_CODE | CUSTOM_FLAGS.SERVER_UPDATE_ONLY, text='The max amount of bullets in one magazine', caption='Max Clip Size', range=(1, None))
    axiomClass.AddAttribute('Int shotCost = 1', text='How many bullets to use for one shot', caption='Shot Cost')
    axiomClass.AddAttribute('Int shotPerRound = 1', range=(1, None), text='How many shots to use for one round shot', caption='Shot Per Round')
    axiomClass.AddAttribute('Float minReloadPercentage = 0.5', range=(0.0, 1.0), text='The min percentage of the reload sequence that needs to be finished before the whole reload operation is considered finished', caption='Min Required Reload Percentage')
    axiomClass.AddAttribute('Float zoomFOV = 50', text='The FOV in zoom mode', caption='Zoom FOV')
    axiomClass.AddAttribute('Float zoomSpeed = 10', text='The speed of zooming', caption='Zoom Speed')
    axiomClass.AddAttribute('Bool hideWeaponWhenZoom = False', text='', caption='Hide Weapon When Zoom')
    axiomClass.AddAttribute('Float reloadTime = 2', attributeFlag=attFlag_Modulized | CUSTOM_FLAGS.THUNKER_CODE, text='The length of the normal reload sequence', caption='Normal Reload Sequence Time')
    axiomClass.AddAttribute('Float reloadLoopingTime = 0', attributeFlag=attFlag_Modulized | CUSTOM_FLAGS.THUNKER_CODE, text='The length of the looping reload sequence, it is only useful when the weapon is single-reload weapon, following normal reload sequence, played multiple times', caption='Looping Reload Sequence Time')
    axiomClass.AddAttribute('Float reloadEndingTime = 0', attributeFlag=attFlag_Modulized | CUSTOM_FLAGS.THUNKER_CODE, text='The length of the ending reload sequence, following the looping reload (if there is at least one, otherwise the normal reload sequence)', caption='Ending Reload Sequence Time')
    axiomClass.AddAttribute('Bool singleReload = False', attributeFlag=attFlag_Modulized, text='Is this gun reloaded one bullet by another?', caption='Single Reload')
    axiomClass.AddAttribute('Float instantHitDamage = 20', attributeFlag=attFlag_NotNull | attFlag_Precache | attFlag_Modulized, modifyFlag=MODIFY_TYPE_CHANGED, range=(0, None), text='The damage of instant hit, if applicable', caption='Instant Hit Damage')
    axiomClass.AddAttribute('TypeReference damageType', allowedClasses='DamageType', text='The damage type of this fire mode', caption='Damage Type')
    axiomClass.AddAttribute('TypeReference projectileType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustProjectile', text='The type of the projectile in this fire mode', caption='Projectile Type')
    axiomClass.AddAttribute('Float fireInterval = 1', attributeFlag=attFlag_NotNull | attFlag_Precache | attFlag_Modulized, text='The time between 2 shots', caption='Fire Interval')
    axiomClass.AddAttribute('Bool needZoomHUD = False', text='Whether this weapon needs HUD in zoom mode', caption='Need Zoom HUD')
    axiomClass.AddAttribute('Int lowAmmoThreshold = 0', text='Below which the ammo count is considered low', caption='Low Ammo Threshold')
    axiomClass.AddAttribute('Float maxRange = 20000', attributeFlag=attFlag_Modulized, text='The max range for this fire mode, in unreal units(100 unreal unit=1 meter). note that this only works for non-projectile weapon', caption='Max Range')
    axiomClass.AddAttribute('Float effectiveRangeMultiplier = 1', text="The multiplier on top of the max range, used by the AI to calculate this weapons's effective range", caption='Effective Range Multiplier')
    axiomClass.AddAttribute('Float instantHitMomentum = 100', text='momentum transfer scaling for instant hit damage', caption='Instant Hit Momentum')
    axiomClass.AddAttribute('Float normalStopFiringTime = 0', text='length of time to stay in state WeaponStopFiring in normal mode', caption='Stop firing time in normal mode')
    axiomClass.AddAttribute('Float zoomedStopFiringTime = 0', text='length of time to stay in state WeaponStopFiring in zoom-in mode', caption='Stop firing time in zoomed mode')
    axiomClass.AddAttribute('Float weaponZoomedMoveSpeedMult = 1.0', range=(0.0, None), text='the infantry speed penalty when the weapon is Zoomed', caption='Weapon Zoomed Move Speed Mult')
    axiomClass.AddAttribute('Vector firingOffset', text='the firing location adjustment from the view location', caption='Firing offset(in unreal units)')
    axiomClass.AddAttribute('EDustWeaponFireMode m_eFireMode = DWFM_FullAuto', caption='Fire Mode', text='Whether the fire mode is single-shot (player must pull the trigger for each shot), single-burst (player must pull the trigger for each burst), multi-burst (holding down the trigger fires repeated bursts), full-auto (holding down the trigger fires continuously), or charge-to-fire (holding down the trigger charges the weapon, releasing the trigger fires the shot)')
    axiomClass.AddAttribute('DustWeaponChargeInfo m_ChargeInfo', caption='Charge Info', text="Information defining the weapon's behaviour when Fire Mode is set to 'charge-to-fire'", modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('DustWeaponBurstInfo m_BurstInfo', caption='Burst Info', text="Information defining the weapon's behaviour when Fire Mode is set to 'single burst' or 'multi-burst'", modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('DustWeaponBeamInfo m_BeamInfo', caption='Beam Info', text="Information defining the beam weapon's behaviour", modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('DustWeaponDispersionInfo m_DispersionInfo', caption='Dispersion Info', text="Information defining the weapon's dispersal behaviour", modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('DustWeaponSwayInfo m_SwayInfo', caption='Scope Sway Info', text="Information defining the weapon's sway behaviour", modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Bool BeamWeapon = False', text='Is a beam weapon', caption='Is a beam weapon', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float MinBeamDamage = 0', text='Minimum damage per second', caption='Minimum Beam Damage Per Second', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float MaxBeamDamage = 200', text='Maximum damage per second', caption='Maximum Beam Damage Per Second', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float BeamChargeTime = 10', text='Time to charge beam to maximum damage', caption='Beam Charge Time', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float yawScale = 1', modifyFlag=MODIFY_REMOVED, text='Scale applied to the yaw when the weapon rotates', caption='Yaw Scale')
    axiomClass.AddAttribute('Float pitchScale = 1', modifyFlag=MODIFY_REMOVED, text='Scale applied to the pitch when the weapon rotates', caption='Pitch Scale')
    axiomClass.AddAttribute('Float strafeRotationScale = 1', modifyFlag=MODIFY_REMOVED, text='', caption='Strafe Rotation Scale')
    axiomClass.AddAttribute('Float targetWidthScaleCamRotation = 1', modifyFlag=MODIFY_REMOVED, text='', caption='Target Width Scale affecting the camera rotation ')
    axiomClass.AddAttribute('Float targetHeightScaleCamRotation = 1', modifyFlag=MODIFY_REMOVED, text='', caption='Target Height Scale affecting the camera rotation')
    axiomClass.AddAttribute('Float maxRangeCamRotation = 5000', modifyFlag=MODIFY_REMOVED, text='', caption='the max range for the camera rotation effect')
    axiomClass.AddAttribute('Float zoomCameraRotationScale = 0.6', modifyFlag=MODIFY_REMOVED, text='Multiplier applied to the camera rotation in zoom mode', caption='Zoom Camera Rotation Scale')
    axiomClass.AddAttribute('Bool playCameraShake = True', modifyFlag=MODIFY_REMOVED, text='Whether to play camera shake when firing', caption='Play Camera Shake')
    axiomClass.AddAttribute('Bool enabled = True', modifyFlag=MODIFY_REMOVED, text='Whether this fire mode is enabled or not', caption='Fire Mode Enabled')
    axiomClass.AddAttribute('Bool singleShot = False', modifyFlag=MODIFY_REMOVED, text='Whether the player needs to pull the trigger for every shot', caption='Single shot')
    axiomClass.AddAttribute('WeaponDispersion dispersionInfo', text='The dispersion info', caption='Dispersion Info', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('WeaponDispersion zoomDispersionInfo', text='The dispersion info in zoom mode', caption='Zoom Dispersion', modifyFlag=MODIFY_REMOVED)
    axiomClass = ax2.CreateClass('DustWeapon', standalone=True)
    axiomClass.AddAttribute('DustWeaponFireModeInfo mFireMode0', text='the fire mode info', uemodifier='repnotify', caption='Weapon Fire Mode')
    axiomClass.AddAttribute('MaterialModifier mMeshMaterialModifiers', modifyFlag=MODIFY_REMOVED, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Mesh Material Modifiers', text='Modifiers that setup the parameters for the mesh materials')
    axiomClass.AddAttribute('DustWeaponKickInfo m_KickInfo', uemodifier='private{ private } repnotify', caption='Kick Info (Normal)', text='Kick information used when not zoomed')
    axiomClass.AddAttribute('DustWeaponKickInfo m_KickInfoZoomed', uemodifier='private{ private } repnotify', caption='Kick Info (Zoomed)', text='Kick information used when zoomed')
    axiomClass.AddAttribute('WeaponCrosshair mCrosshairInfo0', text='Weapon crosshair info', uemodifier='repnotify', caption='Crosshair Info')
    axiomClass.AddAttribute('Int mCrosshairType0', text='the crosshair type', group=GROUPS.Content, caption='Crosshair Type', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Int mCrosshairTypeZoomed0', text='the crosshair type in zoomed mode', group=GROUPS.Content, caption='Zoomed Crosshair Type', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('TypeReference mEffectorType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='WeaponEffector', text='the effector type for this weapon', group=GROUPS.Content, caption='Effector Type')
    axiomClass.AddAttribute('CurveReference mDamageCurve0', text='the damage fall off curve', group=GROUPS.Content, caption='Instant Hit Damage Curve')
    axiomClass.AddAttribute('WeaponAimFriction mAimFrictionInfo0', group=GROUPS.Combat, caption='Aiming Friction Info')
    axiomClass.AddAttribute('WeaponAimAdhesion mAimAdhesionInfo0', group=GROUPS.Combat, caption='Aiming Adhesion Info')
    axiomClass.AddAttribute('WeaponCameraRotationScale mCamRotationScale0', group=GROUPS.Content, caption='Camera Rotation Scale')
    axiomClass.AddAttribute('WeaponOverHeating overHeatingInfo', group=GROUPS.Combat, caption='Over Heating Info')
    axiomClass.AddAttribute('DustWeaponChargeInfo m_ChargeInfo', group=GROUPS.Combat, caption='Charge Info', text="Information defining the weapon's behaviour when Fire Mode is set to 'charge-to-fire'")
    axiomClass.AddAttribute('DustWeaponBurstInfo m_BurstInfo', group=GROUPS.Combat, caption='Burst Info', text="Information defining the weapon's behaviour when Fire Mode is set to 'single burst' or 'multi-burst'")
    axiomClass.AddAttribute('DustWeaponBeamInfo m_BeamInfo', group=GROUPS.Combat, caption='Beam Info', text="Information defining the beam weapon's behaviour")
    axiomClass.AddAttribute('DustWeaponDispersionInfo m_DispersionInfo', group=GROUPS.Combat, caption='Dispersion Info', text="Information defining the weapon's dispersal behaviour")
    axiomClass.AddAttribute('DustWeaponSwayInfo m_SwayInfo', group=GROUPS.Combat, caption='Scope Sway Info', text="Information defining the weapon's sway behaviour")
    axiomClass.AddAttribute('SnapAimInfo mSnapAimProp0', group=GROUPS.Combat, caption='Snap aim')
    axiomClass.AddAttribute('Float mDirectHitDamageScale = 1', caption='Direct Hit Damage Scale', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float mSplashDamageScale = 1', caption='Splash Damage Scale', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float mDamageRadiusScale = 1', caption='Damage Radius Scale', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)


def PopulateHandheldWeapon(ax2):
    axiomClass = ax2.CreateClass('AutoAimInfo', standalone=False)
    axiomClass.AddAttribute('Float maxDistance = 10000', caption='the max distance beyond which the auto-aim will not take effect')
    axiomClass.AddAttribute('Bool enabled = False', caption='whether auto-aim is enabled for this fire mode')
    axiomClass.AddAttribute('Bool autoAimPlayers = True', caption='whether auto-aim is enabled for enemy players this fire mode')
    axiomClass.AddAttribute('Bool autoAimVehicles = True', caption='whether auto-aim is enabled for enemy vehicles this fire mode')
    axiomClass.AddAttribute('Bool autoAimTurrets = True', caption='whether auto-aim is enabled for enemy turrets this fire mode')
    axiomClass.AddAttribute('Float angularDistAtOrigin = 5', caption='angular distance(in degrees) between target and aim point, at 0')
    axiomClass.AddAttribute('Float angularDistAtMaxRange = 3', caption='angular distance(in degrees) between target and aim point, max range')
    axiomClass.AddAttribute('Float camRotationSpeed = 20', caption='the camera rotation speed when auto-aiming, in degree per sec')
    axiomClass.AddAttribute('Float cooldownTime = 1', caption='the cooldown time for snap-aim in seconds')
    axiomClass = ax2.CreateClass('DustHandheldWeapon', standalone=True)
    axiomClass.AddAttribute('Int weaponSwitchIcon0', group=GROUPS.Content, caption='Weapon Switch Icon 0', text='Weapon switch HUD icon', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('WeaponPlacementInfo mNormalPlacement', group=GROUPS.Content, caption='placement info in normal mode')
    axiomClass.AddAttribute('WeaponPlacementInfo mZoomPlacement', group=GROUPS.Content, caption='placement info in zoom mode')
    axiomClass.AddAttribute('WeaponDOFInfo mDOFInfo0', group=GROUPS.Content, caption='Depth-Of-Field info')
    axiomClass.AddAttribute('WeaponSpring mNormalWeaponSpring', group=GROUPS.Content, caption='Weapon Spring in normal mode')
    axiomClass.AddAttribute('WeaponSpring mZoomWeaponSpring', group=GROUPS.Content, caption='Weapon Spring in zoom mode')
    axiomClass.AddAttribute('Float mCustomFOV = -1', group=GROUPS.Content, caption='custom fov')
    axiomClass.AddAttribute('ContentReference mOverlayTexture', group=GROUPS.Content, caption='Overlay Texture Asset', text='Overlay texture asset.', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('ContentReference mLockingOverlayTexture', group=GROUPS.Content, caption='Locking Overlay Texture Asset', text='Locking Overlay texture asset.', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mOverlayFadeTime = 0', group=GROUPS.Content, caption='Overlay Texture Fade Time', text='Overlay texture fade in and out time.')
    axiomClass.AddAttribute('Float mOverlayAlpha = 0.2', group=GROUPS.Content, caption='Overlay Texture Alpha', text='Overlay texture alpha tweak.')
    axiomClass.AddAttribute('LinearColor mOverlayTint', group=GROUPS.Content, caption='Overlay RGB Tint', text='Overlay texture colour tint (RGB) & glass effect scaler (A)')
    axiomClass.AddAttribute('AutoAimInfo mAutoAimProp0', modifyFlag=MODIFY_REMOVED, group=GROUPS.Combat, caption='Snap aim OLD (DO NOT USE)')
    axiomClass = ax2.CreateClass('DustHandheldAutoAimWeaponVars', standalone=True)
    axiomClass.AddAttribute('Float mFiringPattern', group=GROUPS.Logic, caption='Firing Pattern', text='Firing Pattern (Loops)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Int mMultiLaunchCount = 4', group=GROUPS.Logic, caption='Number Of Missiles In Pack', text='Number Of Missiles To Launch')
    axiomClass.AddAttribute('Float mDumbTargetRange = 10000', group=GROUPS.Logic, caption='Distance To Dumb Fly To', text='Distance To Dumb Fly To')
    axiomClass.AddAttribute('Float mDumbTargetArea = 500', group=GROUPS.Logic, caption='Radius of Dumb Fly Target', text='Radius of Dumb Fly Target', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Bool mDumbTargetLateral = True', group=GROUPS.Logic, caption='Dumb Target Axis', text='Toggle Ground or Air Dumb Target Zone')
    axiomClass.AddAttribute('Bool mClickToLockOn = False', group=GROUPS.Logic, caption='Enable Click to Lock on Mod', text='Enable Click to Lock on Mod')
    axiomClass.AddAttribute('Bool mMultiTarget = False', group=GROUPS.Logic, caption='More than one Target?', text='More than one Target?')
    axiomClass.AddAttribute('Int mEjectVerticalAngle = 5000', group=GROUPS.Logic, caption='Vertical Eject Component', text='Vertical Eject Component')
    axiomClass.AddAttribute('Int mEjectHorizontalAngle = 16384', group=GROUPS.Logic, caption='Horzontal Eject Component', text='Horzontal Eject Component')
    axiomClass.AddAttribute('Name mLaunchSockets', group=GROUPS.Logic, caption='Ordinance Offsets', text='Missile Ejection Ports', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)


def PopulateEquipment(ax2):
    axiomClass = ax2.CreateClass('DustEquipmentFireModeInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Int maxAmmoCount = 10', text='The max amount of current equipment can be carried by the player', caption='Max Equipment Count')
    axiomClass.AddAttribute('Float fireInterval = 1', text='The time between 2 throw', caption='Deploy interval')
    axiomClass.AddAttribute('Float reloadTime = 0.5', text='The length of reloading a equipment', caption='Reload Time')
    axiomClass = ax2.CreateClass('DustEquipment', standalone=True)
    axiomClass.AddAttribute('Int weaponSwitchIcon0', group=GROUPS.Content, caption='Weapon Switch Icon 0', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Int mCrosshairType0', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED, caption='Crosshair Type', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Float mCustomFOV = -1', group=GROUPS.Content, caption='FOV for arm mesh')
    axiomClass.AddAttribute('TypeReference mEffectorType = -1', group=GROUPS.Content, allowedClasses='WeaponEffector', text='the effector type for this equipment', caption='Effector Type')
    axiomClass.AddAttribute('DustEquipmentFireModeInfo mFireMode0', group=GROUPS.Combat, caption='Equipment Fire Mode')
    axiomClass.AddAttribute('WeaponPlacementInfo mNormalPlacement', group=GROUPS.Content, caption='Weapon placement info')
    axiomClass.AddAttribute('WeaponSpring mNormalWeaponSpring', group=GROUPS.Content, caption='Weapon Spring info')
    axiomClass.AddAttribute('WeaponCameraRotationScale mCamRotationScale0', group=GROUPS.Content, caption='Camera rotation speed modifier')
    axiomClass.AddAttribute('SimpleSound mHolsterSoundEffect', group=GROUPS.Content, caption='Sound effect of holstering equipment')
    axiomClass.AddAttribute('SimpleSound mSoundEffect', group=GROUPS.Content, caption='Sound effect of deploying/using equipment')
    axiomClass.AddAttribute('SurfaceHitSound mImpactSounds', group=GROUPS.Content, caption='Impact sound', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Name mEffectsSocketName', group=GROUPS.Content, caption='Socket to attach VFX')
    axiomClass.AddAttribute('Meter mEffectiveRange', group=GROUPS.Combat, range=(0, None), caption='Effective Range', text='The maximum allowed distance for the equipment to be effective.')
    axiomClass.AddAttribute('Degree mAngularEffectiveRange', group=GROUPS.Combat, range=(0, 360), caption='Effective Angle', text='The maximun allowed angle between the LOS and the holder-target, for the equipment to be effective.Valid value range is [0, 360].')
    axiomClass.AddAttribute('Second mCoolDownTime', group=GROUPS.Combat, range=(0, None), caption='Cool Down', text='The cool down time between two successful use.')
    axiomClass.AddAttribute('Int mWarPointGainWhenUsed', group=GROUPS.Combat, caption='WP Reward', text='WP rewarded to the user when used')
    axiomClass.AddAttribute('Bool mCanGainWPWhenUsedBySelf=False', group=GROUPS.Combat, caption='WP Reward On Self', text='Whether to gain WP when used on self')
    axiomClass.AddAttribute('Float mLifeSpan=10', group=GROUPS.Logic, caption='Lifespan', text='The life span of equipment, in second')
    axiomClass.AddAttribute('Bool mIsDeployable', group=GROUPS.Combat, caption='Is deployable?')
    axiomClass.AddAttribute('Bool mDestoryWhenInstigatorDied = true', group=GROUPS.Combat, caption='Should destroy it when deployer died')
    axiomClass.AddAttribute('MeterPerSecond mEquipmentThrowSpeed', group=GROUPS.Content, caption='Initial Speed to throw equipment(Meter/sec)')
    axiomClass.AddAttribute('Float mTimeToAttachNewEquipment', group=GROUPS.Content, caption='Time to attach a new equipment after thrown')
    axiomClass.AddAttribute('Float mTimeToThrowEquipment', group=GROUPS.Content, caption='Time to release equipment when firing')
    axiomClass.AddAttribute('Degree mSlopeAngleThreshold', group=GROUPS.Content, caption='The max angle of the slope to deploy equipment(Degree)')
    axiomClass.AddAttribute('TypeReference mExplosionType = -1', allowedClasses='ExplosionContent', text='The type id used to spawn explosion', group=GROUPS.Content, caption='Explosion when destroyed')
    axiomClass.AddAttribute('Int mDeployableCount = 2', modifyFlag=MODIFY_TYPE_CHANGED, group=GROUPS.Combat, caption='The maximum deployable count')
    axiomClass.AddAttribute('Float mTimeToActivate = 5', group=GROUPS.Combat, caption='Time to activate equipment after thrown')
    axiomClass.AddAttribute('Float mHealth', group=GROUPS.Combat, caption='Health of Equipment')
    axiomClass.AddAttribute('Float mWarPointGainInterval = 0', group=GROUPS.Combat, caption='Time to wait until being able to gain WP again')
    axiomClass.AddAttribute('ContentReference mActiveEffects', group=GROUPS.Content, caption='Visual Effects on equipment when activated', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass = ax2.CreateClass('ENanohiveType', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('NHT_ArmorRepair')
    axiomClass.AddElement('NHT_QuantumShells')
    axiomClass = ax2.CreateClass('DustNanoHive', standalone=True)
    axiomClass.AddAttribute('Percent mLowArmorPercentage', range=(0, 100), group=GROUPS.Combat, caption='HUD Icon visible when armor is lower than (%)')
    axiomClass.AddAttribute('Percent mLowAmmoPercentage', range=(0, 100), group=GROUPS.Combat, caption='HUD Icon visible when ammo is lower than (%)')
    axiomClass.AddAttribute('ENanohiveType mNanohiveType', group=GROUPS.Combat, caption='Type of Nanohive')
    axiomClass.AddAttribute('Percent mRepairArmorRate', range=(0, 100), group=GROUPS.Combat, caption='Armor repair rate(%) in each cycle')
    axiomClass.AddAttribute('Percent mReplenishRate', range=(0, 100), group=GROUPS.Combat, caption='Ammo replenish rate(%) in each cycle')
    axiomClass.AddAttribute('ContentReference mNaniteEffect', group=GROUPS.Content, caption='Nanite Visual Effects', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mActivateInterval=10', group=GROUPS.Combat, caption='Time for next activation')
    axiomClass = ax2.CreateClass('DustRepairTool', standalone=True)
    axiomClass.AddAttribute('Int mCharacterRepairRate = 0', range=(0, None), group=GROUPS.Combat, caption='ArmorRepairRate - Character', text='Point of armor to be repaired for a character target per second.')
    axiomClass.AddAttribute('Int mVehicleRepairRate = 0', range=(0, None), group=GROUPS.Combat, caption='ArmorRepairRate - Vehicle', text='Point of armor to be repaired for a vehicle target per second.')
    axiomClass.AddAttribute('Int mInstallationRepairRate = 0', range=(0, None), group=GROUPS.Combat, caption='ArmorRepairRate - Installation', text='Point of armor to be repaired for an installation target per second.')
    axiomClass = ax2.CreateClass('DustDropUplink', standalone=True)
    axiomClass.AddAttribute('ContentReference mSpawningEffects', group=GROUPS.Content, caption='VFX on character spawned on this equipment', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('SimpleSound mSpawnSoundEffect', group=GROUPS.Content, caption='Sound effect of spawning from an uplink')
    axiomClass.AddAttribute('Float mSpawnTimeMultiplier = 1.0', group=GROUPS.Logic, caption='Modifies the spawn timer set in the game mode')
    axiomClass.AddAttribute('Int mSpawnBudget = 10', range=(0, None), group=GROUPS.Logic, caption='The max spawning times')
    axiomClass = ax2.CreateClass('EProximityExplosive', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('ProximityExplosive_Infantry')
    axiomClass.AddElement('ProximityExplosive_Vehicle')
    axiomClass.AddElement('ProximityExplosive_Both')
    axiomClass = ax2.CreateClass('DustRemoteExplosive', standalone=True)
    axiomClass.AddAttribute('Float mDamageAmount = 200', range=(0, None), group=GROUPS.Combat, caption='Damage Amount')
    axiomClass.AddAttribute('Meter mExplosionDamageRadius = 5', range=(0, None), group=GROUPS.Combat, caption='Explosion Damage Radius')
    axiomClass.AddAttribute('Meter mWarningRadius = 5', range=(0, None), group=GROUPS.Combat, caption='Warning Radius', text='range within which the player will get warning')
    axiomClass.AddAttribute('TypeReference mSplashDamageType', allowedClasses='DamageType', group=GROUPS.Combat, text='The damage type', caption='Damage Type')
    axiomClass.AddAttribute('EProximityExplosive mProximityType', group=GROUPS.Combat, caption='Proximity Type', text='the type of the enemy that triggers the explosion')
    axiomClass.AddAttribute('TaggedSound mRemoteExplosiveSounds', group=GROUPS.Content, text='Sounds triggered by the remote explosive (NotifyStart, NotifyEnd)', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('DustNaniteInjector', standalone=True)
    axiomClass.AddAttribute('RepairSpec mRevivalRepairSpec', group=GROUPS.Combat, caption='Revival Repair Spec', text='Specifies how much shield/armor/health should be healed when an individual is revived with this nanite injector.')
    axiomClass = ax2.CreateClass('DustActiveScanner', standalone=True)
    axiomClass.AddAttribute('Meter activeScanConeRadius = 0', range=(0, None), text='Active scanner cone radius in meters', group=GROUPS.Logic, caption='Active scanner cone radius in meters')
    axiomClass.AddAttribute('Float activeScanConeWidth = 0', range=(0, None), text='Active scanner cone width in degrees', group=GROUPS.Logic, caption='Active scanner cone width in degrees')
    axiomClass.AddAttribute('Meter activeScanSphereRadius = 0', range=(0, None), text='Active scanner sphere radius in meters', group=GROUPS.Logic, caption='Active scanner sphere radius in meters')
    axiomClass.AddAttribute('Float activeScanDuration = 0.5', range=(0.5, None), text='Active scanner duration in seconds', group=GROUPS.Logic, caption='Active scanner duration in seconds')
    axiomClass.AddAttribute('Int activeScanSignaturePrecision = -1', range=(-1, 100), text='Active scanner signature scan precision', group=GROUPS.Logic, caption='Active scanner signature scan precision')
    axiomClass.AddAttribute('Int activeScanSignatureProfile = -1', range=(-1, 100), text='Active scanner signature scan profile', group=GROUPS.Logic, caption='Active scanner signature scan profile')


def PopulateProjectile(ax2):
    axiomClass = ax2.CreateClass('DustProjectileProperty', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float initSpeed', text='The initial speed of the projectile', group=GROUPS.Physics, caption='Initial Speed')
    axiomClass.AddAttribute('Float maxSpeed', text='The max speed of the projectile', group=GROUPS.Physics, caption='Max Speed')
    axiomClass.AddAttribute('Float accelRate', text='The accel rate of the projectile', group=GROUPS.Physics, caption='Acceleration Rate')
    axiomClass.AddAttribute('Float damageDecay', text='The damage decay per second', group=GROUPS.Combat, caption='Damage Decay')
    axiomClass.AddAttribute('Float minimumDamage', text='The minimum damage if the projectile can hit something', group=GROUPS.Combat, caption='Min Damage')
    axiomClass.AddAttribute('Float projectileLifeSpan', text='The life span of the projectile, in second', group=GROUPS.Logic, caption='Lifespan')
    axiomClass.AddAttribute('TypeReference explosionType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='ExplosionContent', text='The type id used to spawn explosion', group=GROUPS.Content, caption='Explosion Type ID')
    axiomClass.AddAttribute('Float splashDamage = 50', range=(0, None), group=GROUPS.Combat, modifyFlag=MODIFY_TYPE_CHANGED, text='The splash damage of this projectile', caption='Splash Damage')
    axiomClass.AddAttribute('Float directHitDamage = 50', range=(0, None), group=GROUPS.Combat, modifyFlag=MODIFY_TYPE_CHANGED, text='The damage of this projectile when it hits something directly', caption='Direct Hit Damage')
    axiomClass.AddAttribute('TypeReference damageType', allowedClasses='DamageType', group=GROUPS.Combat, text='The damage type', caption='Damage Type')
    axiomClass.AddAttribute('TypeReference splashDamageType', allowedClasses='DamageType', group=GROUPS.Combat, text='The splash damage type', caption='Splash Damage Type')
    axiomClass.AddAttribute('Float damageRadius', text='The max damage radius of the projectile', group=GROUPS.Combat, caption='Damage Radius')
    axiomClass.AddAttribute('Float gravityScale = 1', text='The scale applied on the default gravity', group=GROUPS.Physics, caption='Gravity Scale')
    axiomClass.AddAttribute('Bool explodeByTouch', text='If true, the projectile will explode when hit ground/wall', group=GROUPS.Physics, caption='Explode On Contact')
    axiomClass.AddAttribute('Bool occludedSplashDamage = True', caption='Consider occlusion for splash damage?', group=GROUPS.Combat)
    axiomClass = ax2.CreateClass('StaticMeshComponent', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference StaticMesh', caption='Mesh')
    axiomClass = ax2.CreateClass('DustProjectile', standalone=True)
    axiomClass.AddAttribute('DustProjectileProperty mProjProp', uemodifier='repnotify', caption='Projectile Properties')
    axiomClass.AddAttribute('ContentReference mProjFlightTemplate', group=GROUPS.Content, caption='Flight Effects', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mFlightEffectScale = 1', group=GROUPS.Content, caption='Flight Effect Scale', text='Flight Effect Scale')
    axiomClass.AddAttribute('Float mMeshScale = 1', group=GROUPS.Content, caption='Projectile Mesh Scale', text='Projectile Mesh Scale')
    axiomClass.AddAttribute('CurveReference mSplashDamage', text='the curve used to calculate the splash damage based on distance to the center of the explosion', group=GROUPS.Combat, caption='Splash Damage Curve')
    axiomClass.AddAttribute('TaggedSound mSounds', group=GROUPS.Content, text='sounds carried by the projectile', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Projectile Sounds')
    axiomClass.AddAttribute('StaticMeshComponent mMesh', group=GROUPS.Content, text='projectile mesh', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED, caption='Projectile Mesh')
    axiomClass.AddAttribute('MeterExportedSqured NetCullDistanceSquared = 200', group=GROUPS.Logic, range=(-1, 5000), caption='Net Cull Distance', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED, text='Projectile not relevant to client if further from viewer than this, specify -1 to disable the culling')
    axiomClass = ax2.CreateClass('DustClusterMissileVars', standalone=True)
    axiomClass.AddAttribute('Float mTrackDelay = 1', group=GROUPS.Logic, caption='Delay Before Missile Tracks', text='Delay Before Missile Tracks')
    axiomClass.AddAttribute('Bool mConstantTracking = 1', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='Should Missile Track Target', text='Should Missile Track Target')
    axiomClass.AddAttribute('Float mConstantTrackingTimer = 0.0', group=GROUPS.Logic, caption='Missile Re-Target Timer', text='Missile Re-Target Timer. <0.1 = No Re-Targetting.')
    axiomClass.AddAttribute('Float mArcHeight = 1000', group=GROUPS.Logic, caption='Missile Path Arc Height', text='Missile Path Arc Height', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float mSpread = 5000', group=GROUPS.Logic, caption='Missile Path Width', text='Missile Path Width', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Int mPathMode = 1', group=GROUPS.Logic, caption='Missile Path Mode', text='Missile Path Mode', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Int mMaxRotationRate = 1000', modifyFlag=MODIFY_RENAMED, group=GROUPS.Logic, caption='Tracking Turning Speed', oldName='mSpiralMask', text='How fast a missile turns and tracks', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float mLaunchLength = 100.0', group=GROUPS.Logic, caption='Launch Segment Lengths', text='Launch Segments Lengths', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float mDispertionAngle = 45', group=GROUPS.Logic, caption='Missile Dispertion Angle', text='Missile Dispertion Angle', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float mEjectVelocity = 0.5', group=GROUPS.Logic, caption='Missile Eject Velocity', text='Missile Eject Velocity')
    axiomClass.AddAttribute('Float mRandomModPercent = 0.50', group=GROUPS.Logic, caption='Path Randomisation', text='Path Randomisation', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float mMissileKillRange = 100', group=GROUPS.Combat, caption='Kill Range', text='Missile Kill Range')
    axiomClass.AddAttribute('Float mSpiralFactor = 100.0', modifyFlag=MODIFY_RENAMED, group=GROUPS.Logic, caption='Missile Spiral Rate', oldName='mSpiralInitialRPM', text='Missile Spiral Rate', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)


def PopulateOrbitalStrike(ax2):
    axiomClass = ax2.CreateClass('EDustPlayerRole', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('PROLE_Infantry')
    axiomClass.AddElement('PROLE_SLeader')
    axiomClass.AddElement('PROLE_Commander')
    axiomClass.AddElement('PROLE_Doodler')
    axiomClass.AddElement('PROLE_Unknown')
    axiomClass = ax2.CreateClass('DustOffMapSupportBase', standalone=True)
    axiomClass.AddAttribute('Int mWarPointCost', text='The warpoint cost of the offmap support', group=GROUPS.Content, caption='Warpoint Cost')
    axiomClass.AddAttribute('Float mWarmUpTime', text='Time for the offmap support to take effect after it is activated', group=GROUPS.Content, caption='Warmup Time')
    axiomClass.AddAttribute('Float mCooldownTime', text='Time for the next offmap support to be ready', group=GROUPS.Content, caption='Cooldown Time')
    axiomClass.AddAttribute('Float mLifeTime', text='Lifespan of DustOffMapSupportBase', group=GROUPS.Content, caption='Lifetime')
    axiomClass.AddAttribute('EDustPlayerRole mAllowedRoles', text='Roles that could use this offmap support(Infantry/Squad leader/Commander)', group=GROUPS.Content, caption='Allowed Role', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('DustOMSOrbitalStrike', standalone=True)
    axiomClass.AddAttribute('TypeReference mProjectileType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustProjectile', group=GROUPS.Content, text='The type of the projectile for orbital strike', caption='Projectile Type')
    axiomClass.AddAttribute('Float mFireInterval', text='The interval between 2 projectile firing', group=GROUPS.Content, caption='Fire Interval')
    axiomClass.AddAttribute('Float mImpactRadius', text='The radius of area to impact', group=GROUPS.Content, caption='Impact radius')
    axiomClass.AddAttribute('Float mSpawnHeight', text="The height of projectiles' spawning location", group=GROUPS.Content, caption='Spawn Height')
    axiomClass.AddAttribute('Int mTotalProjectileCount', text='The number of projectiles to be fired for each orbital strike', group=GROUPS.Content, caption='Total Projectile Count')
    axiomClass.AddAttribute('ContentReference mStrikeParticleSystem', text='The Fx to be played at the beginning of the strike', group=GROUPS.Content, caption='Strike Effects', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('ContentReference mProjectileParticleSystem', text='The Fx to be played for each projectile', group=GROUPS.Content, caption='Projectile Effects', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('TaggedSound mObitalStrikeSounds', group=GROUPS.Content, text='Obital Strike Sound', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('DustOffMapSupportWeapon', standalone=True)
    axiomClass.AddAttribute('TypeReference mOffMapSupportType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustOffMapSupportBase', text='The type of offmap support of current weapon', group=GROUPS.Content, caption='Offmap Support Type')


def PopulateGrenade(ax2):
    axiomClass = ax2.CreateClass('EOverCookBehavior', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('OCB_Explode')
    axiomClass.AddElement('OCB_Revert')
    axiomClass.AddElement('OCB_Keep')
    axiomClass = ax2.CreateClass('DustGrenadeFireModeInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Int maxAmmoCount = 10', text='The max amount of current grenade can be carried by the player', caption='Max Grenade Count')
    axiomClass.AddAttribute('Float fireInterval = 1', text='The time between 2 throw', caption='Fire Interval')
    axiomClass.AddAttribute('Vector firingOffset', text='the firing location adjustment from the view location', caption='Firing offset(in unreal units)')
    axiomClass = ax2.CreateClass('GrenadeCameraRotationScale', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float scaleNotZoomed = 1.0', text='the camera rotation scale of grenade')
    axiomClass = ax2.CreateClass('DustGrenade', standalone=True)
    axiomClass.AddAttribute('Int mCrosshairType0', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED, caption='Crosshair Type', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Float mCustomFOV = -1', group=GROUPS.Content, caption='FOV for arm mesh')
    axiomClass.AddAttribute('TypeReference mEffectorType = -1', group=GROUPS.Content, allowedClasses='WeaponEffector', text='the effector type for this grenade', caption='Effector Type')
    axiomClass.AddAttribute('WeaponPlacementInfo mNormalPlacement', group=GROUPS.Content, caption='Weapon placement info')
    axiomClass.AddAttribute('WeaponSpring mNormalWeaponSpring', group=GROUPS.Content, caption='Weapon Spring info')
    axiomClass.AddAttribute('GrenadeCameraRotationScale mCamRotationScale0', group=GROUPS.Content, caption='Camera rotation speed modifier')
    axiomClass.AddAttribute('EOverCookBehavior mBehaviorWhenOverCooked', group=GROUPS.Combat, text='The behavior of an overcooked grenade', caption='Greande Overcook Behavior')
    axiomClass.AddAttribute('DustGrenadeFireModeInfo mFireMode0', group=GROUPS.Combat, caption='Grenade Fire Mode')
    axiomClass.AddAttribute('Float mTimeFromCookToExplode=5', group=GROUPS.Combat, text='The time taken for grenade from cook finish to explode', caption='Time to explode grenade')
    axiomClass.AddAttribute('Float mGrenadeThrowAngle=15.0', group=GROUPS.Combat, range=(0, 90), text='The initial elevation angle to throw the grenade', caption='Grenade Throw Angle (Degree)')
    axiomClass.AddAttribute('Float mGrenadeSpinSpeed=10.0', group=GROUPS.Combat, range=(0, None), text='The spin speed of grenade after thrown', caption='Grenade Spin Speed')
    axiomClass.AddAttribute('Float mGrenadeTimeLaunchGrenade=0.35', group=GROUPS.Combat, range=(0, None), text='The time from grenade release to throw animation done', caption='Time to launch grenade')
    axiomClass.AddAttribute('Float mGrenadeTimeFinishThrow=0.5', group=GROUPS.Combat, range=(0, None), text='The time to finish the grenade throw action', caption='Time to finish throwing grenade')


def PopulateCollisionPhysMeterial(ax2):
    axiomClass = ax2.CreateClass('collisionPhysMeterialProperty', standalone=False, group=GROUPS.Physics)
    axiomClass.AddAttribute('Float mDamageThreshold', text="The vehicle won't take any damage unless than the damageThreshold", caption='Damage Threshold')
    axiomClass.AddAttribute('Float mStiffness', text='The stiffness of this material', caption='Stiffness')
    axiomClass.AddAttribute('Float mDamageMultiplier=1.0', text='The material may decrease or amplify the damage', caption='Material Damage Multiplier')
    axiomClass.AddAttribute('Bool ignoreCollisionCallback=False', text='Ignore Rigid Body Collision Callback or not', caption='Ignore Rigid Body Collision Callback?')
    axiomClass = ax2.CreateClass('DustCollisionPhysMeterial', standalone=True)
    axiomClass.AddAttribute('collisionPhysMeterialProperty mCollisionProp', caption='Collision Properties')


def PopulateMCC(ax2):
    axiomClass = ax2.CreateClass('MCCTurretInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('String socketName', text='Where to attach the turret', caption='Turret Socket Name')
    axiomClass.AddAttribute('TypeReference turretTypeName = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustMountableEntity', text='The type of the default turret', caption='Turret Type Name')
    axiomClass = ax2.CreateClass('SmoothSpeedTransition', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float acceleration', caption='Acceleration')
    axiomClass.AddAttribute('Float maxSpeed', caption='Max Speed')
    axiomClass.AddAttribute('Float maxSpeedOverDist', caption='Max Speed Over Distance')
    axiomClass.AddAttribute('Float currSpeed', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, uemodifier='transient', caption='Current Speed')
    axiomClass.AddAttribute('Float dist2Go', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, uemodifier='transient', caption='Distance To Go')
    axiomClass.AddAttribute('Bool canAccelerate', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, uemodifier='transient', caption='Can Accelerate')
    axiomClass.AddAttribute('Bool needDeceleration', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, uemodifier='transient', caption='Need Deceleration')
    axiomClass = ax2.CreateClass('DustMCCProperty', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float capacitorEnergyLowLevelPercentage', text="The percentage of capacitor energy at which it's energy is deemed to be low", group=GROUPS.Logic, caption='Capacitor Low Energy Threshold')
    axiomClass.AddAttribute('Float capacitorWarningMessagePercentage', text='The percentage of capacitor energy at which a warning level is generated', group=GROUPS.Logic, caption='Capacitor Warning Level Threshold')
    axiomClass.AddAttribute('Float capacitorAlarmMessagePercentage', text='The percentage of capacitor energy at which the most urgent measures are taken', group=GROUPS.Logic, caption='Capacitor Alarm Level Threshold')
    axiomClass.AddAttribute('Float capacitorExpandSpeed', text='The speed at which the capacitor expends energy', group=GROUPS.Logic, caption='Capacitor Expend Rate')
    axiomClass.AddAttribute('Float chargeShieldRate = 50', text='Charge rate for the shield, values in per second', group=GROUPS.Logic, caption='Charge Shield Rate')
    axiomClass.AddAttribute('Float chargeSuperWeaponRate = 50', text='Charge rate for the super weapon, values in per second', group=GROUPS.Logic, caption='Charge Super Weapon Rate')
    axiomClass.AddAttribute('Float maxCapacitor = 1000', text='The max volume of capacitor the MCC can hold', group=GROUPS.Logic, caption='Max Capacitor')
    axiomClass.AddAttribute('Float maxSuperWeapon = 1000', text='The max volume of super weapon energy the MCC can hold', group=GROUPS.Logic, caption='Max Super Weapon Energy')
    axiomClass.AddAttribute('Float heightOffset', text='The height of the MCC relative to the map origin in the map info', group=GROUPS.Physics, caption='Height Offset')
    axiomClass.AddAttribute('Meter playerSpawnOuterRadius = 5', text='Outer radius of the player spawn region', group=GROUPS.Logic, caption='Player Spawn Radius(Meters) (Outer)')
    axiomClass.AddAttribute('Meter playerSpawnInnerRadius = 0', text='Inner radius of the player spawn region', group=GROUPS.Logic, caption='Player Spawn Radius(Meters) (Inner)')
    axiomClass.AddAttribute('Float destinationUpdateRange', text='The distance to the next distination below which we will update the route', group=GROUPS.Physics, caption='Destination Update Range')
    axiomClass.AddAttribute('Float decelerateAngleDeltaThreshold', group=GROUPS.Physics, caption='Decelerate AngleDelta Threshold')
    axiomClass.AddAttribute('Float maxDirectionDeltaAngle', group=GROUPS.Physics, caption='Max Direction DeltaAngle')
    axiomClass.AddAttribute('Float distThreshold', group=GROUPS.Physics, caption='Distance Threshold')
    axiomClass.AddAttribute('Float zDistThreshold', group=GROUPS.Physics, caption='Z Distance Threshold')
    axiomClass.AddAttribute('Float sharpAngle', group=GROUPS.Physics, caption='Sharp Angle')
    axiomClass.AddAttribute('Float maxNaviPoint', group=GROUPS.Physics, caption='Max Number of Waypoints')
    axiomClass.AddAttribute('Float targetEvaluationPeriod', group=GROUPS.Combat, caption='Target Evaluation Period')
    axiomClass.AddAttribute('Float targetStickyTime', group=GROUPS.Combat, caption='Target Sticky Time')
    axiomClass.AddAttribute('Float dockDistThreshold', group=GROUPS.Logic, caption='Dock Distance Threshold')
    axiomClass.AddAttribute('Float shootRadius', group=GROUPS.Combat, caption='Fire Radius')
    axiomClass.AddAttribute('SmoothSpeedTransition speedTransition')
    axiomClass.AddAttribute('SmoothSpeedTransition turningTransition')
    axiomClass.AddAttribute('MCCTurretInfo turrets', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('String cameraShakeTag', group=GROUPS.Content, caption='Camera Shake Tag', text='The tag of the camera shake anim to use when MCC is close to the ground')
    axiomClass = ax2.CreateClass('DustMCCExplosionSettings', standalone=False, group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float mDeathExplosionLength = 21', group=GROUPS.Content, caption='Death Explosion Length(seconds)')
    axiomClass.AddAttribute('Float mTimeToHideInExplosion = 6', group=GROUPS.Content, caption='Time(seconds) to Hide in Explosion')
    axiomClass.AddAttribute('Float mTimeToExplosionStage', group=GROUPS.Content, caption='Time(seconds) To Explosion Stage', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float mDeathShieldEffectAppearDuration = 0.5', group=GROUPS.Content, caption='Death Shield Material Effect Appear Duration(seconds)')
    axiomClass.AddAttribute('Float mDeathShieldEffectDissaptionDuration = 3.0', group=GROUPS.Content, caption='Death Shield Material Effect Dissaption Duration(seconds)')
    axiomClass = ax2.CreateClass('DustVehMCC', standalone=True)
    axiomClass.AddAttribute('DustMCCProperty mMCCProp', uemodifier='repnotify', caption='MCC Properties')
    axiomClass.AddAttribute('CmdObjTargetProp mCmdObjTargetProp', text='the properties for commander objective target', group=GROUPS.Logic, caption='Commander Objective Target Properties', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('DustMCCExplosionSettings mExplosionSettings', group=GROUPS.Content, caption='Settings for Explosion')
    axiomClass.AddAttribute('ContentReference mDeathExplosionCamAnim', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED, caption='Death Explosion Camera Anim')


def PopulateOutpost(ax2):
    axiomClass = ax2.CreateClass('DustOutpostProperty', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float maxEnergy = 10000', text='The max energy when the outpost is fully charged', group=GROUPS.Logic, caption='Maximum Energy')
    axiomClass.AddAttribute('Float SecondsToChargeMaxEnergy = 420', text='The time(seconds) to charge full energy to MCC', group=GROUPS.Logic, caption='Time(Seconds) to Charge All Energy To MCC')
    axiomClass.AddAttribute('Int powerSurgeDamage = 800', text='The damage of a power surge', group=GROUPS.Logic, caption='Power Surge Damage')
    axiomClass.AddAttribute('Float powerSurgeDuration = 5.0', text='How much time(seconds) a power surge last', group=GROUPS.Logic, caption='Power Surge Duration(Seconds)')
    axiomClass = ax2.CreateClass('DustOutpost', standalone=True)
    axiomClass.AddAttribute('DustOutpostProperty mOutpostProp', uemodifier='repnotify', caption='Outpost Properties')


def PopulateGameType(ax2):
    axiomClass = ax2.CreateClass('VehicleFactoryConfig', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL, forUE3=False)
    axiomClass = ax2.CreateClass('RespawnTimeSettings', standalone=False)
    axiomClass.AddAttribute('Float globalRespawnTime = 20', text='The global timer for periodically respawn objects', caption='Global Respawn Time(Seconds)')
    axiomClass.AddAttribute('Float respawnTimeVehicle = 5', text='The player will respawn after the time when he confirms respawning on the vehicle', caption='Player Respawn Time(Seconds) on Vehicle(Non-positive = using global timer)')
    axiomClass.AddAttribute('Float respawnTimeSquad = 10', text='The player will respawn after the time when he confirms respawning to the squad', caption='Player Respawn Time(Seconds) on Squadmate(Non-positive = using global timer)')
    axiomClass.AddAttribute('Float respawnTimeInstallation = -1', text='The player will respawn after the time when he confirms respawning on the Installation', caption='Player Respawn Time(Seconds) on Installation(Non-positive = using global timer)')
    axiomClass.AddAttribute('Float respawnTimeMCC = -1', text='The player will respawn after the time when he confirms respawning to the MCC', caption='Player Respawn Time(Seconds) on MCC(Non-positive = using global timer)')
    axiomClass.AddAttribute('Float respawnTimeAI = 0.1', text='The player will respawn after the time when he confirms respawning on the AI spawn point', caption='Player Respawn Time(Seconds) on AI Spawn Point(Non-positive = using global timer)')
    axiomClass.AddAttribute('Float respawnTimeSpawnPointPlaceable = -1', text='The player will respawn after the time when he confirms respawning on a placeable spawn point', caption='Player Respawn Time(Seconds) on Placeable Spawn Point(Non-positive = using global timer)')
    axiomClass.AddAttribute('Float respawnTimeDropUplink = 20', text='The time it takes for a player to respawn on a Drop Uplink', caption='Player Respawn Time(Seconds) on Drop Uplink(Non-positive = using global timer)')
    axiomClass.AddAttribute('Float forceRespawnTime = 30.0', text='seconds a player has before he gets back the battle field, chess timer will start ticking when this timer runs out', caption='Allowed Respawn Idle Time(Seconds) (Non-positive = infinite time)')
    axiomClass.AddAttribute('Float respawnChessTime = 120.0', text='kick the player out the game if this runs out. in seconds, will not be reset', caption='Respawn Chess Time(Seconds) (Non-positive = never kick the player)')
    axiomClass.AddAttribute('Bool enableDefaultSpawnPoint = False', text='Group PlaceableSpawnPoints as a single Default Spawn Point', caption='Enable Default SpawnPoint')
    axiomClass = ax2.CreateClass('VoiceOver', standalone=False)
    axiomClass.AddAttribute('EDustAudioMsg attackerMatchStartID', modifyFlag=MODIFY_REMOVED, text='Audio ID for attackers when match starts', caption='Audio For Attacker When Match Starts')
    axiomClass.AddAttribute('EDustAudioMsg attackerLoseID', text='(TEMP UNUSED) Audio ID for attackers winning the match', caption='Audio For Attacker Losing Match')
    axiomClass.AddAttribute('EDustAudioMsg attackerWinID', text='(TEMP UNUSED) Audio ID for attackers losing the match', caption='Audio For Attacker Winning Match')
    axiomClass.AddAttribute('EDustAudioMsg defenderMatchStartID', modifyFlag=MODIFY_REMOVED, text='Audio ID for defenders when match starts', caption='Audio For Defender When Match Starts')
    axiomClass.AddAttribute('EDustAudioMsg defenderLoseID', text='(TEMP UNUSED) Audio ID for defenders losing the match', caption='Audio For Defender Losing Match')
    axiomClass.AddAttribute('EDustAudioMsg defenderWinID', text='(TEMP UNUSED) Audio ID for defenders winning the match', caption='Audio For Defender Winning Match')
    axiomClass.AddAttribute('EDustAudioMsg attackerStageEnterNotifications', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='Attacker Staged Enter', caption='Attacker Staged Enter Voice Over Settings')
    axiomClass.AddAttribute('EDustAudioMsg defenderStageEnterNotifications', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='Defender Staged Enter', caption='Defender Staged Enter Voice Over Settings')
    axiomClass = ax2.CreateClass('EInstallationLoseFunction', axiom.Enumerate, forUE3=True)
    axiomClass.AddElement('InstallationLoseFunction_SelfDestruction')
    axiomClass.AddElement('InstallationLoseFunction_Offline')
    axiomClass = ax2.CreateClass('DroneHiveSpawnGroup', standalone=False)
    axiomClass.AddAttribute('TypeReference m_DroneHiveType', caption='Drone Hive to spawn.', text='Drone Hive to spawn.', allowedClasses='DustDroneHive')
    axiomClass.AddAttribute('Int m_iNumberToSpawn = 1', range=(1, None), caption='Number of Drone hives to spawn', text='The number of Drone hives to spawn of this type.')
    axiomClass = ax2.CreateClass('SurvivalWave', standalone=False)
    axiomClass.AddAttribute('DroneHiveSpawnGroup m_aDroneHiveGroups', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Drone Hive Groups that make up this wave.', text='Stores a list of each drone hive group that make up this wave.')
    axiomClass = ax2.CreateClass('SurvivalGameProperty', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('Float m_fWaitBeforeFirstWave = 40.0', range=(0, None), text='How long to wait before spawning the first wave.', caption='Wait before first wave.')
    axiomClass.AddAttribute('Float m_fTimeBetweenWaves = 20.0', range=(0, None), text='How long to wait between waves.', caption='Wait between waves.')
    axiomClass.AddAttribute('SurvivalWave m_aWavesToSpawn', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Waves To Spawn', text='Stores a list of each wave setup to spawn.')
    axiomClass = ax2.CreateClass('SurvivalGameType', standalone=True)
    axiomClass.AddAttribute('SurvivalGameProperty mSurvivalGameProp', caption='Survival Game Type Properties')
    axiomClass = ax2.CreateClass('DustGameProperty', standalone=False, group=GROUPS.Logic, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('TypeReference defaultPawnCA = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVIC_Character', text='the default type id of Caldari pawn', group=GROUPS.Content)
    axiomClass.AddAttribute('TypeReference defaultPawnGA = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVIC_Character', text='the default type id of Gallente pawn', group=GROUPS.Content)
    axiomClass.AddAttribute('TypeReference defaultPawnMN = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVIC_Character', text='the default type id of Minmatar pawn', group=GROUPS.Content)
    axiomClass.AddAttribute('TypeReference defaultPawnAM = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVIC_Character', text='the default type id of Ammar pawn', group=GROUPS.Content)
    axiomClass.AddAttribute('TypeReference defaultInstallationListCA', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Installation', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Caldari installations', group=GROUPS.Content, caption='Default CA Installation List')
    axiomClass.AddAttribute('TypeReference defaultInstallationListGA', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Installation', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Gallente installations', group=GROUPS.Content, caption='Default GA Installation List')
    axiomClass.AddAttribute('TypeReference defaultInstallationListMN', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Installation', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Minmatar installations', group=GROUPS.Content, caption='Default MN Installation List')
    axiomClass.AddAttribute('TypeReference defaultInstallationListAM', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Installation', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Ammar installations', group=GROUPS.Content, caption='Default AM Installation List')
    axiomClass.AddAttribute('TypeReference defaultVehicleListCA', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Vehicle', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Caldari Vehicles', group=GROUPS.Content, caption='Default CA Vehicle List')
    axiomClass.AddAttribute('TypeReference defaultVehicleListGA', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Vehicle', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Gallente Vehicles', group=GROUPS.Content, caption='Default GA Vehicle List')
    axiomClass.AddAttribute('TypeReference defaultVehicleListMN', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Vehicle', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Minmatar Vehicles', group=GROUPS.Content, caption='Default MN Vehicle List')
    axiomClass.AddAttribute('TypeReference defaultVehicleListAM', modifyFlag=MODIFY_REMOVED, allowedClasses='DustVIC_Vehicle', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, text='the default type list of Ammar Vehicles', group=GROUPS.Content, caption='Default AM Vehicle List')
    axiomClass.AddAttribute('Float consoleRebuildDelay = 20', text='After how many seconds will a destroyed security console be rebuilt when the primary console is hacked', group=GROUPS.Content, caption='Console Rebuild Delay(Seconds)')
    axiomClass.AddAttribute('Bool checkMinPlayersOnStart = False', text='If true, game will not start until enough players have finished loading the map', caption='Check Minimun Players On Start', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Int minPlayersPerTeam', text='Minimum number of players per team required before a match can be started', caption='Min Players Per Team', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Bool teamBalance', text='Whether team balancing is enabled', caption='Team Balance')
    axiomClass.AddAttribute('Bool autoReset', text='Whether the game is auto reset after each round', caption='Auto Match Reset')
    axiomClass.AddAttribute('Float friendlyFireScale', text='Scale applied to friendly fire damage', caption='Friendly Fire Scale')
    axiomClass.AddAttribute('Float teamAbilityDifference', text="Maximum percentage difference on the team score before it's considered unbalanced", caption='Max Team Score Difference')
    axiomClass.AddAttribute('Float teamNumberDifference', text="Maximum percentage difference on the team player number before it's considered unbalanced", caption='Max Player Number Difference')
    axiomClass.AddAttribute('Int restartWait', text='How many seconds to wait before the game is restarted', caption='Time To Restart')
    axiomClass.AddAttribute('Int commanderVotingDuration', text='How many seconds in voting commander state', caption='Commander Voting Duration')
    axiomClass.AddAttribute('Int timeLimit', text='Time Limit For Attacker, skirmish only. non-positive value means time limit does not count as a win/loss condition', caption='Time Limit For Attacker')
    axiomClass.AddAttribute('Int matchTime', text='Time Limit For Whole Match, for ambush. non-positive value means match time does not count as a win/loss condition', caption='Time Limit For Match')
    axiomClass.AddAttribute('Int stageTransitionTime = 15', text='Time for a full stage transition(in seconds)', caption='Stage Transition Time')
    axiomClass.AddAttribute('Int stageTime', text='How many bonus minutes for a stage, if 0 reset game time with Match Time Limit', caption='Stage Time')
    axiomClass.AddAttribute('Int captureObjectiveBonusTime', text='How many bonus minutes for capture a secondary game objective', caption='Objective Bonus Time')
    axiomClass.AddAttribute('Int forceCompositionTime', text='How many seconds in PMD force composition phase', caption='Force Composition Duration')
    axiomClass.AddAttribute('Int selectForceSpawnPresetTime', text='How many seconds in preset selection')
    axiomClass.AddAttribute('Int pmdRequiredCapacitor', text='How many capacitors required in PMD', caption='Num. Required Capacitors')
    axiomClass.AddAttribute('Int pmdRequiredSupplyDepot', text='How many supply depot required in PMD', caption='Num. Required Supply Depot')
    axiomClass.AddAttribute('Int infantryDefaultWP', text='The default war point for infantry', caption='Infantry Default WP')
    axiomClass.AddAttribute('Int commanderDefaultWP', text='The default war point for commander', caption='Commander Default WP')
    axiomClass.AddAttribute('Int squadMax = 4', text='Max number of squad that a team can own', caption='Max Num of Squad')
    axiomClass.AddAttribute('Int squadCharacterMin = 3', text='Min number of character that a squad can own', caption='Min Num of Squad Character')
    axiomClass.AddAttribute('Int squadCharacterMax = 7', text='Max number of character that a squad can own', caption='Max Num of Squad Character')
    axiomClass.AddAttribute('Int squadLeaderDefaultWP', text='The default war point for squad leader', caption='Squad Leader Default WP')
    axiomClass.AddAttribute('Int squadVehicleMax', text='Max number of vehicle that a squad can own', caption='Max Num of Squad Vehicles')
    axiomClass.AddAttribute('Int teamVehicleMax', text='Max number of vehicle that a team can own', caption='Max Num of Team Vehicles', range=(0, None))
    axiomClass.AddAttribute('String commandPitLevelName', text='The name of the command pit level to use', group=GROUPS.Content, caption='Command Pit Level Name')
    axiomClass.AddAttribute('RespawnTimeSettings respawnTimeSettings', text='The settings of respawn time for all kinds of spawn points', group=GROUPS.Logic, caption='Respawn Time Settings')
    axiomClass.AddAttribute('Int autoRDVWait = 5', text='How many seconds to wait before the auto RDV sequence starts', caption='AutoRDV Time')
    axiomClass.AddAttribute('Int activeRDVLimit = 2', text='Number of simultaneously active RDVs per team', caption='Active RDV Limit')
    axiomClass.AddAttribute('Bool useThirdPersonCameraByDefault = False', text='Whether to use third-person camera by default', caption='Use third-person camera')
    axiomClass.AddAttribute('Float playerLiveTimeOutOfPlayableArea = 10.0', text='If the player is out of any playable area, he will die after this time(seconds)', caption='Player Live Time when out of playable area')
    axiomClass.AddAttribute('Int playableAreaTransitionTime = 60', text='The playable area of previous game stage will become invalid after the seconds', caption='Playable Area Transition Time(seconds)')
    axiomClass.AddAttribute('Int cloneReservesForAttacker = 20', text='How many Clone Reservers does the attacker team have, 0 means infinite', caption='Clone Reserves For Attackers')
    axiomClass.AddAttribute('Int cloneReservesForDefender = 20', text='How many Clone Reservers does the defender team have, 0 means infinite', caption='Clone Reserves For Defenders')
    axiomClass.AddAttribute('Int cloneReserveBonusForAttacker = 5', text='How many Clone Reservers Bonus does the attacker team have after a stage is finished, if 0 reset with cloneReservesForAttacker', caption='Clone Reserve Bonus For Attackers')
    axiomClass.AddAttribute('Int cloneReserveBonusForDefender = 5', text='How many Clone Reservers Bonus does the defender team have after a stage is finished, if 0 reset with cloneReservesForDefender', caption='Clone Reserve Bonus For Defenders')
    axiomClass.AddAttribute('Int cloneDepletionTime = 60', text='How long does a faction have before the lose the game after using up all clone reserves. In seconds', caption='Clone Reserve Depletion Time (In seconds)')
    axiomClass.AddAttribute('Bool cloneDepletionTimeShouldBeReset = True', text='if true, reset the clone deleption timer when the faction has regained any clone reserves; if false, simply pause the timer', caption='Clone Reserve Depletion Time Should Be Reset When Team Regaining Clone Reserves')
    axiomClass.AddAttribute('Bool allowCRUsStartWithFullCloneReserve = True', text='If true, the CRUs will start with maximum clone reserves', caption='CRUs Start With Full Clone Reserve')
    axiomClass.AddAttribute('Bool isCmdObjectiveStageTrigger = True', text="If true, hacking or destorying commander objectives will trigger a new stage; if false, commander objective targets' attacker and defender will exchange", caption='Is Commander Objective Stage Trigger')
    axiomClass.AddAttribute('VoiceOver voiceOverSettings', text='Voice Over Settings', group=GROUPS.Content, caption='Voice Over Settings')
    axiomClass.AddAttribute('EInstallationLoseFunction installationLoseFunctionWay = InstallationLoseFunction_Offline', text='How an installation loses its function after the stage it should serve', group=GROUPS.Logic, caption='Way Of Installation Losing Function On Stage Switches')
    axiomClass = ax2.CreateClass('DustGameType', standalone=True)
    axiomClass.AddAttribute('DustGameProperty mGameProp', caption='Game Type Properties')


def PopulateDebugStuff(ax2):
    axiomClass = ax2.CreateClass('EDebugEnum', axiom.Enumerate, forUE3=False)
    axiomClass.AddElement('DE_One')
    axiomClass.AddElement('DE_Two')
    axiomClass.AddElement('DE_Three')
    axiomClass = ax2.CreateClass('DebugProperty', standalone=False, forUE3=False)
    axiomClass.AddAttribute('String attStr = this is a debug string', editorFlag=EDITORFLAG_MULTILINE)
    axiomClass.AddAttribute('String attStrMultiline = this is a debug multiline string', editorFlag=EDITORFLAG_MULTILINE)
    axiomClass.AddAttribute('Int attInt = 123')
    axiomClass.AddAttribute('Float attFloat = 109.37')
    axiomClass.AddAttribute('Bool attBool = False')
    axiomClass.AddAttribute('EDebugEnum attEnum = DE_Two')
    axiomClass.AddAttribute('String arrayStr', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('String arrayStrMultiline', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, editorFlag=EDITORFLAG_MULTILINE)
    axiomClass.AddAttribute('Int arrayInt', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float arrayFloat', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Bool arrayBool', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('DebugClass', standalone=True, forUE3=False)
    axiomClass.AddAttribute('DebugProperty mDebugProperty', caption='Debug Properties')
    axiomClass.AddAttribute('DebugProperty mArrayProperty', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Array Properties')


def PopulateConsoleCommand(ax2):
    axiomClass = ax2.CreateClass('ConsoleCommand', standalone=True)
    axiomClass.AddAttribute('String mCommands', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Console Commands')


def PopulateTurret(ax2):
    axiomClass = ax2.CreateClass('DustMountableEntity', standalone=True)
    axiomClass.AddAttribute('TypeReference mBaseType = -1', modifyFlag=MODIFY_REMOVED, allowedClasses='InstallationBaseContent', group=GROUPS.Content, caption='[DEPRECATED] Base Type', text='if this mountable entity is used as installation component, which base to use for it', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mInteractionAngleTestMaxAngleAtLongestDistance = 30.0', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Interaction AngleTest MaxAngleAtLongestDistance', text='Max angle at longest distance between player view direction vector and player to interactive actor vector. >90: ignore test', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mTimeToHack = 6.0', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Time to Hack', text='How long time if the player hold the button, I am captured', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mTimeToCounterHack = 20.0', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Time to Counter Hack', text='How long it will take for the player to hack me back when i am in disputed state', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mHackCompletionDelay', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='[DEPRECATED] Hack Completion Delay', text='How long time will it take to switch team when hacked', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mSpeedFactorForHackAssist = 0.5', group=GROUPS.Logic, caption='Speed Factor For Hack Assist', modifyFlag=MODIFY_REMOVED, text='Affect speed increment for hacking assist http://dustwiki/index.php/Hacking-assist', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('EInstallationGroup mInstallationGroup', group=GROUPS.Content, caption='Installation Group', modifyFlag=MODIFY_REMOVED, text='Installation Group', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('NceCameraModeParams mCameraMode', group=GROUPS.Logic, uemodifier='private const', caption='Camera Mode', text='Camera mode')
    axiomClass = ax2.CreateClass('DustTurretProp', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Float yawDPS', text='Rotation speed on yaw, degree per second', group=GROUPS.Physics, caption='Yaw DPS')
    axiomClass.AddAttribute('Float pitchDPS', text='Rotation speed on pitch, degree per second', group=GROUPS.Physics, caption='Pitch DPS')
    axiomClass.AddAttribute('Bool limitYaw', text='Whether to limit the rotation on yaw', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Limit Yaw')
    axiomClass.AddAttribute('Bool limitPitch', text='Whether to limit the rotation on pitch', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Limit Pitch')
    axiomClass.AddAttribute('Float pitchMin', text='The min value of pitch rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Min Pitch')
    axiomClass.AddAttribute('Float pitchMAX', text='The max value of pitch rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Max Pitch')
    axiomClass.AddAttribute('Float yawMin', text='The min value of yaw rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Min Yaw')
    axiomClass.AddAttribute('Float yawMax', text='The max value of yaw rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Max Yaw')
    axiomClass.AddAttribute('String pitchControllerName', text='The name of the skeletal control for the pitch', group=GROUPS.Physics, caption='Pitch Controller Name')
    axiomClass.AddAttribute('String yawControllerName', text='The name of the skeletal control for the yaw', group=GROUPS.Physics, caption='Yaw Controller Name')
    axiomClass.AddAttribute('Bool takeDamage', group=GROUPS.Combat, caption='Take Damage')
    axiomClass.AddAttribute('Float targetEvaluationPeriod', group=GROUPS.Combat, caption='Target Evaluation Period')
    axiomClass.AddAttribute('Float targetZoneRadius', group=GROUPS.Combat, caption='Target Zone Radius')
    axiomClass.AddAttribute('Bool selfControlled', group=GROUPS.Combat, caption='Self-Controlled')
    axiomClass.AddAttribute('String traceStartSocketName', group=GROUPS.Combat, caption='TraceStart Socket Name')
    axiomClass = ax2.CreateClass('DustTurretWeapon', standalone=False, forUE3=False)
    axiomClass = ax2.CreateClass('TurretBarrelInfo', standalone=False, group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('DustTurretWeapon weapon', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='this is the first weapon')
    axiomClass.AddAttribute('TypeReference weaponType = -1', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustWeapon')
    axiomClass.AddAttribute('Name barrelStartSocketName', text='Name of the socket marked the start of the barrel, used for aiming', caption='BarrelStart Socket Name')
    axiomClass.AddAttribute('Name barrelPivotPointName', text='Name of the socket at which the barrel pitches, used for aiming', caption='Barrel Pivot Point Name')
    axiomClass.AddAttribute('Vector aimDir', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, text='Direction of the current aiming for this barrel', caption='Aim Direction')
    axiomClass.AddAttribute('Vector pivotLocation', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, text='Location of the pivot point, recalculated each frame and cached', caption='Pivot Location')
    axiomClass.AddAttribute('Vector fireStartLocation', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, text='Location of the fire start point, recalculated each frame and cached', caption='Fire Start Location')
    axiomClass.AddAttribute('Vector hitLocation', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, text='The hit location, used to init effects, etc', caption='Hit Location')
    axiomClass.AddAttribute('Float maxTargetAlignAngle', text='In degrees', caption='Max Target Align Angle')
    axiomClass.AddAttribute('Float maxTargetAlignCosValue', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, text='This value is cached', caption='Max Target Align Cos Value')
    axiomClass = ax2.CreateClass('DustTurret', standalone=True)
    axiomClass.AddAttribute('DustTurretProp mTurretProp')


def PopulateStaticInfo(ax2):
    axiomClass = ax2.CreateClass('AITypeReferences', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference aiSettingsTypeID', allowedClasses='AISettings', caption='The type id used for finding ai settings')
    axiomClass.AddAttribute('TypeReference aiVisionSettingsTypeID', allowedClasses='AIVisionSettings', caption='The type id used for finding ai vision settings')
    axiomClass = ax2.CreateClass('RaceTypeReferences', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference amarrRaceTraitsTypeID', allowedClasses='DustRaceTraits', caption='The type id used for finding Amarr race traits')
    axiomClass.AddAttribute('TypeReference caldariRaceTraitsTypeID', allowedClasses='DustRaceTraits', caption='The type id used for finding Caldari race traits')
    axiomClass.AddAttribute('TypeReference GallenteRaceTraitsTypeID', allowedClasses='DustRaceTraits', caption='The type id used for finding Gallente race traits')
    axiomClass.AddAttribute('TypeReference minmatarRaceTraitsTypeID', allowedClasses='DustRaceTraits', caption='The type id used for finding Minmatar race traits')
    axiomClass = ax2.CreateClass('GameTypeReferences', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference securityConsoleTypeID = -1', allowedClasses='DustInstallation', caption='The type id used for outpost security consoles')
    axiomClass.AddAttribute('TypeReference primaryConsoleTypeID = -1', allowedClasses='DustInstallation', caption='The type id used for outpost primary consoles')
    axiomClass.AddAttribute('TypeReference antiMccConsoleTypeID = -1 ', allowedClasses='DustInstallation', caption='The type id used for outpost Anti MCC consoles')
    axiomClass.AddAttribute('TypeReference outpostCommandNodeTypeID = -1 ', allowedClasses='DustInstallation', caption='The type id used for the hidden outpost command node')
    axiomClass.AddAttribute('TypeReference commanderObjectiveTypeID = -1', allowedClasses='DustCommanderObjective', caption='The type id used for commander objectives')
    axiomClass.AddAttribute('TypeReference missionObjectiveTypeID = -1', allowedClasses='DustCommanderObjective', caption='The type id used for mission objectives')
    axiomClass.AddAttribute('TypeReference squadOrderTypeID = -1', allowedClasses='SquadOrder', caption='The type id used for squad orders')
    axiomClass = ax2.CreateClass('UITypeReferences', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference worldIconFadeSettingsTypeID', allowedClasses='WorldIconFadeSettings', caption='The type id used for finding world icon settings')
    axiomClass = ax2.CreateClass('StimsTypeReferences', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference pawnTag', allowedClasses='Tag')
    axiomClass.AddAttribute('TypeReference vehicleTag', allowedClasses='Tag')
    axiomClass.AddAttribute('TypeReference installationTag', allowedClasses='Tag')
    axiomClass.AddAttribute('TypeReference turretTag', allowedClasses='Tag')
    axiomClass.AddAttribute('TypeReference moduleTag', allowedClasses='Tag')
    axiomClass.AddAttribute('TypeReference turretWeaponTag', allowedClasses='Tag')
    axiomClass.AddAttribute('TypeReference handheldWeaponTag', allowedClasses='Tag')
    axiomClass = ax2.CreateClass('InputTypeReferences', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference aimingAnalogueSensitivitySettingsTypeID', allowedClasses='InputSettings', caption='The type id used for finding aiming analogue sensitivity settings')
    axiomClass = ax2.CreateClass('StaticTypeReferences', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('AITypeReferences ai')
    axiomClass.AddAttribute('GameTypeReferences game')
    axiomClass.AddAttribute('RaceTypeReferences races')
    axiomClass.AddAttribute('UITypeReferences ui')
    axiomClass.AddAttribute('StimsTypeReferences stims')
    axiomClass.AddAttribute('InputTypeReferences input')
    axiomClass = ax2.CreateClass('AudioStaticInfo', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Float mDistanceReverbRangeMin = 10000.0', text='The distance in unreal units to start applying reverb', caption='The distance in unreal units to start applying reverb')
    axiomClass.AddAttribute('Float mDistanceReverbRangeMax = 40000.0', text='The distance in unreal units to end applying reverb', caption='The distance in unreal units to end applying reverb')
    axiomClass = ax2.CreateClass('ScannerFeedbackLevels', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('Float ratingPoorMax = 33', range=(0, 100), text='Active Scanner is rated POOR from 0 to ratingPoorMax (percentage)', caption='Active Scanner is rated POOR from 0 to ratingPoorMax (percentage)')
    axiomClass.AddAttribute('Float ratingGoodMax = 67', range=(0, 100), text='Active Scanner is rated GOOD from ratingPoorMax to ratingGoodMax (percentage) and EXCELLENT from this number to 100', caption='Active Scanner is rated GOOD from ratingPoorMax to ratingGoodMax (percentage) and EXCELLENT from this number to 100')
    axiomClass = ax2.CreateClass('ScannerFeedbackPing', standalone=False, group=GROUPS.Logic)
    axiomClass.AddAttribute('Int pingCount = 2', range=(0, None), text='Number of times an icon pings when scanned by active scanner', caption='Number of times an icon pings when scanned by active scanner')
    axiomClass.AddAttribute('Float pingDuration = 0.75', range=(0, None), text='Number of seconds a ping lasts', caption='Number of seconds a ping lasts')
    axiomClass.AddAttribute('Float pingAlphaMinimum = 20', range=(0, 100), text='Minimum value that icon alpha decays to from 100 during a ping', caption='Minimum value that icon alpha decays to from 100 during a ping')
    axiomClass = ax2.CreateClass('DustStaticInfo', standalone=True)
    axiomClass.AddAttribute('Bool mCapacitorSuppliesPowerRegardlessOfFaction = True', text='If true the capacitor will also supply power to enemies', group=GROUPS.Logic, caption='Capacitor Supplies Power Regardless Of Faction')
    axiomClass.AddAttribute('Bool mCaptureSlavesWhenCapacitorIsHacked = True', text='If true any slave installations are also captured when the capacitor is hacked', group=GROUPS.Logic, caption='Capture Slaves When Capacitor is Hacked')
    axiomClass.AddAttribute('Bool mCommandNodeSuppliesPowerRegardlessOfFaction = True', text='If true the command node will also supply pg/cpu to enemies', group=GROUPS.Logic, caption='Command Node Supplies Power Regardless Of Faction')
    axiomClass.AddAttribute('Bool mCaptureSlavesWhenCommandNodeIsHacked = True', text='If true any slave installations are also captured when the command node  is hacked', group=GROUPS.Logic, caption='Capture Slaves When Command Node is Hacked')
    axiomClass.AddAttribute('Float mTimeForInstallationTurretToRestartAI = 5.0', text='The time for turret installation to restart AI after enemy player exits it', group=GROUPS.Logic, caption='Time For Installation Turret To Restart AI')
    axiomClass.AddAttribute('Bool mAlliedPlayerCanGoThruShields = True', text='Whether or not allied players are allowed to go through their own securty shields', group=GROUPS.Logic, caption='Allied Player Can Go Thru Shields')
    axiomClass.AddAttribute('StaticTypeReferences staticTypes', caption='Static type references')
    axiomClass.AddAttribute('AudioStaticInfo audioStaticInfo', caption='Global info for audio')
    axiomClass.AddAttribute('ScannerFeedbackLevels scannerFeedbackLevels', caption='Scanner feedback info')
    axiomClass.AddAttribute('ScannerFeedbackPing scannerFeedbackPing', caption='Scanner feedback ping info')
    axiomClass = ax2.CreateClass('NceVehiclePidController', standalone=False, group=GROUPS.Physics)
    axiomClass.AddAttribute('Float m_fPitchP = 50', text='PID pitch proportional value')
    axiomClass.AddAttribute('Float m_fPitchD = 800', text='PID pitch derivative value')
    axiomClass.AddAttribute('Float m_fRollP = 50', text='PID roll proportional value')
    axiomClass.AddAttribute('Float m_fRollD = 800', text='PID roll derivative value')
    axiomClass.AddAttribute('Float m_fReturnToRestRate = 0.2', text='PID return to rest slerp rate')
    axiomClass.AddAttribute('Float m_fMoveToRestRate = 0.1', text='PID move to rest slerp rate')
    axiomClass = ax2.CreateClass('GameSync', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('String syncName', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('ESyncGroupType syncType', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('String groupName', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass = ax2.CreateClass('GloballyLoadedGameSyncs', standalone=True, group=GROUPS.Content)
    axiomClass.AddAttribute('GameSync validGameSyncs', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('FirstPersonThirdPersonGameSyncs', standalone=True, group=GROUPS.Content)
    axiomClass.AddAttribute('GameSync firstPersonGameSync', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('GameSync thirdPersonGameSync', attributeFlag=DEFAULT_ATTRIB_FLAGS)


def PopulateRaceTraits(ax2):
    axiomClass = ax2.CreateClass('DustRaceTraits', standalone=True)
    axiomClass.AddAttribute('TypeReference mPawnType', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVIC_Character', caption='Pawn Type')
    axiomClass.AddAttribute('TypeReference mMCCType', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVehMCC', caption='MCC Type')
    axiomClass.AddAttribute('TypeReference m_RDVType', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVIC_Vehicle', uemodifier='private', caption='RDV Type')
    axiomClass.AddAttribute('TypeReference mInstallationTypes', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustInstallation', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Installation Types')
    axiomClass.AddAttribute('TypeReference mVehicleTypes', modifyFlag=MODIFY_TYPE_CHANGED, allowedClasses='DustVIC_Vehicle', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Vehicle Types')


def PopulateNceVehicleSimBase(ax2):
    axiomClass = ax2.CreateClass('NceVehicleSimBaseProperty', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float wheelSuspensionStiffness', caption='Wheel Suspension Stiffness', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelSuspensionDamping', caption='Wheel Suspension Damping', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelSuspensionBias', caption='Wheel Suspension Bias')
    axiomClass.AddAttribute('Float wheelLongExtremumSlip', caption='Wheel Long Extremum Slip', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelLongExtremumValue', caption='Wheel Long Extremum Value', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelLongAsymptoteSlip', caption='Wheel Long Asymptote Slip', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelLongAsymptoteValue', caption='Wheel Long Asymptote Value', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelLatExtremumSlip', caption='Wheel Lat Extremum Slip', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelLatExtremumValue', caption='Wheel Lat Extremum Value', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelLatAsymptoteSlip', caption='Wheel Lat Asymptote Slip', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelLatAsymptoteValue', caption='Wheel Lat Asymptote Value', range=(0.0, None))
    axiomClass.AddAttribute('Float wheelInertia', caption='Wheel Inertia', range=(0.0, None))
    axiomClass.AddAttribute('Bool wheelSpeedOverride', caption='Wheel Speed Override')
    axiomClass.AddAttribute('Bool clampedFrictionModel', caption='Clamped Friction Model')
    axiomClass.AddAttribute('Float stopBrakeTorque', text="Applied to the vehicle when it's not being driven, to force a stop", caption='Stop Brake Torque', range=(0.0, None))
    axiomClass.AddAttribute('Float autoBrakeFactor', text='The fraction of brake to apply when the player is giving any throttle to the car', caption='Auto Brake Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float propulsionMultiplier = 1', range=(0.001, None), text='The multiplier applied on the propulsion force', caption='Propulsion Multiplier')
    axiomClass = ax2.CreateClass('NceVehicleSimBase', standalone=True, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('NceVehicleSimBaseProperty m_SimBaseProp', uemodifier='repnotify', caption='Vehicle Sim Base Properties')
    axiomClass.AddAttribute('CurveReference m_EngineRPMCurveNce', text='Translates forward velocity into an EngineRPM that can be used for effects and sounds', uemodifier='norep', group=GROUPS.Physics, caption='Engine RPM Curve')
    axiomClass.AddAttribute('CurveReference m_SteeringInputCurveNce', uemodifier='norep', group=GROUPS.Physics, caption='Steering Input Curve')
    axiomClass.AddAttribute('CurveReference m_ThrottleInputCurveNce', uemodifier='norep', group=GROUPS.Physics, caption='Throttle Input Curve')


def PopulateNceVehicleSimWheeled(ax2):
    axiomClass = ax2.CreateClass('NceVehicleSimWheeledProperty', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float chassisTorqueScale', text='How much torque to apply to chassis based on acceleration', caption='Chassis Torque Scale', range=(0.0, None))
    axiomClass.AddAttribute('Float reverseThrottle', text='How much throttle when in reverse', caption='Reverse Throttle', range=(None, 0.0))
    axiomClass.AddAttribute('Float stopThreshold', text='Speed at which the vehicle will stop simulating', caption='Stop Threshold', range=(0.0, None))
    axiomClass.AddAttribute('Float jumpDamping', text='Extra downward force when flying in sky', caption='Jump Damping', range=(0.0, None))
    axiomClass.AddAttribute('Float lsdFactor', text='Limited slip differential: 0.60 would mean 60% of the power is routed through the LSD and 40% is divided evenly', caption='LSD Factor', range=(0.0, 1.0))
    axiomClass.AddAttribute('Float steeringReductionFactor', text='Steering reduction factor when have wheels in air (to make vehicles easier to control)', caption='Steering Reduction Factor', range=(0.0, 1.0))
    axiomClass.AddAttribute('Float steeringReductionRampUpRate', text='Steering reduction ramp up rate (1/this = time to full steering reduction).  ramps down at half this rate', caption='Steering Reduction Ramp Up Rate', range=(0.0, None))
    axiomClass.AddAttribute('Int numWheelsForFullSteering', text='How many wheels must be on ground in order to avoid steering reduction', caption='Num Wheels For Full Steering', range=(0, None))
    axiomClass.AddAttribute('Float steeringReductionSpeed', text='Speed at which steering reduction is in full effect', caption='Steering ReductionSpeed', range=(0.0, None))
    axiomClass.AddAttribute('Float steeringReductionMinSpeed', text='Speed at which steering reduction starts', caption='Steering Reduction Min Speed', range=(0.0, None))
    axiomClass.AddAttribute('Float minHardTurnSpeed', text='Minimum speed before torque reduction sets in when turning hard', caption='Min Hard Turn Speed', range=(0.0, None))
    axiomClass.AddAttribute('Float hardTurnMotorTorque', text="Motor torque applied during hard turns (don't want to accelerate through hard turns", caption='Hard Turn Motor Torque', range=(0.0, None))
    axiomClass.AddAttribute('Bool autoHandbrake', text='Whether should auto-handbrake when wheels on one side are off the ground', caption='Auto Handbrake')
    axiomClass.AddAttribute('Float consoleHardTurnGripFactor', text='When turning hard on console, reduce lateral grip to enhance sliding around', caption='Console Hard Turn Grip Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fBuoyancy', text='How buoyant the vehicle is', caption='Buoyancy', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fBuoyancyDamping', text='Additional damping to apply to the floating forces', caption='Buoyancy Damping', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fMaxFloatingThrust', text='Maximum forward thrust while moving on water', caption='Max Floating Thrust', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fMaxFloatingSteerAngle', text='Maximum angle to apply to thrust while moving on water', caption='Max Floating Steer Angle', range=(-180.0, 180.0))
    axiomClass.AddAttribute('Float m_fFloatingAngularDampingFactor', text='Amount of damping to apply to vehicle angular velocity when floating on water', caption='Floating Angular Damping Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fWheelspinThreshold', text='Unit percentage threshold between wheelspin and braking', caption='Wheelspin Threshold', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fTorqueSplit', text='Unit percentage division of torque between front (1.0) and rear drive (0.0)', caption='Torque Split', range=(0.0, 1.0))
    axiomClass = ax2.CreateClass('NceVehicleSimWheeled', standalone=True, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('NceVehicleSimWheeledProperty m_SimWheeledProp', uemodifier='repnotify', caption='Vehicle Sim Wheeled Properties')
    axiomClass.AddAttribute('CurveReference m_MaxSteerAngleCurveNce', text='Degrees based on velocity', uemodifier='norep', group=GROUPS.Physics, caption='Max Steer Angle Curve')
    axiomClass.AddAttribute('CurveReference m_MaxSteerSpeedCurveNce', text='Degrees per second based on velocity', uemodifier='norep', group=GROUPS.Physics, caption='Max Steer Speed Curve')
    axiomClass.AddAttribute('CurveReference m_TorqueVsSpeedCurveNce', text='Torque vs Speed curve: This curve approximates a transmission as opposed to actually simulating one as in SVehicleSimTransmission', uemodifier='norep', group=GROUPS.Physics, caption='Torque V Speed Curve')
    axiomClass.AddAttribute('CurveReference m_LongGripCruve', text='This is used for the longitudinal grip force versus slip ratio', uemodifier='norep', group=GROUPS.Physics, caption='Longitudinal Grip Cruve')
    axiomClass.AddAttribute('CurveReference m_LatGripCurve', text='This is used for the lateral grip force versus slip ratio', uemodifier='norep', group=GROUPS.Physics, caption='Lateral Grip Cruve')
    axiomClass.AddAttribute('CurveReference m_SlopeGripCurve', text='This is used to further reduce grip based on slope in the longitudinal direction', uemodifier='norep', group=GROUPS.Physics, caption='Longitudinal Slope Grip Curve')
    axiomClass.AddAttribute('CurveReference m_LatSlopeGripCurve', text='This is used to further reduce grip based on slope in the lateral direction', uemodifier='norep', group=GROUPS.Physics, caption='Lateral Slope Grip Curve')


def PopulateNceVehicleSimHover(ax2):
    axiomClass = ax2.CreateClass('NceVehicleSimHoverProperty', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Bool m_bDisableWheelsWhenOff', text='Whether to disable the wheels when the vehicle is unoccupied', caption='Disable Wheels When Off')
    axiomClass.AddAttribute('Bool m_bRepulsorCollisionEnabled', text="Used internally - shouldn't really be exposed", caption='Repulsor Collision Enabled')
    axiomClass.AddAttribute('Float m_fInitialLiftForce', text='Lift force to apply when vehicle is entered', caption='Initial Lift Force', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fMaxThrustForce', text='Maximum amount of forward thrust', caption='Max Thrust Force', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fMaxReverseForce', text='Maximum amount of backward thrust', caption='Max Reverse Force', range=(0.0, None))
    axiomClass.AddAttribute('Bool m_bAllowThrustControlInAir', text='Whether to retain thrust control while in the air', caption='Allow Thrust Control In Air')
    axiomClass.AddAttribute('Bool m_bAllowSteeringControlInAir', text='Whether to retain steering control while in the air', caption='Allow Steering Control In Air')
    axiomClass.AddAttribute('Bool m_bReverseInvertsSteeringYaw', text='Whether reversing inverts steering yaw', caption='Reverse Inverts Steering Yaw')
    axiomClass.AddAttribute('Bool m_bReverseInvertsSteeringRoll', text='Whether reversing inverts steering roll', caption='Reverse Inverts Steering Roll')
    axiomClass.AddAttribute('Float m_fSteeringLeanFactor', text='Multiplier for steering lean amount', caption='Steering Lean Factor', range=(0.0, 90.0))
    axiomClass.AddAttribute('Float m_fMaxLeanAngle', text='Maximum angle of steering lean', caption='Max Lean Angle', range=(0.0, 90.0))
    axiomClass.AddAttribute('Float m_fMaxLeanSpeed', text='Maximum rate of change of steering lean', caption='Max Lean Speed', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSteeringYawFactor', text='Multiplier for steering yaw amount', caption='Steering Yaw Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fMaxUprightTorque', text='Maximum torque to apply to keep the vehicle upright', caption='Max Upright Torque', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fRollDampingFactor', text='Amount of damping to apply to vehicle roll', caption='Roll Damping Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fPitchDampingFactor', text='Amount of damping to apply to vehicle pitch', caption='Pitch Damping Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fYawDampingFactor', text='Amount of damping to apply to vehicle yaw', caption='Yaw Damping Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fXDragFactor', text='Amount of drag to apply to vehicle velocity in X-axis', caption='X Drag Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fYDragFactor', text='Amount of drag to apply to vehicle velocity in Y-axis', caption='Y Drag Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fZDragFactor', text='Amount of drag to apply to vehicle velocity in Z-axis', caption='Z Drag Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fMaxStationaryDragSpeed', text='Maximum speed at which to apply additional drag to hold the vehicle still', caption='Max Stationary Drag Speed', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fStationaryLinearDragFactor', text='Multiplier for linear drag to hold the vehicle still', caption='Stationary Linear Drag Factor', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fStationaryAngularDragFactor', text='Multiplier for angular drag to hold the vehicle still', caption='Stationary Angular Drag Factor', range=(0.0, None))
    axiomClass.AddAttribute('Vector m_vWaterCheckOffset', text='Offset from vehicle origin at which to check for being above water', caption='Water Check Offset')
    axiomClass.AddAttribute('Float m_fWaterCheckLength', text='Length of check for being above water', caption='Water Check Length', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fWaterForceStrength', text='Strength of force to apply to water', caption='Water Force Strength')
    axiomClass.AddAttribute('Float m_fWaterForceRadius', text='Radius of force to apply to water', caption='Water Force Radius', range=(0.0, None))
    axiomClass = ax2.CreateClass('NceVehicleSimHover', standalone=True, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('NceVehicleSimHoverProperty m_SimHoverProp', uemodifier='repnotify', caption='Vehicle Sim Hover Properties')
    axiomClass.AddAttribute('CurveReference m_ThrustVsSpeedCurveNce', uemodifier='norep', group=GROUPS.Physics, caption='ThrustVsSpeedCurve Curve')


def PopulateNceVehicleSimAir(ax2):
    axiomClass = ax2.CreateClass('NceVehicleSimAirProperty', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float m_fThrustIncreaseForce', text='Hover amount of thrust increase per second')
    axiomClass.AddAttribute('Float m_fThrustExtraPush', text='Hover multipler for the horizontal thrust')
    axiomClass.AddAttribute('NceVehiclePidController m_HoverModeReturnToRest', uemodifier='repnotify', caption='Hover return to rest PID controller settings')
    axiomClass.AddAttribute('NceVehiclePidController m_CruiseReturnToRest', uemodifier='repnotify', caption='Cruise return to rest PID controller settings')
    axiomClass.AddAttribute('Float m_fNeutralThrustBias = 1.0', text='The proportion of total calculated thrust applied to the vehicle', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fAirDragForce', text='Amount of drag force', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fAirDragTorque', text='Amount of drag torque', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fAltitudeLimit', text='')
    axiomClass.AddAttribute('Float m_fAltitudeLimitRange', text='', range=(0.01, None))
    axiomClass.AddAttribute('Float m_fHoverModePitchMax', text='', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fHoverModeRollMax', text='', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fCruiseModePitchMax', text='', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fCruiseModeRollMax', text='', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fCruiseBankedTurnYawTorqueMax', text='Cruise banked turn yaw force', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fCruiseRollTorque', text='Cruise roll rotation speed', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fCruiseThrust', text='Cruise thrust', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fCruiseSwitchFlyingModeTimer', text='', range=(0.0, None))
    axiomClass = ax2.CreateClass('NceVehicleSimAir', standalone=True, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('NceVehicleSimAirProperty m_SimAirProp', uemodifier='repnotify', caption='Vehicle Sim Air Properties')
    axiomClass.AddAttribute('CurveReference m_PitchFromRollCurveNce', uemodifier='norep', group=GROUPS.Physics, caption='Pitch from Roll Curve')
    axiomClass.AddAttribute('CurveReference m_HoverModeThrustXFromPitchCurve', uemodifier='norep', caption='Hover mode thrust X from pitch curve')
    axiomClass.AddAttribute('CurveReference m_HoverModeThrustXScaleFromSpeedCurve', uemodifier='norep', caption='Hover mode thrust X scale from speed curve')
    axiomClass.AddAttribute('CurveReference m_HoverModeThrustYFromRollCurve', uemodifier='norep', caption='Hover mode thrust Y from roll curve')
    axiomClass.AddAttribute('CurveReference m_HoverModeThrustYScaleFromSpeedCurve', uemodifier='norep', caption='Hover mode thrust Y scale from speed curve')
    axiomClass.AddAttribute('CurveReference m_HoverModeYawForceFromInputCurve', uemodifier='norep', caption='Hover mode yaw force from input curve')
    axiomClass.AddAttribute('CurveReference m_HoverModeYawForceScaleFromSpeedCurve', uemodifier='norep', caption='Hover mode yaw force scale from speed curve')
    axiomClass.AddAttribute('CurveReference m_HoverModeThrustZScaleFromSpeedCurve', uemodifier='norep', caption='Hover mode thrust Z scale from speed curve')


def PopulateNceVehicleSimRDV(ax2):
    axiomClass = ax2.CreateClass('NceVehicleSimRDVProperty', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Vector m_EngineOffset', text='Local engine offset')
    axiomClass.AddAttribute('Vector m_RearOffset', text='Rear (rudder) engine offset')
    axiomClass.AddAttribute('Float m_fLiftStabiliserGain', text='Lift stabiliser gain')
    axiomClass.AddAttribute('Float m_fDriveStabiliserHaltGain', text='Halt stabiliser gain')
    axiomClass.AddAttribute('Float m_fDriveStabiliserTravelGain', text='Travel stabiliser gain')
    axiomClass.AddAttribute('Float m_fLiftStabiliserMaxSpeed', text='Max effective lift stabilising speed')
    axiomClass.AddAttribute('Float m_fDriveStabiliserMaxSpeed', text='Max effective drive stabilising speed')
    axiomClass.AddAttribute('Float m_fLiftInputGain', text='Lift input gain')
    axiomClass.AddAttribute('Float m_fFwdInputGain', text='Forward input gain')
    axiomClass.AddAttribute('Float m_fSideInputGain', text='Side input gain')
    axiomClass.AddAttribute('Float m_fYawInputGain', text='Yaw input gain')
    axiomClass.AddAttribute('Float m_fHeightChangeAllowance', text='Allowance for height gain or drop due to pitch')
    axiomClass.AddAttribute('Float m_fBoostGain', text='Boost gain')
    axiomClass.AddAttribute('Float m_fFullBoostSpeed', text='Max effective boost speed')
    axiomClass.AddAttribute('Float m_fAirResistanceGain', text='Air resistance gain')
    axiomClass = ax2.CreateClass('NceVehicleSimRDV', standalone=True)
    axiomClass.AddAttribute('NceVehicleSimRDVProperty m_SimRDVProp', uemodifier='repnotify', caption='Vehicle Sim RDV Properties')


def PopulateNceVehicleSimTrack(ax2):
    axiomClass = ax2.CreateClass('NceVehicleSimTrackProperty', standalone=False, group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL | ATTRIB_FLAGS.MODULIZED)
    axiomClass.AddAttribute('Float m_fSlipThrottleReduction', text='Amount to reduce track speed by when slip detected', range=(0.0, 1.0))
    axiomClass.AddAttribute('Float m_fSettleSteeringTime', text='Length of time before reverse controls settle back to forward controls', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSettleThreshold', text='Control settling threshold', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fFlipSteeringTime', text='Time taken to smoothly transition between normal and reversed contorls', range=(0.01, None))
    axiomClass.AddAttribute('Float m_fContactExaggeration', text='Exaggerate Wheel Contact Contribution', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSteeringAcceleration', text='Steering Acceleration', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fSteeringBufferAngle', text='Steering Buffer Angle', range=(0.0, 90.0))
    axiomClass.AddAttribute('Float m_fTrackAnimSpeed', text='Track animation speed')
    axiomClass.AddAttribute('Float m_fFlipSteeringThreshold', text='Throttle required before steering controls are inverted', range=(0.0, None))
    axiomClass.AddAttribute('Float m_fImpactThrottleAtten', text='Throttle attenuation due to impact with ground', range=(0.0, 1.0))
    axiomClass = ax2.CreateClass('NceVehicleSimTrack', standalone=True, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.MODULIZED | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('NceVehicleSimTrackProperty m_SimTrackProp', uemodifier='repnotify', caption='Vehicle Sim Track Properties')
    axiomClass.AddAttribute('CurveReference m_SlopeGripCurveNce', text='This is used to further reduce grip based on slope in the longitudinal direction', uemodifier='norep', group=GROUPS.Physics, caption='Longitudinal Slope Grip Curve')
    axiomClass.AddAttribute('CurveReference m_LatTrackSlopeGripCurve', text='This is used to further reduce grip based on slope in the lateral direction', uemodifier='norep', group=GROUPS.Physics, caption='Lateral Slope Grip Curve')
    axiomClass.AddAttribute('CurveReference m_LatGripCurveNce', uemodifier='norep', group=GROUPS.Physics, caption='Per Wheel Lateral Grip Curve')
    axiomClass.AddAttribute('CurveReference m_LongGripCurveNce', uemodifier='norep', group=GROUPS.Physics, caption='Per Wheel Longitudinal Grip Curve')
    axiomClass.AddAttribute('CurveReference m_SteeringSpeedCurve', uemodifier='norep', group=GROUPS.Physics, caption='Steering Speed Curve')
    axiomClass.AddAttribute('CurveReference m_TrackTorqueCurveNce', uemodifier='norep', group=GROUPS.Physics, caption='Track Torque Curve')


def PopulateNceTurret(ax2):
    axiomClass = ax2.CreateClass('NceTurretBarrel', standalone=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('Name m_GunFireSocket', group=GROUPS.Combat, caption='Gun fire socket')
    axiomClass.AddAttribute('Vector m_vGunFireLocation', group=GROUPS.Combat, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED)
    axiomClass = ax2.CreateClass('ETurretTargetType', axiom.Enumerate, forUE3=False)
    axiomClass.AddElement('Target_Aerial')
    axiomClass.AddElement('Target_Gound')
    axiomClass.AddElement('Target_OnFoot')
    axiomClass.AddElement('Target_MCC')
    axiomClass.AddElement('Target_Turret')
    axiomClass = ax2.CreateClass('SearchLaserInfo', standalone=False, forUE3=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('ContentReference m_LaserEffect', group=GROUPS.Combat, caption='Laser Effect')
    axiomClass.AddAttribute('Name m_LaserEffectColourParam = LaserEffectColor', group=GROUPS.Combat, caption='Laser Effect Colour Parameter')
    axiomClass.AddAttribute('Name m_LaserEffectSocket = effectSocket', group=GROUPS.Combat, caption='Laser effect Socket')
    axiomClass.AddAttribute('Meter m_fBeamLength = 75', group=GROUPS.Combat, caption='Laser Beam Length')
    axiomClass.AddAttribute('Name m_BeamLengthParam = BeamLength', group=GROUPS.Combat, caption='Beam Length Parameter Name')
    axiomClass.AddAttribute('Bool m_bIndependentLaser = False', caption='Independent Laser')
    axiomClass.AddAttribute('ETurretTargetType m_TargetType = Target_OnFoot')
    axiomClass = ax2.CreateClass('SearchLaserMesh', standalone=False, forUE3=False, group=GROUPS.Combat)
    axiomClass.AddAttribute('ContentReference m_LaserMesh', group=GROUPS.Combat, caption='Laser mesh')
    axiomClass.AddAttribute('Name m_LaserMeshSocket = LaserSocket', group=GROUPS.Combat, caption='Laser mesh Socket')
    axiomClass.AddAttribute('Bool m_bPitchBoneSocket = False', group=GROUPS.Combat, caption='Pich Bone', etxt='Socket is on the pitch bone. Else default to yaw bone')
    axiomClass = ax2.CreateClass('NceTurretProp', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Bool m_bYawLimit', text='Whether to limit the rotation on yaw', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Limit Yaw')
    axiomClass.AddAttribute('Bool m_bPitchLimit', text='Whether to limit the rotation on pitch', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Limit Pitch')
    axiomClass.AddAttribute('Float m_fPitchMin', text='The min value of pitch rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Min Pitch')
    axiomClass.AddAttribute('Float m_fPitchMax', text='The max value of pitch rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Max Pitch')
    axiomClass.AddAttribute('Float m_fYawMin', text='The min value of yaw rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Min Yaw')
    axiomClass.AddAttribute('Float m_fYawMax', text='The max value of yaw rotation', group=GROUPS.Physics, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.PUBLISHED, caption='Max Yaw')
    axiomClass.AddAttribute('String m_PitchControllerName', text='The name of the skeletal control for the pitch', group=GROUPS.Physics, caption='Pitch Controller Name')
    axiomClass.AddAttribute('String m_YawControllerName', text='The name of the skeletal control for the yaw', group=GROUPS.Physics, caption='Yaw Controller Name')
    axiomClass.AddAttribute('Bool m_bResetWhenUnoccupied = False', text='Whether to reset rotation when the turret is unoccupied', group=GROUPS.Physics, caption='Reset rotation when the turret is unoccupied')
    axiomClass.AddAttribute('Bool m_bSelfControlled', group=GROUPS.Combat, caption='Self-Controlled')
    axiomClass.AddAttribute('String m_ControllerClass', text='The UE3 class for the controller', group=GROUPS.Combat, caption='Controller Class')
    axiomClass.AddAttribute('Degree m_fLeftLimit = -180', range=(-360, 360), group=GROUPS.Combat, caption='LeftSearchLimit', text='Left most position on the search pattern')
    axiomClass.AddAttribute('Degree m_fRightLimit = 180', group=GROUPS.Combat, caption='RightSearchLimit', text='Right most position on the search pattern')
    axiomClass.AddAttribute('Float m_fSearchPerSecond = 0.2', range=(0, 1), group=GROUPS.Combat, caption='SearchPerSecond', text='Search patterns per second')
    axiomClass.AddAttribute('Float m_fBaseResponseTime', group=GROUPS.Combat, caption='Base Response Time')
    axiomClass.AddAttribute('TypeReference m_WeaponType', group=GROUPS.Combat, caption='Weapon Type', allowedClasses='DustWeapon')
    axiomClass.AddAttribute('Bool m_bUseCoverFire = True', group=GROUPS.Combat, caption='Use Cover Fire', text='Should this weapon use cover fire')
    axiomClass.AddAttribute('SearchLaserMesh m_SearchLaserMesh', caption='Laser Mesh')
    axiomClass.AddAttribute('SearchLaserInfo m_SearchLaserInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, Caption='Laser Effects')
    axiomClass.AddAttribute('Bool m_bAIControlled = False', group=GROUPS.Combat, caption='AI Controlled')
    axiomClass.AddAttribute('Bool m_bReactive = False', group=GROUPS.Combat, caption='Reactive AI', text='AI will react to being attacked')
    axiomClass.AddAttribute('Bool m_bDisableWhenHacked = False', group=GROUPS.Combat, caption='Disable When Hacked', text='This turret will no longer function when hacked')
    axiomClass.AddAttribute('Bool m_bLargeTurret = False', group=GROUPS.Logic, caption='Is Large Turret', text='This turret has an abnormally long barrel and will be treated as such')
    axiomClass = ax2.CreateClass('NceTurretCameraProp', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool  m_bLocalSpaceAiming = true', group=GROUPS.Content, caption='Local space aiming')
    axiomClass.AddAttribute('Bool  m_bShowMeshInFirstPersonCamera = true', group=GROUPS.Content, caption='Show mesh in first person camera view', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('Float m_fTurretMeshFirstPersonFOV = 0.0', group=GROUPS.Content, caption='Turret mesh first person FOV ( 0 disabled )')
    axiomClass.AddAttribute('Float m_fTurretMeshFirstPersonFOVZoomed = 0.0', group=GROUPS.Content, caption='Turret mesh first person FOV zoomed ( 0 disabled )')
    axiomClass = ax2.CreateClass('NceTurret', standalone=True)
    axiomClass.AddAttribute('MaterialModifier mMeshMaterialModifiers', modifyFlag=MODIFY_REMOVED, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Mesh Material Modifiers', text='Modifiers that setup the parameters for the mesh materials')
    axiomClass.AddAttribute('NceTurretProp m_TurretProp')
    axiomClass.AddAttribute('NceTurretCameraProp m_TurretCameraProp', caption='Turret camera prop')
    axiomClass.AddAttribute('DustVisionProperties m_VisionProperties', group=GROUPS.Combat, caption='Vision Properties')
    axiomClass.AddAttribute('DustTargettingProperties m_TargettingProperties', group=GROUPS.Combat, caption='Targeting Properties')
    axiomClass.AddAttribute('DustAIAccuracyProperties m_AccuracyProperties', group=GROUPS.Combat, caption='Accuracy Properties')
    axiomClass.AddAttribute('CameraControlInfo mCamCtrlParam', text='parameters for camera control', group=GROUPS.Content)
    axiomClass.AddAttribute('Bool m_bTwoAxisSound = true', group=GROUPS.Content, caption='Uses indepedent pitch/rotation sounds. Otherwise just use rotation events')
    axiomClass.AddAttribute('ContentReference mOverlayTexture', group=GROUPS.Content, caption='Overlay Texture Asset', text='Overlay texture asset.', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mOverlayAlpha = 0.2', group=GROUPS.Content, caption='Overlay Texture Alpha', text='Overlay texture alpha tweak.')
    axiomClass.AddAttribute('LinearColor mOverlayTint', group=GROUPS.Content, caption='Overlay RGB Tint', text='Overlay texture colour tint (RGB) & glass effect scaler (A).')
    axiomClass.AddAttribute('NceTurretBarrel m_aBarrelInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.Combat, caption='Barrel Info')


def PopulateHealingActor(ax2):
    axiomClass = ax2.CreateClass('DustHealingActor', standalone=True)
    axiomClass.AddAttribute('Int defaultHealHealthRate = 12', text='Default Health heal rate, in points per second', group=GROUPS.Logic, caption='Default Health Heal Rate')
    axiomClass.AddAttribute('Int defaultHealShieldRate = 12', text='Default Shield heal rate, in points per second', group=GROUPS.Logic, caption='Default Shield Heal Rate')
    axiomClass.AddAttribute('Int defaultHealArmorRate = 12', text='Default Armor heal rate, in points per second', group=GROUPS.Logic, caption='Default Armor Heal Rate')


def PopulateGameObjective(ax2):
    axiomClass = ax2.CreateClass('DustGameObjectiveProp', standalone=False, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Int mCapturingWPAward = 50', text='The player will earn this amount of WP if he capture the game objective', group=GROUPS.Content, caption='Awarded WP for capturing')
    axiomClass.AddAttribute('Float mCommanderWPCommission = 0.2', text='The percentage of WP earned by all the team members that goes to the commander', group=GROUPS.Content, caption='Commander WP Commission')
    axiomClass.AddAttribute('WorldIcon worldIcon', text='The position adjust for 3D icon of game objectives', group=GROUPS.Content, caption='3DIcon')
    axiomClass = ax2.CreateClass('DustGameObjective', standalone=True)
    axiomClass.AddAttribute('DustGameObjectiveProp mGameObjectiveProp', text='The DustGameObjective property', group=GROUPS.Content, caption='Property')
    axiomClass.AddAttribute('CmdObjTargetProp mCmdObjTargetProp', text='the properties for commander objective target', group=GROUPS.Logic, caption='Commander Objective Target Properties')


def PopulateCommanderObjective(ax2):
    ax2.CreateClass('DustCommanderObjective', standalone=True)
    axiomClass = ax2.CreateClass('SquadOrder', standalone=True)
    axiomClass.AddAttribute('Second mTargetLostDelay = 5.0', text='How many seconds will this order continue tracking a moving target that is lost in the fog of war, before cancelling', group=GROUPS.Logic, caption='Cancel Lost Order In T Seconds')


def PopulateVehicleFactory(ax2):
    axiomClass = ax2.CreateClass('VehicleFactoryProp', standalone=False, forUE3=False)


def PopulateBenchmarkTest(ax2):
    axiomClass = ax2.CreateClass('Benchmark', standalone=True)
    axiomClass.AddAttribute('TypeReference mBenchmarkSteps', modifyFlag=MODIFY_TYPE_CHANGED, text='The steps in benchmark test', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('BenchmarkStepConsoleCommand', standalone=True)
    axiomClass.AddAttribute('String mCommands', text='The commands that will be excuted', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('BenchmarkStepSpawnVehicles', standalone=True)
    axiomClass.AddAttribute('TypeReference mVehicleTypes', modifyFlag=MODIFY_TYPE_CHANGED, text='The vehicles spawned in benchmark test', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('BenchmarkStepSpawnAIPlayers', standalone=True)
    axiomClass.AddAttribute('Int mSpawnedAINumInOneSide', text='How many AI should we spawn in one side', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS)


def PopulateSkills(ax2):
    axiomClass = ax2.CreateClass('Skill', standalone=True, group=GROUPS.Logic, forUE3=False)
    axiomClass.AddAttribute('Int costMultiplier = 1', text='Multiplier to the basic skill point cost table')
    axiomClass.AddAttribute('LocalizedString skillCategory', text='Category into which the skill should be sorted', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('TypeReference prerequisiteType', modifyFlag=MODIFY_REMOVED, text='You must already know the given skill to learn this skill', allowedClasses='Skill')
    axiomClass.AddAttribute('Int prerequisiteLevel', modifyFlag=MODIFY_REMOVED, text='You must already know the prerequisite skill at the given level to learn this skill', allowedClasses='Skill')
    axiomClass.AddAttribute('TypeReference mAdapterTags', caption='Adapter Tags [TO BE REMOVED]', allowedClasses='Tag', text='tags that must be present for an adapter to be affected by this skill', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('SkillTypeAndLevel', standalone=True, group=GROUPS.Logic, forUE3=False)
    axiomClass.AddAttribute('TypeReference skillTypeID = -1', group=GROUPS.Logic, allowedClasses='Skill', caption='Skill Type', text='The skill type')
    axiomClass.AddAttribute('Int skillLevel = 1', group=GROUPS.Logic, caption='Skill Level', text='The skill level', range=(1, dust.skill.MAX_SKILL_LEVEL))
    axiomClass = ax2.CreateClass('ActiveSkillGainBooster', standalone=True, forUE3=False)
    axiomClass.AddAttribute('Float multiplier', group=GROUPS.Logic, caption='Multiplier', text='Active skill gain multiplier')
    axiomClass.AddAttribute('Int duration', group=GROUPS.Logic, caption='Duration (days)', text='Duration of the booster in days')
    axiomClass = ax2.CreateClass('PassiveSkillGainBooster', standalone=True, forUE3=False)
    axiomClass.AddAttribute('Float multiplier', group=GROUPS.Logic, caption='Multiplier', text='Passive skill gain multiplier')
    axiomClass.AddAttribute('Int duration', group=GROUPS.Logic, caption='Duration (days)', text='Duration of the booster in days')


def PopulateUnitSystemTests(ax2):
    axiomClass = ax2.CreateClass('UnitSystemTest', standalone=True, forUE3=False)
    axiomClass.AddAttribute('Meter length = 11', text='Testing Meter.', group=GROUPS.Physics, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('MeterPerSecond speed = 12', text='Testing MeterPerSecond.', group=GROUPS.Physics)
    axiomClass.AddAttribute('Second time = 13', text='Testing Second.', group=GROUPS.Physics)
    axiomClass.AddAttribute('Kilogram weight = 14', text='Testing Kilogram.', group=GROUPS.Physics)
    axiomClass.AddAttribute('Radian radianAngle = 3.14159', text='Testing Radian.', group=GROUPS.Physics)
    axiomClass.AddAttribute('Degree degreeAngle = 45', text='Testing Degree.', group=GROUPS.Physics)
    axiomClass.AddAttribute('UE3Degree ue3DegreeAngle = 180', text='Testing UE3Degree.', group=GROUPS.Physics)


def PopulateCharacterRewards(ax2):
    axiomClass = ax2.CreateClass('InventoryTypeAndQuantity', standalone=False, forUE3=False)
    axiomClass.AddAttribute('TypeReference type', text="The item's catma type", allowedClasses='InventoryItem', group=GROUPS.Logic)
    axiomClass.AddAttribute('Int quantity', text='Quantity of the given item', group=GROUPS.Logic, range=(0, None))
    axiomClass = ax2.CreateClass('ERace', axiom.Enumerate, standalone=False, group=GROUPS.Logic)
    axiomClass.AddElement(dust.character.GetEditorRaceName(appConst.raceCaldari), description='Caldari')
    axiomClass.AddElement(dust.character.GetEditorRaceName(appConst.raceMinmatar), description='Minmatar')
    axiomClass.AddElement(dust.character.GetEditorRaceName(appConst.raceAmarr), description='Amarr')
    axiomClass.AddElement(dust.character.GetEditorRaceName(appConst.raceGallente), description='Gallente')
    axiomClass = ax2.CreateClass('CharacterSpecialty', standalone=True, forUE3=False)
    axiomClass.AddAttribute('LocalizedString specialtyName', text='Name of this specialty', group=GROUPS.Logic, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('LocalizedString specialtyDescription', text='Description of this specialty', group=GROUPS.Logic, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('ERace race', text='Race to which this specialty applies', group=GROUPS.Logic)
    axiomClass.AddAttribute('Int startingISK', text='Amount of ISK for a starting character of this specialty', group=GROUPS.Logic, range=(0, None))
    axiomClass.AddAttribute('InventoryTypeAndQuantity startingInventory', text='The array of all the items a starting character of this specialty gets when first created', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.Logic)
    axiomClass.AddAttribute('SkillTypeAndLevel startingSkills', text='The array of all the skills a starting character of this specialty should already know when first created', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.Logic)
    axiomClass.AddAttribute('Int startingSkillPoints = 30000', text='Amount of skillpoints for a starting character of this specialty (includes points spent on starting skills!)', group=GROUPS.Logic, range=(0, None))
    axiomClass.AddAttribute('Int skillPointsPerDay = 200', text='Amount of skillpoints for a character of this specialty earned passively per day', group=GROUPS.Logic, range=(0, None))
    axiomClass = ax2.CreateClass('EndOfMatchIskRewards', standalone=True, forUE3=False)
    axiomClass.AddAttribute('Int baseReward=0', text='Base reward for each character', group=GROUPS.Logic)
    axiomClass.AddAttribute('Int consumptionThreshold=0', text='The consumptionThreshold for the beseReward', group=GROUPS.Logic)
    axiomClass.AddAttribute('Float pMax', text='Maximum total rewards as a percentage of consumption', group=GROUPS.Logic, range=(0.0, None))
    axiomClass.AddAttribute('Float pMin', text='Minimum total rewards as a percentage of consumption', group=GROUPS.Logic, range=(0.0, None))
    axiomClass.AddAttribute('Float rate', text='Multiplier controlling the speed that rewards fall', group=GROUPS.Logic, range=(0.0, None))
    axiomClass.AddAttribute('Float breakeven', text='The break-even point; the amount of consumption at which rewards equal consumption', group=GROUPS.Logic, range=(0.0, None))
    axiomClass.AddAttribute('Float percentageSharedEqually', text="Percentage of a team's rewards that are shared equally to all participants", group=GROUPS.Logic, range=(0.0, 1.0))
    axiomClass = ax2.CreateClass('EndOfMatchSkillRewards', standalone=True, forUE3=False)
    axiomClass.AddAttribute('Float falloff', text='Variable indicating how quickly skillpoint rewards fall off.  Zero means no falloff.', group=GROUPS.Logic, range=(0.0, None))
    axiomClass.AddAttribute('Float multiplier', text='Multiplier for active skillpoint gains', group=GROUPS.Logic, range=(0.0, None))
    axiomClass.AddAttribute('Float cycleDuration', text='Duration (in hours) of one diminishing returns cycle for active skill point gains.', group=GROUPS.Logic, range=(0.0, None))


def PopulateInventoryItem(ax2):
    axiomClass = ax2.CreateClass('InventoryCategory', standalone=True, forUE3=False, attributeFlag=attFlag_Precache)
    axiomClass.AddAttribute('LocalizedString categoryName', text='Category name', group=GROUPS.Logic, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('TypeReference parentCategoryID', text='The parent of this category, or null if this is a top level category', group=GROUPS.Logic, allowedClasses='InventoryCategory')
    axiomClass.AddAttribute('Int sortOrder = 0', group=GROUPS.Logic, caption='Sort Order', text='Order in which categories will be displayed on the UI (smaller first)')
    axiomClass.AddAttribute('LocalizedString description', text='Description', group=GROUPS.Logic, modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass = ax2.CreateClass('InventoryItem', standalone=True, forUE3=False, attributeFlag=attFlag_Precache)
    axiomClass.AddAttribute('TypeReference requiredSkill = -1', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, allowedClasses='Skill', caption='(obsolete) Required Skill', text='A character must have this skill to use this module')
    axiomClass.AddAttribute('Int requiredSkillLevel = 1', modifyFlag=MODIFY_REMOVED, group=GROUPS.Logic, caption='(obsolete) Required Skill Level', text='A character must have the required skill at this level to use the module', range=(1, dust.skill.MAX_SKILL_LEVEL))
    axiomClass.AddAttribute('Bool consumable = True', group=GROUPS.Logic, caption='Consumable', text='Is the item consumable? (BPC)')
    axiomClass.AddAttribute('Int stackSize = 1', group=GROUPS.Logic, caption='Stack Size', text="Quantity of items that will be sold in a single 'stack'", range=(1, None))
    axiomClass.AddAttribute('SkillTypeAndLevel requiredSkills', group=GROUPS.Logic, caption='Required Skills', text='List of skills that are required to use this item.', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TypeReference categoryID', text='The category for this item', group=GROUPS.Logic, allowedClasses='InventoryCategory')
    axiomClass.AddAttribute('Int basePrice = 0', text='The base price for this item', caption='Base Price', group=GROUPS.Logic)
    axiomClass.AddAttribute('TypeReference displayAttributes', caption='Display Attributes', text='The lists for display attributes', allowedClasses='AttributeDescriptor', group=GROUPS.Logic, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TypeReference baseVariation', group=GROUPS.Logic, allowedClasses='InventoryItem', text='The type which is the base variation for this type')
    axiomClass.AddAttribute('Int metaLevel = 1', group=GROUPS.Logic, text='Meta level for this type')


def PopulateInputSettings(ax2):
    axiomClass = ax2.CreateClass('InputSettings', standalone=True)
    axiomClass.AddAttribute('Float m_fAimingAnalogueSensitivityMultipliers = 1', group=GROUPS.Content, caption='Aiming Analogue Sensitivity Input Curve Multiplier', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)


def PopulateBetaEvents(ax2):
    axiomClass = ax2.CreateClass('BetaEvent', standalone=False, forUE3=False)
    axiomClass.AddAttribute('String eventName', text='The beta event name', group=GROUPS.Logic)
    axiomClass.AddAttribute('String startDate', text='The beta event start YYYY-MM-DDTHH:MM:SS in UTC, 24H time format.', group=GROUPS.Logic)
    axiomClass.AddAttribute('String endDate', text='The beta event end YYYY-MM-DDTHH:MM:SS in UTC, 24H time format.', group=GROUPS.Logic)
    axiomClass.AddAttribute('String associatedEntitlement', text='The service entitlement required for this beta event', group=GROUPS.Logic)
    axiomClass = ax2.CreateClass('BetaEventSchedule', standalone=True, forUE3=False)
    axiomClass.AddAttribute('BetaEvent eventList', text='The array of all the beta events for the E3 release period', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, group=GROUPS.Logic)


def PopulateAll(ax2):
    PopulateEnums(ax2)
    PopulateUE3Basics(ax2)
    PopulateUnits(ax2)
    PopulateGeneric(ax2)
    PopulateLockOn(ax2)
    PopulateModules(ax2)
    PopulateBarrelRotationInfo(ax2)
    PopulateEntityAndAdapter(ax2)
    PopulatePawn(ax2)
    PopulateVIC(ax2)
    PopulateVIC_Vehicle(ax2)
    PopulateNceVehicleAir(ax2)
    PopulateVIC_Character(ax2)
    PopulateVIC_Installation(ax2)
    PopulateWreckable(ax2)
    PopulateInstallationComponent(ax2)
    PopulateMCC(ax2)
    PopulateProjectile(ax2)
    PopulateOutpost(ax2)
    PopulateOrbitalStrike(ax2)
    PopulateGrenade(ax2)
    PopulateCollisionPhysMeterial(ax2)
    PopulateGameType(ax2)
    PopulateContent2(ax2)
    PopulateWeapon(ax2)
    PopulateHandheldWeapon(ax2)
    PopulateEquipment(ax2)
    PopulateConsoleCommand(ax2)
    PopulateTurret(ax2)
    PopulateDebugStuff(ax2)
    PopulateStaticInfo(ax2)
    PopulateRaceTraits(ax2)
    PopulateNceVehicleSimBase(ax2)
    PopulateNceVehicleSimWheeled(ax2)
    PopulateNceVehicleSimHover(ax2)
    PopulateNceVehicleSimAir(ax2)
    PopulateNceVehicleSimRDV(ax2)
    PopulateNceVehicleSimTrack(ax2)
    PopulateNceVehicleSCV(ax2)
    PopulateNceTurret(ax2)
    PopulateHealingActor(ax2)
    PopulateGameObjective(ax2)
    PopulateCommanderObjective(ax2)
    PopulateSkills(ax2)
    PopulateBenchmarkTest(ax2)
    PopulateUnitSystemTests(ax2)
    PopulateCharacterRewards(ax2)
    PopulateInventoryItem(ax2)
    PopulateInputSettings(ax2)
    PopulateBetaEvents(ax2)