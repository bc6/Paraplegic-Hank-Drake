#Embedded file name: c:\depot\games\branches\release\EVE-TRANQUILITY\eve\common\lib\characterStatsDefinitions.py
import os
from math import sqrt
from appConst import CHARACTER_POSITION_RESPAWN, CHARACTER_POSITION_RUN, CHARACTER_POSITION_DRIVEN, CHARACTER_POSITION_FLOWN
from catma import catmaDB
from sake.app import app
from characterStatsLog import CreateAllStatsFiles, EmptyDelta, STATS_SCHEMA
from codeGeneration import UE3_VAR_PREFIX
UE3_VAR_PREFIX_LOWER = UE3_VAR_PREFIX.lower()
STATNAME_KILLS = 'kills'
STATNAME_DEATHS = 'deaths'
STATNAME_SUICIDES = 'suicides'
STATNAME_WARPOINTS = 'warpointsEarned'
STATNAME_PO_HACKED = 'primaryObjectivesHacked'
STATNAME_SO_HACKED = 'secondaryObjectivesHacked'
STATNAME_MCC_DESTROYED = 'mccsDestroyed'
STATNAME_MCC_SURGE = 'mccsSurged'
STATNAME_IC_DESTROYED = 'installationComponentsDestroyed'
STATNAME_DISTANCE_RUN = 'distanceRun'
STATNAME_DISTANCE_DRIVEN = 'distanceDriven'
STATNAME_DISTANCE_FLOWN = 'distanceFlown'
STATNAME_FAVO_WEAPON = 'favoriteWeapon'
STATNAME_LEAST_FAVO_WEAPON = 'leastFavoriteWeapon'
STATNAME_FAVO_VEHICLE = 'favoriteVehicle'
STATNAME_LEAST_FAVO_VEHICLE = 'leastFavoriteVehicle'
STATNAME_ASSIST_KILLS = 'assistKills'
STATNAME_ASSIST_KILLS_IN_VEHICLE = 'assistKillsInVehicle'
STATNAME_HACKS = 'objectsHacked'
CLASSNAME_MCC = 'DustVehMCC'
CLASSNAME_IC = 'InstallationContent'
CLASSNAME_TURRET = 'TurretContent'
CLASSNAME_CHARACTER = 'CharacterContent'
FAVO_ITEM = 'favoriteItem'
NULL_ITEM = 0
LEAST_FAVO_ITEM = 'leastFavoriteItem'
IN_MATCH_SUFFIX = 'InMatch'
DAMAGE_BY_PERSON = 0
DAMAGE_BY_VEHICLE = 1
characterStats = [(STATNAME_KILLS, 'int'),
 (STATNAME_DEATHS, 'int'),
 (STATNAME_SUICIDES, 'int'),
 (STATNAME_WARPOINTS, 'int'),
 (STATNAME_PO_HACKED, 'int'),
 (STATNAME_SO_HACKED, 'int'),
 (STATNAME_MCC_DESTROYED, 'int'),
 (STATNAME_MCC_SURGE, 'int'),
 (STATNAME_IC_DESTROYED, 'int'),
 (STATNAME_DISTANCE_RUN, 'int'),
 (STATNAME_DISTANCE_DRIVEN, 'int'),
 (STATNAME_DISTANCE_FLOWN, 'int'),
 (STATNAME_FAVO_WEAPON, 'int'),
 (STATNAME_LEAST_FAVO_WEAPON, 'int'),
 (STATNAME_FAVO_VEHICLE, 'int'),
 (STATNAME_LEAST_FAVO_VEHICLE, 'int'),
 (STATNAME_ASSIST_KILLS, 'int'),
 (STATNAME_ASSIST_KILLS_IN_VEHICLE, 'int'),
 (STATNAME_HACKS, 'int')]

def GetVar(event, attributeName):
    return event[attributeName]


def GenerateKillStatDelta(eventList):
    cdb = catmaDB.GetDB()
    delta = EmptyDelta()
    for event in eventList:
        killerID = GetVar(event, 'killerID')
        victimID = GetVar(event, 'victimID')
        killerTypeID = GetVar(event, 'killerPawnTypeID')
        victimTypeID = GetVar(event, 'victimPawnTypeID')
        if not cdb.GetTypeByID(victimTypeID).HasClassName(CLASSNAME_CHARACTER):
            continue
        delta[victimID][STATNAME_DEATHS] += 1
        if killerID == victimID:
            delta[killerID][STATNAME_SUICIDES] += 1
        elif killerID > 0:
            delta[killerID][STATNAME_KILLS] += 1

    return delta


def GenerateAssistKillStatDelta(eventList):
    delta = EmptyDelta()
    for event in eventList:
        instigatorID = event['instigatorID']
        typeID = event['damageType']
        if typeID == DAMAGE_BY_PERSON:
            delta[instigatorID][STATNAME_ASSIST_KILLS] += 1
        elif typeID == DAMAGE_BY_VEHICLE:
            delta[instigatorID][STATNAME_ASSIST_KILLS_IN_VEHICLE] += 1

    return delta


def GenerateWarPointStatDelta(eventList):
    delta = EmptyDelta()
    for event in eventList:
        charID = GetVar(event, 'actorID')
        amount = GetVar(event, 'delta')
        if amount <= 0:
            continue
        delta[charID][STATNAME_WARPOINTS] += amount

    return delta


def GenerateHackStatDelta(eventList):
    delta = EmptyDelta()
    for event in eventList:
        charID = GetVar(event, 'actorID')
        delta[charID][STATNAME_HACKS] += 1

    return delta


def GenerateObjectDestructionStatDelta(eventList):
    delta = EmptyDelta()
    for event in eventList:
        charID = GetVar(event, 'actorID')
        typeID = GetVar(event, 'objectTypeID')
        try:
            typeObj = catmaDB.GetTypeByID(typeID)
        except KeyError:
            app.log.error('Got an ObjectDestruction event for nonexistent type %s!', typeID)
            continue

        if typeObj.HasClassName(CLASSNAME_MCC):
            delta[charID][STATNAME_MCC_DESTROYED] += 1
        elif typeObj.HasClassName(CLASSNAME_IC) or typeObj.HasClassName(CLASSNAME_TURRET):
            delta[charID][STATNAME_IC_DESTROYED] += 1
        else:
            app.log.warning("ObjectDestruction event '%s' wasn't processed for stats!", typeID)

    return delta


def GenerateMCCSurgeStatDelta(eventList):
    delta = EmptyDelta()
    for event in eventList:
        charID = GetVar(event, 'actorID')
        delta[charID][STATNAME_MCC_SURGE] += 1

    return delta


def GenerateMatchWinStatDelta(eventList):
    return EmptyDelta()


def GenerateTeamSelectStatDelta(eventList):
    return EmptyDelta()


def CharPosEqual(a, b):
    if a['actorID'] == b['actorID'] and a['position_x'] == b['position_x'] and a['position_y'] == b['position_y'] and a['position_z'] == b['position_z'] and a['vehicleTypeID'] == b['vehicleTypeID']:
        return True
    return False


def Distance(x1, y1, z1, x2, y2, z2):
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2))


def CharPosDistance(p1, p2):
    return Distance(p1['position_x'], p1['position_y'], p1['position_z'], p2['position_x'], p2['position_y'], p2['position_z'])


playerLastPos = {}

def ProcessCharacterPositionEvents(eventList):
    lastPos = {}
    for k, v in playerLastPos.items():
        lastPos[k] = v

    uniqEvents = []
    for event in eventList:
        actorID = event['actorID']
        last = lastPos[actorID] if actorID in lastPos else None
        if last is None or not CharPosEqual(last, event):
            uniqEvents.append(event)
            lastPos[actorID] = event

    eventList[:] = uniqEvents


def GenerateCharacterPositionStatDelta(eventList):
    delta = EmptyDelta()
    mapNames = {CHARACTER_POSITION_RUN: STATNAME_DISTANCE_RUN,
     CHARACTER_POSITION_DRIVEN: STATNAME_DISTANCE_DRIVEN,
     CHARACTER_POSITION_FLOWN: STATNAME_DISTANCE_FLOWN}
    for event in eventList:
        actorID = event['actorID']
        lastPos = playerLastPos[actorID] if actorID in playerLastPos else None
        vehicleTypeID = event['vehicleTypeID']
        notEqualLast = lastPos is not None and not CharPosEqual(lastPos, event)
        if notEqualLast and vehicleTypeID != CHARACTER_POSITION_RESPAWN:
            delta[actorID][mapNames[vehicleTypeID]] += CharPosDistance(lastPos, event)
        if lastPos is None or notEqualLast:
            playerLastPos[actorID] = event

    for actorID in delta:
        delta[actorID][STATNAME_DISTANCE_RUN] /= 100.0
        delta[actorID][STATNAME_DISTANCE_DRIVEN] /= 100.0
        delta[actorID][STATNAME_DISTANCE_FLOWN] /= 100.0

    return delta


playerWeaponUsage = EmptyDelta()
playerWeaponTime = EmptyDelta()
playerVehicleUsage = EmptyDelta()
playerVehicleTime = EmptyDelta()
playerWeaponTimeInMatch = EmptyDelta()
playerVehicleTimeInMatch = EmptyDelta()

def GetFavoriteAndLeastFavoriteItems(actorID, playerItemTime):
    bFirstItem = True
    favoriteItem, leastFavoriteItem = NULL_ITEM, NULL_ITEM
    for item, itemTime in playerItemTime[actorID].iteritems():
        if bFirstItem:
            favoriteItem = leastFavoriteItem = item
            favoriteTime = leastFavoriteTime = itemTime
            bFirstItem = False
        elif itemTime > favoriteTime:
            favoriteTime = itemTime
            favoriteItem = item
        elif itemTime < leastFavoriteTime:
            leastFavoriteTime = itemTime
            leastFavoriteItem = item

    if leastFavoriteItem == favoriteItem:
        leastFavoriteItem = NULL_ITEM
    return (favoriteItem, leastFavoriteItem)


def GenerateItemUseStatDelta(eventList, playerItemUsage, playerItemTime, playerItemTimeInMatch, favoriteName, leastFavoriteName):
    delta = EmptyDelta()
    for event in eventList:
        actorID = event['actorID']
        typeID = event['typeID']
        dataLogDate = event['dataLogDate']
        currentMatch = event['matchID']
        if playerItemUsage[actorID]['currentMatch'] != currentMatch:
            playerItemUsage[actorID]['currentMatch'] = currentMatch
            if actorID in playerItemTimeInMatch:
                del playerItemTimeInMatch[actorID]
                playerItemUsage[actorID][FAVO_ITEM + IN_MATCH_SUFFIX] = NULL_ITEM
                playerItemUsage[actorID][LEAST_FAVO_ITEM + IN_MATCH_SUFFIX] = NULL_ITEM
        lastItem = playerItemUsage[actorID]['lastItem']
        if lastItem != 0:
            useTime = int(round((dataLogDate - playerItemUsage[actorID]['lastActionTime']) / 10000000.0))
            playerItemTime[actorID][lastItem] += useTime
            playerItemTimeInMatch[actorID][lastItem] += useTime
        playerItemUsage[actorID]['lastItem'] = typeID
        playerItemUsage[actorID]['lastActionTime'] = dataLogDate

    for actorID in playerItemUsage:
        favoriteItem, leastFavoriteItem = GetFavoriteAndLeastFavoriteItems(actorID, playerItemTime)
        if playerItemUsage[actorID][FAVO_ITEM] != favoriteItem:
            playerItemUsage[actorID][FAVO_ITEM] = favoriteItem
            delta[actorID][favoriteName] = favoriteItem
        if playerItemUsage[actorID][LEAST_FAVO_ITEM] != leastFavoriteItem:
            playerItemUsage[actorID][LEAST_FAVO_ITEM] = leastFavoriteItem
            delta[actorID][leastFavoriteName] = leastFavoriteItem

    for actorID in playerItemUsage:
        favoriteItem, leastFavoriteItem = GetFavoriteAndLeastFavoriteItems(actorID, playerItemTimeInMatch)
        if playerItemUsage[actorID][FAVO_ITEM + IN_MATCH_SUFFIX] != favoriteItem:
            playerItemUsage[actorID][FAVO_ITEM + IN_MATCH_SUFFIX] = favoriteItem
            delta[actorID][favoriteName + IN_MATCH_SUFFIX] = favoriteItem
        if playerItemUsage[actorID][LEAST_FAVO_ITEM + IN_MATCH_SUFFIX] != leastFavoriteItem:
            playerItemUsage[actorID][LEAST_FAVO_ITEM + IN_MATCH_SUFFIX] = leastFavoriteItem
            delta[actorID][leastFavoriteName + IN_MATCH_SUFFIX] = leastFavoriteItem

    return delta


def GenerateWeaponUseStatDelta(eventList):
    return GenerateItemUseStatDelta(eventList, playerWeaponUsage, playerWeaponTime, playerWeaponTimeInMatch, STATNAME_FAVO_WEAPON, STATNAME_LEAST_FAVO_WEAPON)


def GenerateVehicleUseStatDelta(eventList):
    return GenerateItemUseStatDelta(eventList, playerVehicleUsage, playerVehicleTime, playerVehicleTimeInMatch, STATNAME_FAVO_VEHICLE, STATNAME_LEAST_FAVO_VEHICLE)


def GenerateObjectSpawnStatDelta(eventList):
    return EmptyDelta()


def GenerateTeamQuitStatDelta(eventList):
    return EmptyDelta()


if __name__ == '__main__':
    sqlFolder = os.path.abspath('../../../../../db/db-eve/schemas/' + STATS_SCHEMA)
    print '\n********* Generating .SQL to %s *********' % sqlFolder
    fileNames = CreateAllStatsFiles(characterStats, sqlFolder)
    for fileName in fileNames:
        print 'touched %s' % fileName

    print '********* Done *********'