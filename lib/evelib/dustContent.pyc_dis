#Embedded file name: c:\depot\games\branches\release\EVE-TRANQUILITY\eve\common\lib\dustContent.py
from extraCatmaConfig import GROUPS
from catma.catmaConfig import ATTRIB_FLAGS, DEFAULT_ATTRIB_FLAGS, MODIFY_TYPE_CHANGED, MODIFY_REMOVED
from catma.axiom import Enumerate

def PopulateShared(ax2):
    axiomClass = ax2.CreateClass('EInitialOscillatorOffset', Enumerate, forUE3=False)
    axiomClass.AddElement('EOO_OffsetRandom')
    axiomClass.AddElement('EOO_OffsetZero')
    axiomClass = ax2.CreateClass('FOscillator', standalone=False, forUE3=False)
    axiomClass.AddAttribute('Float Amplitude')
    axiomClass.AddAttribute('Float Frequency')
    axiomClass.AddAttribute('EInitialOscillatorOffset InitialOffset')
    axiomClass = ax2.CreateClass('ROscillator', standalone=False, forUE3=False)
    axiomClass.AddAttribute('FOscillator Pitch')
    axiomClass.AddAttribute('FOscillator Yaw')
    axiomClass.AddAttribute('FOscillator Roll')
    axiomClass = ax2.CreateClass('VOscillator', standalone=False, forUE3=False)
    axiomClass.AddAttribute('FOscillator X')
    axiomClass.AddAttribute('FOscillator Y')
    axiomClass.AddAttribute('FOscillator Z')
    axiomClass = ax2.CreateClass('ProgrammaticCameraShakeParam', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ROscillator rotOscillation')
    axiomClass.AddAttribute('VOscillator locOscillation')
    axiomClass.AddAttribute('FOscillator fovOscillation')
    axiomClass.AddAttribute('Float duration = 0', text='duration of the camera shake, <0 means indefinite, 0 means no oscillation')
    axiomClass = ax2.CreateClass('CameraShakeParam', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool enabled=true')
    axiomClass.AddAttribute('ProgrammaticCameraShakeParam programmaticParam')
    axiomClass.AddAttribute('Float innerRadius', text='the inner radius within which the shake is played with full scale')
    axiomClass.AddAttribute('Float outerRadius', text='the outer radius where the shake scale is zero')
    axiomClass.AddAttribute('Float fallOff = 1', text='the exponent controlling the falloff between inner and outer radius')
    axiomClass = ax2.CreateClass('SkeletalMeshComponent', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference SkeletalMesh', modifyFlag=MODIFY_TYPE_CHANGED, caption='Skeletal Mesh')
    axiomClass.AddAttribute('ContentReference AnimTreeTemplate', modifyFlag=MODIFY_TYPE_CHANGED, caption='Anim Tree')
    axiomClass.AddAttribute('ContentReference PhysicsAsset', modifyFlag=MODIFY_TYPE_CHANGED, caption='Physics Asset')
    axiomClass.AddAttribute('ContentReference AnimSets', modifyFlag=MODIFY_TYPE_CHANGED, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Anim Set')
    axiomClass.AddAttribute('ContentReference LodAnimTrees', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='LOD Anim Trees')
    axiomClass.AddAttribute('Float MaxDrawDistance = 10000', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL, caption='Max Draw Distance', text='the max draw distance of this component, 0 means always drawn')
    axiomClass.AddAttribute('MaterialModifier MaterialModifiers', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Material Modifiers', text='Modifiers that setup the parameters for the materials used in this mesh component')
    axiomClass = ax2.CreateClass('DeadSkeletalMeshComponent', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference SkeletalMesh', group=GROUPS.Content, caption='Skeletal Mesh')
    axiomClass = ax2.CreateClass('DeadMeshComponent', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference DeadMesh', group=GROUPS.Content, caption='Dead Mesh')
    axiomClass = ax2.CreateClass('AnimTreeLODEntry', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference animTreeTemplate', caption='Anim Tree', text="the anim tree to use, it is a string rather than the animTree instance because we don't want to keep reference to all the tress, which will consume a lot of memory")
    axiomClass.AddAttribute('Float distanceFactor', caption='Distance Factor', text='the world distance beyond which to switch over to the current entry')
    axiomClass = ax2.CreateClass('DustSkeletalMeshComponentAnimTreeLOD', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference SkeletalMesh', caption='Skeletal Mesh')
    axiomClass.AddAttribute('ContentReference PhysicsAsset', caption='Physics Asset')
    axiomClass.AddAttribute('ContentReference AnimSets', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Anim Set')
    axiomClass.AddAttribute('AnimTreeLODEntry mAnimTreeLODs', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='LOD Anim Trees')
    axiomClass.AddAttribute('Float MaxDrawDistance = 10000', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL, caption='Max Draw Distance', text='the max draw distance of this component, 0 means always drawn')
    axiomClass.AddAttribute('MaterialModifier MaterialModifiers', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Material Modifiers', text='Modifiers that setup the parameters for the materials used in this mesh component')
    axiomClass = ax2.CreateClass('PointLightInfo', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Float radius')
    axiomClass.AddAttribute('Float falloff')
    axiomClass.AddAttribute('Float brightness')
    axiomClass.AddAttribute('Float duration')
    axiomClass.AddAttribute('LinearColor colorValue')
    axiomClass = ax2.CreateClass('ForceFeedbackInfo', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Float leftAmplitude')
    axiomClass.AddAttribute('Float rightAmplitude')
    axiomClass.AddAttribute('Float duration')
    axiomClass = ax2.CreateClass('SoundRTCPInfo', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Name rtcpName')
    axiomClass.AddAttribute('Name socketName')
    axiomClass = ax2.CreateClass('WeaponMuzzleFlashInfo', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('String socketName')
    axiomClass.AddAttribute('ContentReference particleTemplate', caption='Muzzle Flash Effect', modifyFlag=MODIFY_TYPE_CHANGED, text='effect spawned at the muzzle flash location and moves with the carrier')
    axiomClass.AddAttribute('ContentReference particleTemplate1stPerson', caption='Muzzle Flash Effect 1st Person', text='effect spawned at the muzzle flash location and moves with the carrier - 1st person')
    axiomClass.AddAttribute('ContentReference particleHoldPosition', caption='Muzzle Flash Effect - Hold Position (Vehicle Only)', text="effect spawned at the muzzle flash location but doesn't move with the carrier, should only use for vehicle effectors")
    axiomClass.AddAttribute('ContentReference particleCarrierEffect', caption='Carrier Attched Effect - Hold Position (Vehicle Only)', text="effect spawned at the origin of the carrier but doesn't move with the carrier, should only use for vehicle effectors")
    axiomClass.AddAttribute('Bool loop = False')
    axiomClass.AddAttribute('Float timeLength')
    axiomClass.AddAttribute('Float timeLengthHoldPosition')
    axiomClass.AddAttribute('Float timeLengthCarrierEffect')
    axiomClass.AddAttribute('Float effectScale = 1')
    axiomClass.AddAttribute('Vector offsetFromWeapon')
    axiomClass = ax2.CreateClass('WeaponSeizeInfo', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name socketName')
    axiomClass.AddAttribute('ContentReference particleTemplate')
    axiomClass.AddAttribute('ContentReference particleTemplate1stPerson')
    axiomClass = ax2.CreateClass('WeaponFireIntervalInfo', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool needEffectBetweenFires = False')
    axiomClass.AddAttribute('Name socketName')
    axiomClass.AddAttribute('Float triggerTimer = 0.1', caption='trigger timer (Seconds)', text='how long this effect will be triggered after a fire')
    axiomClass.AddAttribute('ContentReference particleTemplate')
    axiomClass = ax2.CreateClass('WeaponBeamEffectInfo', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('String socketName')
    axiomClass.AddAttribute('ContentReference particleTemplate')
    axiomClass.AddAttribute('ContentReference particleTemplate1stPerson')
    axiomClass.AddAttribute('String BeamLenghtParameter')
    axiomClass.AddAttribute('String BeamColourParameter')
    axiomClass.AddAttribute('Meter BeamLength', caption='Beam length (Meters)', text='the max laser effect distance')
    axiomClass = ax2.CreateClass('WeaponOverHeatInfo', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name overHeatingSocketName')
    axiomClass.AddAttribute('Name overHeatingScaleParameter')
    axiomClass.AddAttribute('ContentReference overHeatingParticleTemplate')
    axiomClass.AddAttribute('ContentReference overHeatingParticleTemplate1stPerson')
    axiomClass.AddAttribute('Name passedOperationalLimitSocketName')
    axiomClass.AddAttribute('Name passedOperationalLimitScaleParameter')
    axiomClass.AddAttribute('ContentReference passedOperationalLimitParticleTemplate')
    axiomClass = ax2.CreateClass('WeaponChargeInfo', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name m_ChargingSocketName', caption='Charging Socket Name', text='Name of socket to attach the charging effect to')
    axiomClass.AddAttribute('Name m_ChargingParameterName', caption='Charging Parameter Name', text='Name of the parameter for passing the charging amount to the effect')
    axiomClass.AddAttribute('ContentReference m_pChargingEffectTemplate', caption='Charging Effect Template', text='Particle effect template to use while charging')
    axiomClass.AddAttribute('Name m_OverChargedSocketName', caption='Over-Charged Socket Name', text='Name of socket to attach the over-charged effect to')
    axiomClass.AddAttribute('ContentReference m_pOverChargedEffectTemplate', caption='Over Charged Effect Template', text='Particle effect template to use when over-charged')
    axiomClass.AddAttribute('ContentReference m_pOverChargedEffectTemplate1stPerson', caption='Over Charged Effect Template', text='Particle effect template to use when over-charged 1st person')
    axiomClass = ax2.CreateClass('WeaponMuzzleLightInfo', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('PointLightInfo mPointLight')
    axiomClass.AddAttribute('Float frequency')
    axiomClass.AddAttribute('Float exposure')
    axiomClass.AddAttribute('Vector offsetFromWeapon')
    axiomClass = ax2.CreateClass('WeaponCameraShake', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool enable = True', text='Whether to play camera shake when firing', caption='enable camera shake when firing')
    axiomClass.AddAttribute('Float scale = 0.3', caption='intensity scale of the camera shaking')
    axiomClass.AddAttribute('Float duration = 0.2', caption='time duration (in seconds) of the camera shaking')
    axiomClass = ax2.CreateClass('EDustPhysicalMaterialType', Enumerate)
    axiomClass.AddElement('DPMT_Default')
    axiomClass.AddElement('DPMT_MetalHollow')
    axiomClass.AddElement('DPMT_MetalSolid')
    axiomClass.AddElement('DPMT_Flesh')
    axiomClass.AddElement('DPMT_Corpse')
    axiomClass.AddElement('DPMT_Dirt')
    axiomClass.AddElement('DPMT_Mud')
    axiomClass.AddElement('DPMT_Wood')
    axiomClass.AddElement('DPMT_Grass')
    axiomClass.AddElement('DPMT_Gravel')
    axiomClass.AddElement('DPMT_Concrete')
    axiomClass.AddElement('DPMT_Water')
    axiomClass.AddElement('DPMT_Glass')
    axiomClass.AddElement('DPMT_Asphalt')
    axiomClass.AddElement('DPMT_Shield')
    axiomClass.AddElement('DPMT_Armor')
    axiomClass.AddElement('DPMT_MCC')
    axiomClass.AddElement('DPMT_MCC_Shield')
    axiomClass = ax2.CreateClass('SurfaceHitEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('EDustPhysicalMaterialType materialType')
    axiomClass.AddAttribute('ContentReference effect', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Float scale = 1')
    axiomClass = ax2.CreateClass('EVehicleCameraAnimationType', Enumerate)
    axiomClass.AddElement('VCA_SURFACE_RUMBLE')
    axiomClass.AddElement('VCA_ENGINE')
    axiomClass.AddElement('VCA_ENGINE_THRUST')
    axiomClass = ax2.CreateClass('EWeaponEventType', Enumerate)
    axiomClass.AddElement('WE_Fire')
    axiomClass.AddElement('WE_Reload')
    axiomClass.AddElement('WE_PostReload')
    axiomClass.AddElement('WE_Equip')
    axiomClass.AddElement('WE_PutDown')
    axiomClass.AddElement('WE_Activate')
    axiomClass.AddElement('WE_StopFire')
    axiomClass.AddElement('WE_Seize')
    axiomClass.AddElement('WE_StartCharging')
    axiomClass.AddElement('WE_OverCharged')
    axiomClass.AddElement('WE_Zoom')
    axiomClass.AddElement('WE_UnZoom')
    axiomClass.AddElement('WE_Normal')
    axiomClass.AddElement('WE_Empty')
    axiomClass.AddElement('WE_StartFire')
    axiomClass.AddElement('WE_StopReload')
    axiomClass.AddElement('WE_StopCharging')
    axiomClass.AddElement('WE_Melee')
    axiomClass.AddElement('WE_MeleeStop')
    axiomClass = ax2.CreateClass('WeaponSound', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('EWeaponEventType eventType')
    axiomClass.AddAttribute('ContentReference sound', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Bool localOnly = True')
    axiomClass.AddAttribute('String boneName')
    axiomClass = ax2.CreateClass('TracerParam', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference tracerMesh', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Float speed = 18000')
    axiomClass.AddAttribute('Float accelRate = 12000')
    axiomClass.AddAttribute('Float maxSpeed = 20000')
    axiomClass.AddAttribute('Vector meshScale')
    axiomClass.AddAttribute('Vector spawnOffset')
    axiomClass.AddAttribute('Int spawnInterval = 1')
    axiomClass.AddAttribute('LinearColor color')
    axiomClass.AddAttribute('ContentReference tracerTrail', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('ContentReference tracerTrail1stPerson', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass = ax2.CreateClass('VehicleEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name m_EffectStartName', tetx='Tag used to trigger the effect', caption='Start Name')
    axiomClass.AddAttribute('Name m_EffectEndName', tetx='Tag used to kill the effect', caption='End Name')
    axiomClass.AddAttribute('Name m_EffectSocketName', tetx='Socket to attach to', caption='Socket Name')
    axiomClass.AddAttribute('Bool m_bRestartRunning = True', text='If true should restart running effects, if false will just keep running', caption='Restart Running')
    axiomClass.AddAttribute('Bool m_bHighDetailOnly = False', text='Whether the effect should only run in high detail', caption='High Detail Only')
    axiomClass.AddAttribute('Float m_fScale = 1', text='Effect scale', caption='Effect Scale')
    axiomClass.AddAttribute('ContentReference m_pEffectTemplate', text='Template to use', caption='Template')
    axiomClass = ax2.CreateClass('VehicleDamageEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference m_pEffectTemplate', text='Template to use', caption='Template')
    axiomClass.AddAttribute('Name m_EffectSocketName', tetx='Socket to attach to', caption='Socket Name')
    axiomClass = ax2.CreateClass('VehicleAirThrusterEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference pEffectTemplate', text='Particle Effect to use', caption='Particle effect')
    axiomClass.AddAttribute('ContentReference pDeadEffectTemplate', text='Particle Effect to use when dead', caption='Dead Particle effect')
    axiomClass.AddAttribute('Name nAttachPoint', text='Attach Socket', caption='Socket')
    axiomClass.AddAttribute('Name nThrustParameter', text='Thrust parameter', caption='Thrust Scale parameter')
    axiomClass.AddAttribute('Name nInverseThrustParameter', text='Inv thrust parameter', caption='Inverse Thrust Scale parameter')
    axiomClass.AddAttribute('Float fThrustMin = 0', text='Min thrust', caption='Min thrust range')
    axiomClass.AddAttribute('Float fThrustMax = 1', text='Max thrust', caption='Max thrust range')
    axiomClass.AddAttribute('Name nVelocityParameter', text='Velocity parameter', caption='Velocity Scale parameter')
    axiomClass.AddAttribute('Float fVelocityMin = 0', text='Min velocity', caption='Min velocity range')
    axiomClass.AddAttribute('Float fVelocityMax = 6000', text='Max velocity', caption='Max velocity range')
    axiomClass.AddAttribute('Float fChangeRatePerSecond = 1', text='ChangeRatePerSecond', caption='Change rate per second')
    axiomClass = ax2.CreateClass('VehicleAirJetWashEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('ContentReference pEffectTemplate', text='Particle Effect to use', caption='Particle effect')
    axiomClass.AddAttribute('Name nLocationParameter', text='Location Parameter', caption='Location parameter')
    axiomClass.AddAttribute('Name nForwardDustParameter', text='Forward Dust Parameter', caption='Forward dust parameter')
    axiomClass.AddAttribute('Name nForwardRollParameter', text='Forward Roll Parameter', caption='Forward roll parameter')
    axiomClass.AddAttribute('Name nBackwardDustParameter', text='Backward Dust Parameter', caption='Backward dust parameter')
    axiomClass.AddAttribute('Name nBackwardRollParameter', text='Backward Roll Parameter', caption='Backward roll parameter')
    axiomClass.AddAttribute('Name nRandomDustParameter', text='Random Dust Parameter', caption='Random dust parameter')
    axiomClass.AddAttribute('Name nRandomRollParameter', text='Random Roll Parameter', caption='Random roll parameter')
    axiomClass.AddAttribute('Float fEngineRotMin = 0', text='Min Engine Rotation', caption='Min Engine Rotation')
    axiomClass.AddAttribute('Float fEngineRotMax = 180', text='Max Engine Rotation', caption='Max Engine Rotation')
    axiomClass.AddAttribute('Float fForwardMin = 0', text='Min dust forward', caption='Min dust forward')
    axiomClass.AddAttribute('Float fForwardMax = 1', text='Max dust forward', caption='Max dust forward')
    axiomClass.AddAttribute('Float fBackwardMin = 0', text='Min dust backward', caption='Min dust backward')
    axiomClass.AddAttribute('Float fBackwardMax = -1', text='Max dust backward', caption='Max dust backward')
    axiomClass.AddAttribute('Float fRandomMin = -0.25', text='Min dust random', caption='Min dust random')
    axiomClass.AddAttribute('Float fRandomMax = 0.25', text='Max dust random', caption='Max dust random')
    axiomClass.AddAttribute('Float fMinHeight = 0.0', text='Min height', caption='Min Height')
    axiomClass.AddAttribute('Float fMaxHeight = 6000.0', text='Max height', caption='Max Height')
    axiomClass = ax2.CreateClass('VehicleCollisionResponse', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool m_bEnabled = false', caption='Enable Collision Response')
    axiomClass.AddAttribute('ProgrammaticCameraShakeParam m_CollisionCameraShake', caption='Collision Camera Shake')
    axiomClass.AddAttribute('ForceFeedbackInfo m_CollisionFFWaveform', caption='Collision Force Feedback')
    axiomClass.AddAttribute('ForceFeedbackInfo m_ScrapingFFWaveform', caption='Scraping Force Feedback')
    axiomClass.AddAttribute('Float m_fMinCollisionSize = 1.0', range=(0, None), caption='Minimum size of a collision for feedback to take effect')
    axiomClass.AddAttribute('Float m_fMaxCollisionSize = 10.0', range=(0, None), caption='Maximum size of a colision')
    axiomClass.AddAttribute('MeterPerSecond m_fMinimumSpeedForScraping = 10.8', range=(0, None), caption='Min vehicle speed for Scraping (kmph)')
    axiomClass.AddAttribute('Float m_fRumbleScaleFactor = 4.0', range=(1, None), caption='Multiplier over collision scale for Force Feedback')
    axiomClass.AddAttribute('Float m_fCameraScaleFactor = 3.0', range=(1, None), caption='Multiplier over collision scale for Camera Shake')
    axiomClass = ax2.CreateClass('WheelEffect', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('EDustPhysicalMaterialType m_aMaterialTypes', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Name m_EffectTrigger', text='Tag used to trigger the effect', caption='Trigger name')
    axiomClass.AddAttribute('ContentReference m_WheelParticleSystem', text='Particle Effect to use', caption='Particle effect')
    axiomClass = ax2.CreateClass('TurretConstraint', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Bool bLimitYaw = false', text='Whether to limit the rotation on yaw', caption='Limit Yaw')
    axiomClass.AddAttribute('Bool bLimitPitch = false', text='Whether to limit the rotation on pitch', caption='Limit Pitch')
    axiomClass.AddAttribute('Float fPitchMin = -180', text='The min value of pitch rotation', caption='Min Pitch', range=(-180.0, 180.0))
    axiomClass.AddAttribute('Float fPitchMax = 180', text='The max value of pitch rotation', caption='Max Pitch', range=(-180.0, 180.0))
    axiomClass.AddAttribute('Float fYawMin = -180', text='The min value of yaw rotation', caption='Min Yaw', range=(-180.0, 180.0))
    axiomClass.AddAttribute('Float fYawMax = 180', text='The max value of yaw rotation', caption='Max Yaw', range=(-180.0, 180.0))
    axiomClass = ax2.CreateClass('TurretAnimLink', standalone=False, forUE3=False, group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.NOT_NULL)
    axiomClass.AddAttribute('Name m_TurretSocketName', caption='Turret Socket Name')
    axiomClass.AddAttribute('Name m_DriverSocketName', caption='Driver Socket Name')
    axiomClass.AddAttribute('Name m_TurretPitchControllerName', caption='Turret Pitch Controller Name')
    axiomClass.AddAttribute('Name m_TurretYawControllerName', caption='Turret Yaw Controller Name')
    axiomClass.AddAttribute('ContentReference m_DriverAnimSet', caption='Driver Animation Set')
    axiomClass.AddAttribute('ContentReference m_DriverAnimTree', caption='Driver Animation Tree')
    axiomClass.AddAttribute('TurretConstraint m_TurretConstraint', caption='Turret constraint props')
    axiomClass.AddAttribute('Bool m_bShowMeshInFirstPersonCamera = true', caption='Show mesh in first person camera view')
    axiomClass = ax2.CreateClass('CylinderComponent', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name socket', caption='Attach To Socket')
    axiomClass.AddAttribute('Float radius = 150')
    axiomClass.AddAttribute('Float height = 400')
    axiomClass = ax2.CreateClass('EHackPanelState', Enumerate, forUE3=True)
    axiomClass.AddElement('HackPanelState_Attackable')
    axiomClass.AddElement('HackPanelState_Defendable')
    axiomClass.AddElement('HackPanelState_Contested')
    axiomClass.AddElement('HackPanelState_Offline')
    axiomClass = ax2.CreateClass('HackPanelMaterialForState', standalone=False, forUE3=False)
    axiomClass.AddAttribute('EHackPanelState State')
    axiomClass.AddAttribute('ContentReference Material')
    axiomClass = ax2.CreateClass('HackPanel', standalone=True, forUE3=False)
    axiomClass.AddAttribute('ContentReference SkeletalMesh', group=GROUPS.Content, caption='Skeletal Mesh')
    axiomClass.AddAttribute('ContentReference PhysicsAsset', group=GROUPS.Content, caption='Physics Asset')
    axiomClass.AddAttribute('HackPanelMaterialForState Materials', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float InteractiveCylinderRadius = 150', group=GROUPS.Content, caption='Interactive Cylinder Component Radius')
    axiomClass.AddAttribute('Float InteractiveCylinderHeight = 150', group=GROUPS.Content, caption='Interactive Cylinder Component Height')
    axiomClass = ax2.CreateClass('HackPanelLink', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name socket', caption='Attach To Socket')
    axiomClass.AddAttribute('TypeReference hackPanelType = -1', allowedClasses='HackPanel', caption='Hack Panel Type Reference')


def PopulateContent2(ax2):
    PopulateShared(ax2)
    axiomClass = ax2.CreateClass('AudioMaterialSwitch', standalone=False, group=GROUPS.Content)
    axiomClass.AddAttribute('EDustPhysicalMaterialType materialType')
    axiomClass.AddAttribute('String switchGroup')
    axiomClass.AddAttribute('String switchName')
    axiomClass.AddAttribute('Name socketName')
    axiomClass = ax2.CreateClass('SurfaceHitSound', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('EDustPhysicalMaterialType materialType')
    axiomClass.AddAttribute('ContentReference sound', modifyFlag=MODIFY_TYPE_CHANGED)
    axiomClass.AddAttribute('Bool isDelayed = false')
    axiomClass = ax2.CreateClass('VehicleCameraAnimation', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('EVehicleCameraAnimationType eCameraAnimType', caption='Vehicle camera animation type')
    axiomClass.AddAttribute('ContentReference pCameraAnim', caption='Camera animation reference')
    axiomClass.AddAttribute('Float fMinPlaySpeed = 0', caption='Min speed')
    axiomClass.AddAttribute('Float fMaxPlaySpeed = 1', caption='Max speed')
    axiomClass.AddAttribute('Float fMinPlayScale = 1', caption='Min scale')
    axiomClass.AddAttribute('Float fMaxPlayScale = 1', caption='Max scale')
    axiomClass = ax2.CreateClass('EVehicleLightType', Enumerate, forUE3=True)
    axiomClass.AddElement('VLT_Point', description='Point Light')
    axiomClass.AddElement('VLT_Spot', description='Spot Light')
    axiomClass = ax2.CreateClass('VehicleLightInfo', standalone=False, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('EVehicleLightType m_eLightType = VLT_Point', caption='Light Type', text='Which type of light to use')
    axiomClass.AddAttribute('Name m_LightSocketName', caption='Light Socket Name', text='Socket to attach the light to')
    axiomClass.AddAttribute('Int m_iLightColourR = 255', range=(0, 255), caption='Light Colour Red Channel', text='Light colour red channel')
    axiomClass.AddAttribute('Int m_iLightColourG = 255', range=(0, 255), caption='Light Colour Green Channel', text='Light colour green channel')
    axiomClass.AddAttribute('Int m_iLightColourB = 255', range=(0, 255), caption='Light Colour Blue Channel', text='Light colour blue channel')
    axiomClass.AddAttribute('Float m_fLightBrightness = 1.0', range=(0.1, 16.0), caption='Light Max Brightness', text='Light max brightness')
    axiomClass.AddAttribute('Meter m_fLightRadius = 5.0', range=(0.0, 100.0), caption='Light Radius', text='Light radius')
    axiomClass.AddAttribute('Float m_fLightFallOff = 0.5', range=(0.1, 5.0), caption='Light Fall Off Exponent', text='Light fall off exponent')
    axiomClass.AddAttribute('Meter m_fLightFarClipDist = 30.0', range=(0.1, 100.0), caption='Light Far Clip Distance', text='Light far clip distance')
    axiomClass.AddAttribute('Bool m_bSpecularEnabled = False', caption='Specular Enabled', text='Whether specular lighting is enabled for this light')
    axiomClass.AddAttribute('Float m_fLightInnerCone = 20.0', range=(0.0, 89.0), caption='Light Inner Cone Angle', text='(Spot lights only) Light inner cone angle')
    axiomClass.AddAttribute('Float m_fLightOuterCone = 25.0', range=(0.0, 89.0), caption='Light Outer Cone Angle', text='(Spot lights only) Light outer cone angle')
    axiomClass = ax2.CreateClass('VehicleContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mMesh')
    axiomClass.AddAttribute('DeadMeshComponent mDeadMesh')
    axiomClass.AddAttribute('TaggedSound m_aVehicleSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SurfaceHitSound m_aVehicleImpactSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('AudioMaterialSwitch m_aAudioMaterialSwitches', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SoundRTCPInfo mEngineSoundRTCPInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('CurveReference mEngineLoadCurve', text='This curve simulates engine load based on player acceleration', uemodifier='norep', group=GROUPS.Content, caption='Engine Load Curve')
    axiomClass.AddAttribute('WheelEffect m_aWheelEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('VehicleEffect m_aVehicleEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Effects')
    axiomClass.AddAttribute('VehicleDamageEffect m_aVehicleDamageEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Damage Effects')
    axiomClass.AddAttribute('ContentReference m_pBigExplosionTemplate', caption='Explosion Effect')
    axiomClass.AddAttribute('Float m_fBigExplosionTime = 15', caption='Explosion Effect Time (in seconds)')
    axiomClass.AddAttribute('TurretAnimLink m_aTurretAnimLinks', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, uemodifier='private transient', caption='Turret Animation Link')
    axiomClass.AddAttribute('CylinderComponent mInteractiveComponents', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED | ATTRIB_FLAGS.IS_SET, caption='Interactive Components')
    axiomClass.AddAttribute('VehicleCollisionResponse m_VehicleCollisonResponce', attributeFlag=DEFAULT_ATTRIB_FLAGS, uemodifier='private transient', caption='Vehicle Collision Response')
    axiomClass.AddAttribute('VehicleCameraAnimation m_aCameraAnims', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Camera animations for vehicles')
    axiomClass.AddAttribute('VehicleLightInfo m_aVehicleLightInfos', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Vehicle Lights', text='Lights to create on the vehicles')
    axiomClass = ax2.CreateClass('VehicleAirContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('VehicleAirThrusterEffect m_aThrusterEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Thruster effects')
    axiomClass.AddAttribute('VehicleAirJetWashEffect m_JetWashEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS, caption='jetWash effect')
    axiomClass = ax2.CreateClass('VehicleMCCContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('TaggedEffect mMccEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TaggedSound mMccSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('CharacterContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mHandMesh', caption='1P hand mesh')
    axiomClass.AddAttribute('SkeletalMeshComponent mThirdPersonHandMesh', caption='3p hand mesh')
    axiomClass.AddAttribute('DustSkeletalMeshComponentAnimTreeLOD mMeshCombatMode', caption='Mesh in Combat Mode')
    axiomClass.AddAttribute('DustSkeletalMeshComponentAnimTreeLOD mMeshDoodleMode', caption='Mesh in Doodle Mode')
    axiomClass.AddAttribute('DustSkeletalMeshComponentAnimTreeLOD mMeshDeathMode', caption='Mesh in Death Mode')
    axiomClass.AddAttribute('ContentReference mCombatAnimSetsForStandingCharacter', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 3P character (Standing)')
    axiomClass.AddAttribute('ContentReference mCombatAnimSetsForCrouchCharacter', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 3P character (Crouch)')
    axiomClass.AddAttribute('TaggedSound mCharacterSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SurfaceHitSound mFootStepSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SurfaceHitSound mJumpingSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SurfaceHitSound mLandingSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Float mTinnitusDecay = 1')
    axiomClass.AddAttribute('ContentReference mFastFalling3PAnimTreeTemplate', caption='3P Fast Falling Anim Tree', text='the anim tree to used when this pawn is in 3P fast falling state')
    axiomClass = ax2.CreateClass('DustMeleeContent', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('SurfaceHitEffect mImpactEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SurfaceHitSound mImpactSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TaggedSound mMeleeSound', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('Meter impactSoundCullDistance = 10', range=(-1, 5000), text='cull distance for impact sound, specify -1 to disable the culling')
    axiomClass.AddAttribute('Meter effectCullDistance = 100', range=(-1, 5000), text='cull distance for impact effect, specify -1 to disable the culling')
    axiomClass.AddAttribute('SkeletalMeshComponent mFirstPersonMeleeWeaponMesh', group=GROUPS.Content, caption='1P Melee Weapon Mesh')
    axiomClass.AddAttribute('SkeletalMeshComponent mThirdPersonMeleeWeaponMesh', group=GROUPS.Content, caption='3P Melee Weapon Mesh')
    axiomClass.AddAttribute('Name mFirstPersonMeleeWeaponSocket', group=GROUPS.Content, caption='1P Melee Weapon Socket')
    axiomClass.AddAttribute('Name mThirdPersonMeleeWeaponSocket', group=GROUPS.Content, caption='3P Melee Weapon Socket')
    axiomClass.AddAttribute('Bool mHide1PWeaponMesh = false', group=GROUPS.Content, caption='Hide 1P weapon when melee')
    axiomClass = ax2.CreateClass('DustInertiaCancellerContent', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Meter mInertiaCancellerVelocityLimit=10', range=(0, None), group=GROUPS.Physics, caption='Velocity Threshold to Activate Inertia Canceller (Meter/Sec)')
    axiomClass.AddAttribute('Meter mInertiaCancellerHeightLimit=5', range=(0, None), group=GROUPS.Physics, caption='Height Threshold to Activate Inertia Canceller (Meter)')
    axiomClass.AddAttribute('Float mInertiaCancellerLifeTime=2', range=(0, None), group=GROUPS.Physics, caption='Time for Inertia Canceller to Work After Activated')
    axiomClass.AddAttribute('Float mLandingSequenceLength=1.5', range=(0, None), group=GROUPS.Physics, caption='Landing Time with Inertia Canceller Activated')
    axiomClass.AddAttribute('Float mLockViewAngle = -60', range=(-90, 90), group=GROUPS.Physics, caption='The pitch value to lock camera view when fast falling')
    axiomClass.AddAttribute('ContentReference mFirstPersonInertiaCancellerShieldEffects', group=GROUPS.Content, caption='1P Person Inertia Canceller Shield Effects', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('ContentReference mThirdPersonInertiaCancellerShieldEffects', group=GROUPS.Content, caption='3P Person Inertia Canceller Shield Effects', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('ContentReference mFirstPersonInertiaCancellerImpactEffects', group=GROUPS.Content, caption='1P Person Inertia Canceller Impact Effects', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('ContentReference mThirdPersonInertiaCancellerImpactEffects', group=GROUPS.Content, caption='3P Person Inertia Canceller Impact Effects', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass = ax2.CreateClass('InstallationContent', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mMesh', caption='Installation Mesh', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('SkeletalMeshComponent mSimpleMesh', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED, modifyFlags=MODIFY_REMOVED)
    axiomClass.AddAttribute('SkeletalMeshComponent mBaseMesh', caption='Installation Base Mesh', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('TypeReference mExplosionType = -1', allowedClasses='ExplosionContent', text='The type id used to spawn installation explosion', group=GROUPS.Content, caption='Explosion Type ID', uemodifier='const')
    axiomClass.AddAttribute('TaggedSound mInstallationSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TaggedEffect mInstallationEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('CylinderComponent mInteractiveComponents', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED | ATTRIB_FLAGS.IS_SET, caption='Interactive Components')
    axiomClass.AddAttribute('HackPanelLink mHackPanels', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED | ATTRIB_FLAGS.IS_SET, caption='Hack Panels')
    axiomClass.AddAttribute('TurretAnimLink m_aTurretAnimLinks', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED | ATTRIB_FLAGS.IS_SET, uemodifier='private transient', caption='Turret Animation Link')
    axiomClass = ax2.CreateClass('InstallationBaseContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mMesh')
    axiomClass.AddAttribute('SkeletalMeshComponent mSimpleMesh')
    axiomClass.AddAttribute('TaggedSound mInstallationSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TaggedEffect mInstallationEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('CylinderComponent mInteractiveComponents', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED | ATTRIB_FLAGS.IS_SET, caption='Interactive Components')
    axiomClass.AddAttribute('HackPanelLink mHackPanels', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED | ATTRIB_FLAGS.IS_SET, caption='Hack Panels')
    axiomClass.AddAttribute('TurretAnimLink m_aTurretAnimLinks', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, uemodifier='private transient', caption='Turret Animation Link')
    axiomClass = ax2.CreateClass('WeaponContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mWeaponMesh')
    axiomClass = ax2.CreateClass('EquipmentContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mFirstPersonEquipmentMesh', caption='1P equipment mesh')
    axiomClass.AddAttribute('SkeletalMeshComponent mThirdPersonEquipmentMesh', caption='3P equipment mesh')
    axiomClass = ax2.CreateClass('EHandledWeaponType', Enumerate, forUE3=True)
    axiomClass.AddElement('HW_LAR')
    axiomClass.AddElement('HW_LSR')
    axiomClass.AddElement('HW_RL')
    axiomClass.AddElement('HW_INJ')
    axiomClass.AddElement('HW_GRENADE')
    axiomClass.AddElement('HW_SMG')
    axiomClass.AddElement('HW_HMG')
    axiomClass.AddElement('HW_HSR')
    axiomClass.AddElement('HW_OMS')
    axiomClass.AddElement('HW_EQP')
    axiomClass.AddElement('HW_NONE')
    axiomClass = ax2.CreateClass('EWeaponCamereAnimationType', Enumerate, forUE3=True)
    axiomClass.AddElement('WCA_Walk')
    axiomClass.AddElement('WCA_Run')
    axiomClass.AddElement('WCA_Sprint')
    axiomClass.AddElement('WCA_ZoomWalk')
    axiomClass.AddElement('WCA_ZoomRun')
    axiomClass.AddElement('WCA_Fire')
    axiomClass.AddElement('WCA_Charging')
    axiomClass.AddElement('WCA_OverCharged')
    axiomClass.AddElement('WCA_Seize')
    axiomClass.AddElement('WCA_ZoomFire')
    axiomClass.AddElement('WCA_Activate')
    axiomClass.AddElement('WCA_Reload')
    axiomClass.AddElement('WCA_ReloadLoop')
    axiomClass.AddElement('WCA_ReloadEnd')
    axiomClass.AddElement('WCA_HandleJam_Start')
    axiomClass.AddElement('WCA_HandleJam_Loop')
    axiomClass.AddElement('WCA_HandleJam_End')
    axiomClass.AddElement('WCA_JumpUp')
    axiomClass.AddElement('WCA_JumpFall')
    axiomClass.AddElement('WCA_JumpDown')
    axiomClass.AddElement('WCA_FastFall')
    axiomClass.AddElement('WCA_InertiaCancellerLanding')
    axiomClass.AddElement('WCA_InertiaCancellerFall')
    axiomClass.AddElement('WCA_Stand2Crouch')
    axiomClass.AddElement('WCA_Crouch2Stand')
    axiomClass.AddElement('WCA_Melee')
    axiomClass.AddElement('WCA_OnLadder')
    axiomClass.AddElement('WCA_None')
    axiomClass = ax2.CreateClass('WeaponCameraAnimation', standalone=False, forUE3=False)
    axiomClass.AddAttribute('EWeaponCamereAnimationType cameraAnimType', caption='Camera animation type')
    axiomClass.AddAttribute('ContentReference cameraAnim', caption='Camera animation reference')
    axiomClass = ax2.CreateClass('TurretWeaponCameraAnimation', standalone=False, forUE3=False)
    axiomClass.AddAttribute('EWeaponEventType weaponEventType', caption='Weapon event type')
    axiomClass.AddAttribute('ContentReference cameraAnim', caption='Camera animation reference for 1st person', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('ContentReference cameraAnimFirstPerson', caption='Camera animation reference for 1st person')
    axiomClass.AddAttribute('ContentReference cameraAnimThirdPerson', caption='Camera animation reference for 3rd person')
    axiomClass = ax2.CreateClass('HandheldWeaponContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name mFirstPersonWeaponSocketName', caption='Weapon attach socket name')
    axiomClass.AddAttribute('ContentReference mAnimSetsForArm', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 1P arm holding this weapon')
    axiomClass.AddAttribute('ContentReference mAnimSetsForArmWhenWeaponEmpty', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 1P arm holding the emptied weapon')
    axiomClass.AddAttribute('WeaponCameraAnimation mCameraAnims', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Camera animations for weapon')
    axiomClass = ax2.CreateClass('GrenadeContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('Name mFirstPersonWeaponSocketName', caption='Socket for greande to attach on first person')
    axiomClass.AddAttribute('ContentReference mAnimSetsForArm', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 1P arm holding this weapon')
    axiomClass.AddAttribute('WeaponCameraAnimation mCameraAnims', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Camera animations for weapon')
    axiomClass.AddAttribute('SkeletalMeshComponent mFirstPersonGrenadeMesh', caption='1P grenade mesh')
    axiomClass.AddAttribute('SkeletalMeshComponent mThirdPersonGrenadeMesh', caption='3P grenade mesh')
    axiomClass = ax2.CreateClass('TurretWeaponContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('TurretWeaponCameraAnimation mCameraAnims', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Camera animations for turret weapon')
    axiomClass = ax2.CreateClass('MorphsetEntry', standalone=False, forUE3=False)
    axiomClass.AddAttribute('TypeReference morphTag', group=GROUPS.Content, caption='Tag for morphset', allowedClasses='Tag')
    axiomClass.AddAttribute('ContentReference morphsets', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Morphsets for 3P character')
    axiomClass = ax2.CreateClass('EffectorCullParam', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Meter effectCullDistance = 100', range=(-1, 5000), text='cull distance for muzzle flash and impact effect, specify -1 to disable the culling')
    axiomClass.AddAttribute('Meter impactSoundCullDistance = 10', range=(-1, 5000), text='cull distance for impact sound, specify -1 to disable the culling')
    axiomClass.AddAttribute('Meter firingSoundCullDistance = 10', range=(-1, 5000), text='cull distance for firing sound, specify -1 to disable the culling')
    axiomClass = ax2.CreateClass('MaterialOverrideItem', standalone=False, forUE3=False, modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('ContentReference material', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS, caption='Material', text='The material with which to override.')
    axiomClass.AddAttribute('Int channel', group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS, caption='Channel', text='The material channel that the material is to be put into.')
    axiomClass = ax2.CreateClass('WeaponEffector', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mMesh')
    axiomClass.AddAttribute('MaterialModifier mMeshMaterialModifiers', modifyFlag=MODIFY_REMOVED, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Mesh Material Modifiers', text='Modifiers that setup the parameters for the mesh materials')
    axiomClass.AddAttribute('MaterialOverrideItem mMaterialOverrides', modifyFlag=MODIFY_REMOVED, group=GROUPS.Content, attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET, caption='Materials to Override with', text='Materials that the weapon effector use to override original ones.')
    axiomClass.AddAttribute('SurfaceHitEffect mImpactEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('WeaponSound mWeaponSound', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('WeaponMuzzleFlashInfo mMuzzleFlashInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('WeaponSeizeInfo mSeizeInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('WeaponSeizeInfo mStopFireInfo', modifyFlag=MODIFY_REMOVED, attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('WeaponOverHeatInfo mOverHeatInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('WeaponChargeInfo m_ChargeInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS, caption='Weapon Charge Info', text='Setup information for the particle effects related to charge-to-fire weapons')
    axiomClass.AddAttribute('SimpleSound mBeamSound', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('WeaponBeamEffectInfo mBeamEffectInfo', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('SurfaceHitSound mImpactSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TracerParam mTracerParam', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('WeaponMuzzleLightInfo mMuzzleLights', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('ContentReference mAnimSetsForCharacter', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 3P character (Standing)')
    axiomClass.AddAttribute('ContentReference mAnimSetsForCharacterCrouch', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 3P character (Crouch)')
    axiomClass.AddAttribute('ContentReference mAnimSetsForCharacterWeaponEmptied', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 3P character (Standing, weapon emptied)')
    axiomClass.AddAttribute('ContentReference mAnimSetsForCharacterCrouchWeaponEmptied', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Animation sets for 3P character (Crouch, weapon emptied)')
    axiomClass.AddAttribute('MorphsetEntry mMorphSetList', attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Morphsets look-up table')
    axiomClass.AddAttribute('ForceFeedbackInfo mFiringForceFeedback', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('WeaponCameraShake mCamShakeInfo0', group=GROUPS.Content)
    axiomClass.AddAttribute('EffectorCullParam mCullParam', group=GROUPS.Content, caption='Effect and sound culling params')
    axiomClass.AddAttribute('Name mAttachSocketName', uemodifier='private const', text='the socket to attach this effector to for 3P character')
    axiomClass.AddAttribute('ContentReference mWeaponWhipSound', attributeFlag=DEFAULT_ATTRIB_FLAGS ^ ATTRIB_FLAGS.EXPORTED)
    axiomClass.AddAttribute('Float mImpactSoundInterval = 1', uemodifier='private const', modifyFlag=MODIFY_REMOVED)
    axiomClass.AddAttribute('WeaponSeizeInfo mStopFireEffect', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('WeaponFireIntervalInfo mFireIntervalEffect', attributeFlag=DEFAULT_ATTRIB_FLAGS)
    axiomClass.AddAttribute('Bool mActivateHandIK = true', caption='Activate Hand IK')
    axiomClass.AddAttribute('ContentReference mMorphsetsForCharacter', modifyFlag=MODIFY_REMOVED, attributeFlag=(DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET) ^ ATTRIB_FLAGS.EXPORTED, caption='Morphsets for 3P character')
    axiomClass = ax2.CreateClass('TurretContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mMesh')
    axiomClass.AddAttribute('SkeletalMeshComponent mSimpleMesh')
    axiomClass.AddAttribute('TaggedSound m_aTaggedSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('ProjectileContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass = ax2.CreateClass('ExplosionCullParam', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Meter effectCullDistance = 100', range=(-1, 5000), text='cull distance for the particle effect, specify -1 to disable the culling')
    axiomClass.AddAttribute('Meter soundCullDistance = 100', range=(-1, 5000), text='cull distance for the sound, specify -1 to disable the culling')
    axiomClass.AddAttribute('Meter tinnitusEffectDistance = 0', range=(-1, 5000), text='Distance to activate tinnitus effect on explosion')
    axiomClass = ax2.CreateClass('RadialBlurParam', standalone=False, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('Float maxScale = 2')
    axiomClass.AddAttribute('Float fadeOutTime = 1')
    axiomClass = ax2.CreateClass('ExplosionContent', standalone=True, forUE3=True, group=GROUPS.Content)
    axiomClass.AddAttribute('SurfaceHitEffect mImpactEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('SurfaceHitSound mImpactSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('PointLightInfo mPointLight')
    axiomClass.AddAttribute('ExplosionCullParam mCullParams', caption='Effect and sound culling params')
    axiomClass.AddAttribute('RadialBlurParam mRadialBlurParam')
    axiomClass.AddAttribute('CameraShakeParam mCameraShakeParam')
    axiomClass = ax2.CreateClass('MCCContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mMesh')
    axiomClass.AddAttribute('TaggedEffect mMccEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TaggedSound mMccSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('TetheringSpireContent', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('SkeletalMeshComponent mMesh')
    axiomClass.AddAttribute('TaggedEffect mTetheringSpireEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass.AddAttribute('TaggedSound mTetheringSpireSounds', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)
    axiomClass = ax2.CreateClass('DustEffectLocator', standalone=True, forUE3=False, group=GROUPS.Content)
    axiomClass.AddAttribute('TaggedEffect mTaggedEffects', attributeFlag=DEFAULT_ATTRIB_FLAGS | ATTRIB_FLAGS.IS_SET)