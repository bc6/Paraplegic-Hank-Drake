#Embedded file name: c:/depot/games/branches/release/EVE-TRANQUILITY/carbon/client/script/ui/uitest/uitestStretchLine.py
import uicls
import uiutil
import uiconst
import blue
import trinity
import bluepy

class StretchLine(uicls.Sprite):
    __guid__ = 'uicls.StretchLine'
    __renderObject__ = trinity.Tr2Sprite2dLine
    default_name = 'StretchLine'
    default_align = uiconst.NOALIGN
    default_color = (1, 1, 1, 0.25)
    default_fromPos = (0, 0)
    default_toPos = (0, 0)
    default_widthFrom = 20
    default_widthTo = 20
    default_texturePath = 'res:/UI/Sprite/CarbonTest/pointer.dds'

    def ApplyAttributes(self, attributes):
        uicls.Sprite.ApplyAttributes(self, attributes)
        self.CreateCurveSets()
        self.fromPos = attributes.get('fromPos', self.default_fromPos)
        self.widthFrom = attributes.get('widthFrom', self.default_widthFrom)
        self.toPos = attributes.get('toPos', self.default_toPos)
        self.widthTo = attributes.get('widthTo', self.default_widthTo)
        self.__dict__['stretchLineIsReady'] = True
        self.UpdateRenderObject()

    def UpdateRenderObject(self):
        if 'stretchLineIsReady' not in self.__dict__:
            return
        RO = self.GetRenderObject()
        if not RO:
            return
        RO.name = u'asdfasdf'
        RO.texturePrimary = self.texture.GetTriTexture()
        RO.texturePrimary.srcX = self.rectLeft
        RO.texturePrimary.srcY = self.rectTop
        RO.texturePrimary.srcWidth = self.rectWidth
        RO.texturePrimary.srcHeight = self.rectHeight
        RO.display = self.display
        RO.color = self.color.GetRGBA()
        RO.blendMode = self.blendMode
        RO.translationFrom = self.fromPos
        RO.translationTo = self.toPos
        RO.widthFrom = self.widthFrom
        RO.widthTo = self.widthTo

    @bluepy.CCP_STATS_ZONE_METHOD
    def UpdateAlignment(self, budget = None, *args, **kwds):
        return budget

    def BindTo(self, object, offset = (0, 0)):
        self.CreateBinding(object.GetRenderObject(), 'translation', self.GetRenderObject(), 'translationTo', offset, uicore.stretchLinesCS)

    def BindFrom(self, object, offset = (0, 0)):
        self.CreateBinding(object.GetRenderObject(), 'translation', self.GetRenderObject(), 'translationFrom', offset, uicore.stretchLinesCS)

    def ReleaseBindings(self):
        pass

    def CreateCurveSets(self):
        if getattr(uicore, 'stretchLinesCS', None):
            return
        desktopRO = uicore.desktop.GetRenderObject()
        stretchLinesCS = trinity.TriCurveSet()
        stretchLinesCS.name = 'StretchLines CurveSet'
        stretchLinesCS.Play()
        desktopRO.curveSets.append(stretchLinesCS)
        uicore.stretchLinesCS = stretchLinesCS

    def CreateBinding(self, sourceObject, sourceAttribute, destObject, destAttribute, offset, curveSet):
        binding = trinity.TriValueBinding()
        binding.sourceObject = sourceObject
        binding.sourceAttribute = sourceAttribute
        binding.destinationObject = destObject
        binding.destinationAttribute = destAttribute
        binding.offset = offset
        curveSet.bindings.append(binding)
        return binding