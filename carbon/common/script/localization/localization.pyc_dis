#Embedded file name: c:/depot/games/branches/release/EVE-TRANQUILITY/carbon/common/script/localization/localization.py
import __builtin__
import cPickle as pickle
import blue
import bluepy
import miscUtil
import log
import eveLocalization
import localization
import localizationUtil
import localizationInternalUtil
import uthread
import hashlib
import sys
from service import ROLEMASK_ELEVATEDPLAYER
OFFSET_TEXT = 0
OFFSET_METADATA = 1
OFFSET_TOKENS = 2
IMPORTANT_EN_OVERRIDE = 1
IMPORTANT_EN_TOOLTIP = 2
HIGHLIGHT_IMPORTANT_MARKER = '*'
SYSTEM_LANGUAGE = ''
logChannel = log.GetChannel('Localization')

def LogInfo(*args):
    logChannel.Log('Localization module: ' + ''.join(map(strx, args)), logChannel.flags['INFO'])


def LogWarn(*args):
    logChannel.Log('Localization module: ' + ''.join(map(strx, args)), logChannel.flags['WARN'])


def LogError(*args):
    logChannel.Log('Localization module: ' + ''.join(map(strx, args)), logChannel.flags['ERR'])


def LogTraceback(*args):
    logChannel.Log('Localization module: ' + ''.join(map(strx, args)), logChannel.flags['ERR'])
    log.LogTraceback('Localization module: ' + ''.join(map(strx, args)), channel='Localization', toConsole=0, toAlertSvc=0, severity=1, show_locals=0)


class Localization(object):
    __guid__ = 'localization.Localization'
    PICKLE_PREFIX = 'localization_'
    PICKLE_MAIN_NAME = 'localization_main'
    PICKLE_EXT = '.pickle'
    COMMON_RESOURCE_PATH = 'res:/localization/'
    FIELD_LABELS = 'labels'
    FIELD_LANGUAGES = 'languages'
    FIELD_MAPPING = 'mapping'
    FIELD_REGISTRATION = 'registration'
    FIELD_TYPES = 'types'
    FIELD_MAX_REVISION = 'maxRevision'
    FIELD_IMPORTANT = 'important'
    LANGUAGE_FIELD_ALL = 1
    LANGUAGE_FIELD_TEXTS = 1
    LANGUAGE_FIELD_DATA = 2
    LANGUAGE_FIELD_TOKENS = 3

    def __init__(self):
        self._InitializeInternalVariables()
        self._InitializeTextData()
        self._importantNameSetting = None
        self._languageTooltipSetting = None
        self._qaTooltipOverride = None
        self._highlightImportantSetting = None
        uthread.worker('localization::_SetHardcodedStringDetection', self._SetHardcodedStringDetection)
        if not self._ReadLocalizationMainPickle():
            message = 'Cerberus localization module failed to load MAIN pickle on ' + boot.role + '.  See log server for details.'
            LogError(message)
            print message
            return
        self._ValidateAndRepairPrefs()
        if not self._ReadLocalizationLanguagePickles():
            message = 'Cerberus localization module failed to load language pickles on ' + boot.role + '. See log server for details.'
            LogError(message)
            print message
            return
        message = 'Cerberus localization module loaded on ' + boot.role
        LogInfo(message)
        print message

    def GetLanguages(self):
        langs = self.languagesDefined.keys()
        return langs

    @bluepy.CCP_STATS_ZONE_METHOD
    def LoadPrimaryLanguage(self, languageID = None, importantOnly = False):
        if languageID is None:
            languageID = self._GetPrimaryLanguage()
        languageID = localizationInternalUtil.StandardizeLanguageID(languageID)
        if self._primaryLanguageID:
            self._UnloadLanguageLocalizationData(self._primaryLanguageID)
        self._primaryLanguageID = languageID
        eveLocalization.SetPrimaryLanguage(languageID)
        if self._primaryLanguageID in self.languagesDefined:
            if not self._LoadLanguagePickle(self._primaryLanguageID, importantOnly):
                return False
        else:
            LogError("Language '", languageID, "' is not enabled. Text data was not loaded.")
            return False
        return True

    @bluepy.CCP_STATS_ZONE_METHOD
    def LoadSecondaryLanguage(self, languageID):
        if boot.role != 'client':
            return False
        languageID = localizationInternalUtil.StandardizeLanguageID(languageID)
        if self._secondaryLanguageID:
            self._UnloadLanguageLocalizationData(self._secondaryLanguageID)
        if languageID == self._primaryLanguageID:
            self._secondaryLanguageID = None
            return True
        self._secondaryLanguageID = languageID
        if self._secondaryLanguageID in self.languagesDefined:
            if not self._LoadLanguagePickle(self._secondaryLanguageID):
                return False
        else:
            LogError("Language '", languageID, "' is not enabled. Text data was not loaded.")
            return False
        return True

    @bluepy.CCP_STATS_ZONE_METHOD
    def GetByMapping(self, resourceName, keyID, propertyName = None, languageID = None, **kwargs):
        try:
            tableRegID = self.tableRegistration[resourceName]
            messageID = self.messageMapping[tableRegID, keyID]
        except KeyError as e:
            LogTraceback("No mapping entry for '", resourceName, "' with keyID ", keyID, '.  Usually this is either because the source column was NULL for this row (NULL entries are not imported), or because the source column has been deleted on the content database, but not the database you are using.')
            return u'[no resource: %s, %s]' % (resourceName, keyID)

        if propertyName is None:
            return self.GetByMessageID(messageID, languageID, **kwargs)
        else:
            return self.GetMetaData(messageID, propertyName, languageID)

    def GetImportantByMessageID(self, messageID, **kwargs):
        if boot.region == 'optic':
            if not (session and session.role & ROLEMASK_ELEVATEDPLAYER):
                return self.GetByMessageID(messageID, **kwargs)
        playerLanguageID = localizationUtil.GetLanguageID()
        textString = None
        if playerLanguageID != self._primaryLanguageID or self._QaTooltipOverride():
            if self.UsePrimaryLanguageText():
                textString = self.GetByMessageID(messageID, self._primaryLanguageID, **kwargs)
                hintLang = playerLanguageID
            else:
                textString = self.GetByMessageID(messageID, playerLanguageID, **kwargs)
                hintLang = self._primaryLanguageID
            if self.HighlightImportant():
                textString = '%s%s' % (textString, HIGHLIGHT_IMPORTANT_MARKER)
            if self.UseImportantTooltip() and not localizationUtil.IsWrapModeOn():
                if self._QaTooltipOverride() and playerLanguageID == self._primaryLanguageID:
                    hintString = textString[:-1][::-1]
                else:
                    hintString = self.GetByMessageID(messageID, hintLang, **kwargs)
                hintString = hintString.replace('"', "'").replace('<', '[').replace('>', ']')
                textString = '<localized hint="%s">%s</localized>' % (hintString or '', textString)
        else:
            textString = self.GetByMessageID(messageID, **kwargs)
        return textString

    def GetImportantByLabel(self, labelNameAndPath, **kwargs):
        try:
            messageID = self.languageLabels[labelNameAndPath]
        except KeyError:
            LogTraceback("No label with name '", labelNameAndPath, "'.")
            return '[no label: %s]' % labelNameAndPath

        return self.GetImportantByMessageID(messageID, **kwargs)

    def FormatImportantString(self, locText, englishText):
        if boot.region == 'optic':
            if not (session and session.role & ROLEMASK_ELEVATEDPLAYER):
                return locText
        playerLanguageID = localizationUtil.GetLanguageID()
        textString = None
        if playerLanguageID != self._primaryLanguageID:
            if self.UsePrimaryLanguageText():
                textString = englishText
                hintText = locText
            else:
                textString = locText
                hintText = englishText
            if self.HighlightImportant():
                textString = '%s*' % textString
            if self.UseImportantTooltip() and not localizationUtil.IsWrapModeOn():
                textString = '<localized hint="%s">%s</localized>' % (hintText, textString)
        else:
            textString = locText
        return textString

    @bluepy.CCP_STATS_ZONE_METHOD
    def GetByMessageID(self, messageID, languageID = None, **kwargs):
        if messageID is None:
            return ''
        if languageID is not None:
            languageID = localizationInternalUtil.StandardizeLanguageID(languageID)
        if languageID is None:
            languageID = localizationUtil.GetLanguageID()
        if session and 'player' not in kwargs:
            kwargs['player'] = session.charid
        try:
            textString = self._GetByMessageID(messageID, languageID, **kwargs)
            return localizationInternalUtil.PrepareLocalizationSafeString(textString, messageID=messageID)
        except KeyError:
            log.LogException()
            return u'[no messageID: %s]' % messageID
        except:
            log.LogException()
            try:
                return self._GetRawByMessageID(messageID)
            except:
                return u'[no messageID: %s]' % messageID

    @bluepy.CCP_STATS_ZONE_METHOD
    def GetByLabel(self, labelNameAndPath, languageID = None, **kwargs):
        try:
            messageID = self.languageLabels[labelNameAndPath]
        except KeyError:
            LogTraceback("No label with name '", labelNameAndPath, "'.")
            return '[no label: %s]' % labelNameAndPath

        return self.GetByMessageID(messageID, languageID, **kwargs)

    def IsValidMessageID(self, messageID, languageID = None):
        languageID = languageID or localizationUtil.GetLanguageID()
        return eveLocalization.IsValidMessageID(messageID, languageID)

    def IsValidLabel(self, labelNameAndPath, languageID = None):
        try:
            messageID = self.languageLabels[labelNameAndPath]
            return self.IsValidMessageID(messageID, languageID)
        except KeyError:
            return False

    def IsValidMapping(self, resourceName, keyID):
        if resourceName in self.tableRegistration:
            return (self.tableRegistration[resourceName], keyID) in self.messageMapping
        return False

    def IsValidTypeAndProperty(self, typeName, propertyName, languageID = None):
        IS_INVALID_TYPE = 0
        IS_INVALID_PROPERTY = 1
        IS_VALID_TYPE_AND_PROPERTY = 2
        result = None
        languageID = localizationInternalUtil.StandardizeLanguageID(languageID) or localizationUtil.GetLanguageID()
        foundType = self.languageTypesWithProperties.get(typeName, None)
        if foundType is not None:
            foundPropertyList = foundType.get(languageID, None)
            if foundPropertyList is not None:
                if propertyName in foundPropertyList:
                    result = IS_VALID_TYPE_AND_PROPERTY
                else:
                    result = IS_INVALID_PROPERTY
            else:
                result = IS_INVALID_PROPERTY
        else:
            result = IS_INVALID_TYPE
        if result == IS_INVALID_PROPERTY:
            LogError("'%s' is not a valid property for '%s' in language '%s'." % (propertyName, typeName, languageID))
        elif result == IS_INVALID_TYPE:
            LogError("'%s' is not a valid type; cannot retrieve properties for it." % typeName)
        elif result is None:
            LogError('IsValidTypeAndProperty wasnt able to determine if type and property were valid: %s, %s' % (typeName, propertyName))
        return result == IS_VALID_TYPE_AND_PROPERTY

    def GetMetaData(self, messageID, propertyName, languageID = None):
        languageID = localizationInternalUtil.StandardizeLanguageID(languageID) or localizationUtil.GetLanguageID()
        propertyString = self._GetMetaData(messageID, propertyName, languageID)
        if propertyString is not None:
            return localizationInternalUtil.PrepareLocalizationSafeString(propertyString, messageID=messageID)
        LogError('a non existent property was requested. messageID,propertyName,languageID : %s,%s,%s' % (messageID, propertyName, languageID))
        return '[no property:%s,%s]' % (messageID, propertyName)

    def GetPlaceholderLabel(self, englishText, **kwargs):
        parsedText = localization._Parse(englishText, None, localization.LOCALE_SHORT_ENGLISH, **kwargs)
        LogWarn('Placeholder label (%s) needs to be replaced.' % englishText)
        return localizationInternalUtil.PreparePlaceholderString('!_%s_!' % parsedText)

    def _ValidateAndRepairPrefs(self):
        if boot.role == 'client':
            while not hasattr(__builtin__, 'prefs'):
                blue.synchro.Yield()

            prefsLanguage = prefs.GetValue('languageID', None)
            if localizationInternalUtil.ConvertToLanguageSet('MLS', 'languageID', prefsLanguage) not in self.GetLanguages():
                prefs.languageID = 'EN' if boot.region != 'optic' else 'ZH'

    def _ReadMainLocalizationData(self, unPickledObject):
        self._ClearTextData()
        if unPickledObject and self.FIELD_LABELS in unPickledObject:
            labelsDict = unPickledObject[self.FIELD_LABELS]
            for aMessageID in labelsDict:
                dataRow = labelsDict[aMessageID]
                pathAndLabelKey = None
                if dataRow[localization.COLUMN_FULLPATH]:
                    aFullPath = dataRow[localization.COLUMN_FULLPATH]
                    pathAndLabelKey = aFullPath + localization.FOLDER_NAME_CHAR_SEPARATOR + dataRow[localization.COLUMN_LABEL]
                else:
                    pathAndLabelKey = dataRow[localization.COLUMN_LABEL]
                self.languageLabels[pathAndLabelKey.encode('ascii')] = aMessageID

        else:
            LogError("didn't find 'labels' in the unpickled object. File name = %s" % (self.PICKLE_MAIN_NAME + self.PICKLE_EXT))
            return False
        if self.FIELD_IMPORTANT in unPickledObject:
            self.importantMessages = unPickledObject[self.FIELD_IMPORTANT]
        else:
            LogWarn("didn't find 'important' in the unpickled object. File name = %s" % (self.PICKLE_MAIN_NAME + self.PICKLE_EXT))
        if self.FIELD_LANGUAGES in unPickledObject:
            self.languagesDefined = dict(filter(lambda (k, v): self._IsValidLanguage(k), unPickledObject[self.FIELD_LANGUAGES].items()))
        else:
            LogError("didn't find 'languages' in the unpickled object. File name = %s" % (self.PICKLE_MAIN_NAME + self.PICKLE_EXT))
            return False
        if self.FIELD_REGISTRATION in unPickledObject and self.FIELD_MAPPING in unPickledObject:
            self.tableRegistration = unPickledObject[self.FIELD_REGISTRATION]
            self.messageMapping = unPickledObject[self.FIELD_MAPPING]
        else:
            LogError("didn't find 'mapping' or 'registration' in the unpickled object. File name = %s" % (self.PICKLE_MAIN_NAME + self.PICKLE_EXT))
            return False
        if self.FIELD_TYPES in unPickledObject:
            self.languageTypesWithProperties = unPickledObject[self.FIELD_TYPES]
        else:
            LogError("didn't find 'types' in the unpickled object. File name = %s" % (self.PICKLE_MAIN_NAME + self.PICKLE_EXT))
            return False
        if self.FIELD_MAX_REVISION in unPickledObject:
            self.maxRevision = unPickledObject[self.FIELD_MAX_REVISION]
        else:
            LogError("didn't find 'maxRevision' in the unpickled object. File name = %s" % (self.PICKLE_MAIN_NAME + self.PICKLE_EXT))
            return False
        return True

    def _IsValidLanguage(self, languageID):
        if boot.role == 'client':
            if languageID == localization.LOCALE_SHORT_CHINESE:
                return boot.region == 'optic'
            elif languageID == localization.LOCALE_SHORT_ENGLISH:
                return True
            else:
                return boot.region != 'optic'
        return True

    def _UnloadLanguageLocalizationData(self, aLangCode):
        LogInfo('Unloading message data for ', aLangCode)
        eveLocalization.UnloadMessageData(aLangCode)

    def _ReadLanguageLocalizationData(self, aLangCode, unPickledObject, importantOnly = False):
        if aLangCode:
            self._UnloadLanguageLocalizationData(aLangCode)
        try:
            if not importantOnly:
                LogInfo('Loading all message data for language ', aLangCode)
                eveLocalization.LoadMessageData(aLangCode, unPickledObject[self.LANGUAGE_FIELD_ALL])
            else:
                LogInfo('Loading only important message data for language ', aLangCode)
                impMessages = {}
                for k in self.importantMessages.iterkeys():
                    impMessages[k] = unPickledObject[self.LANGUAGE_FIELD_ALL][k]

                eveLocalization.LoadMessageData(aLangCode, impMessages)
        except:
            log.LogException()

        return True

    @bluepy.CCP_STATS_ZONE_METHOD
    def UsePrimaryLanguageText(self):
        if self._importantNameSetting is None:
            if localizationUtil.GetLanguageID() == self._primaryLanguageID:
                self._importantNameSetting = 0
            else:
                self._importantNameSetting = int(prefs.GetValue('localizationImportantNames', 0))
        return self._importantNameSetting == IMPORTANT_EN_OVERRIDE

    def HighlightImportant(self):
        if self._highlightImportantSetting is None:
            if localizationUtil.GetLanguageID() == self._primaryLanguageID:
                self._highlightImportantSetting = self._QaTooltipOverride()
            else:
                self._highlightImportantSetting = bool(prefs.GetValue('localizationHighlightImportant', True))
        return self._highlightImportantSetting

    def UseImportantTooltip(self):
        if self._languageTooltipSetting is None:
            if localizationUtil.GetLanguageID() == self._primaryLanguageID:
                self._languageTooltipSetting = self._QaTooltipOverride()
            else:
                self._languageTooltipSetting = bool(prefs.GetValue('languageTooltip', True))
        return self._languageTooltipSetting

    def _QaTooltipOverride(self):
        if self._qaTooltipOverride is None:
            if localizationUtil.GetLanguageID() == self._primaryLanguageID:
                self._qaTooltipOverride = bool(prefs.GetValue('simulateTooltip', False))
            else:
                self._qaTooltipOverride
        return self._qaTooltipOverride

    def ClearImportantNameSetting(self):
        self._importantNameSetting = None
        self._highlightImportantSetting = None
        self._languageTooltipSetting = None
        self._qaTooltipOverride = None
        cfg.ReloadLocalizedNames()

    def _ClearTextData(self):
        del self.languagesDefined
        del self.languageLabels
        del self.languageTypesWithProperties
        del self.tableRegistration
        del self.messageMapping
        del self.importantMessages
        self._InitializeTextData()

    def _InitializeInternalVariables(self):
        self.hashDataDictionary = {}

    def _InitializeTextData(self):
        self.languagesDefined = {}
        self.languageLabels = {}
        self.importantMessages = {}
        self.languageTypesWithProperties = {}
        self.tableRegistration = {}
        self.messageMapping = {}
        self.maxRevision = None
        self._primaryLanguageID = None
        self._secondaryLanguageID = None

    def UpdateTextCache(self, messagePerLanguage, metaDataPerLanguage, labelsDict):
        for language in messagePerLanguage:
            LogInfo('Preparing to update internal text and label cache. The sizes of new data dictionaries are: ', len(messagePerLanguage.get(language, {})), ', ', len(metaDataPerLanguage.get(language, {})))
            if eveLocalization.HasLanguage(language):
                newData = {}
                for messageID, text in messagePerLanguage.get(language, {}).iteritems():
                    try:
                        metaData = None
                        ignore, metaData, ignore = eveLocalization.GetMessageDataByID(messageID, language)
                    except KeyError:
                        sys.exc_clear()

                    try:
                        newData[messageID] = (text, metaData, localization._Tokenize(text))
                    except:
                        log.LogException()
                        continue

                try:
                    eveLocalization.LoadMessageData(language, newData)
                except:
                    log.LogException()
                    continue

        for language in metaDataPerLanguage:
            if eveLocalization.HasLanguage(language):
                for messageID, metaData in metaDataPerLanguage.get(language, {}).iteritems():
                    try:
                        text, ignore, tokens = eveLocalization.GetMessageDataByID(messageID, language)
                        eveLocalization.LoadMessageData(language, {messageID: (text, metaData, tokens)})
                    except:
                        log.LogException()

        LogInfo('Updating label cache. New data size is ', len(labelsDict))
        for label, messageID in labelsDict.iteritems():
            self.languageLabels[label.encode('ascii')] = messageID

    def GetMaxRevision(self):
        return self.maxRevision

    def GetHashDataDictionary(self):
        return self.hashDataDictionary

    def _ReadLocalizationMainPickle(self):
        unPickledObject = self._LoadPickleData(self.PICKLE_MAIN_NAME + self.PICKLE_EXT)
        if unPickledObject == None:
            return False
        readStatus = self._ReadMainLocalizationData(unPickledObject)
        del unPickledObject
        return readStatus

    def _GetPrimaryLanguage(self):
        return localization.LOCALE_SHORT_ENGLISH

    def IsPrimaryLanguage(self, languageID):
        languageID = localizationInternalUtil.StandardizeLanguageID(languageID)
        return languageID == self._GetPrimaryLanguage()

    def _ReadLocalizationLanguagePickles(self):
        primaryLanguage = self._GetPrimaryLanguage()
        if boot.role == 'client':
            prefsLanguage = localizationInternalUtil.StandardizeLanguageID(prefs.GetValue('languageID', None))
            if prefsLanguage != primaryLanguage:
                if not (self.LoadPrimaryLanguage(importantOnly=False) and self.LoadSecondaryLanguage(prefsLanguage)):
                    return False
            else:
                return self.LoadPrimaryLanguage()
        elif boot.role == 'server' or boot.role == 'proxy':
            if not self.LoadPrimaryLanguage():
                return False
            for aLangCode in self.languagesDefined:
                if aLangCode != self._primaryLanguageID and not self._LoadLanguagePickle(aLangCode):
                    return False

        return True

    def _LoadLanguagePickle(self, languageID, importantOnly = False):
        unPickledObject = self._LoadPickleData(self.PICKLE_PREFIX + languageID + self.PICKLE_EXT)
        if unPickledObject == None:
            return False
        readStatus = self._ReadLanguageLocalizationData(languageID, unPickledObject, importantOnly)
        del unPickledObject
        return readStatus

    def _LoadPickleData(self, pickleName):
        pickleFile = miscUtil.GetCommonResource(self.COMMON_RESOURCE_PATH + pickleName)
        if not pickleFile:
            LogError('Could not load pickle file.', pickleName, 'appears to be missing. The localization module will not be able to access labels or texts.')
            return None
        pickledData = pickleFile.Read()
        if not pickledData:
            pickleFile.Close()
            del pickleFile
            LogError('Could not read pickle data from file. ', pickleName, 'may be corrupt. The localization module will not be able to access labels or texts.')
            return None
        unPickledObject = pickle.loads(pickledData)

        def md5ForFile(file, block_size = 1048576):
            md5 = hashlib.md5()
            while True:
                data = file.read(block_size)
                if not data:
                    break
                md5.update(data)

            return md5.digest()

        self.hashDataDictionary[pickleName] = md5ForFile(pickleFile)
        pickleFile.Close()
        del pickleFile
        del pickledData
        return unPickledObject

    def _GetRawByMessageID(self, messageID, languageID = None, **kwargs):
        languageID = languageID or localizationUtil.GetLanguageID()
        try:
            return eveLocalization.GetRawByMessageID(messageID, languageID)
        except:
            return '[no messageid: %s]' % messageID

    def _SetHardcodedStringDetection(self):
        if boot.role != 'client':
            return
        while not hasattr(__builtin__, 'prefs'):
            blue.synchro.Yield()

        localizationInternalUtil.LoadQASettings()
        localizationUtil.SetHardcodedStringDetection(getattr(prefs, 'showHardcodedStrings', False))


LOCALIZATION_REF = Localization()
LOCALIZATION_REF._GetByMessageID = eveLocalization.GetMessageByID
LOCALIZATION_REF._GetMetaData = eveLocalization.GetMetaDataByID
exports = {'localization.GetByMessageID': LOCALIZATION_REF.GetByMessageID,
 'localization.GetByLabel': LOCALIZATION_REF.GetByLabel,
 'localization.GetImportantByMessageID': LOCALIZATION_REF.GetImportantByMessageID,
 'localization.GetImportantByLabel': LOCALIZATION_REF.GetImportantByLabel,
 'localization.GetPlaceholderLabel': LOCALIZATION_REF.GetPlaceholderLabel,
 'localization.GetByMapping': LOCALIZATION_REF.GetByMapping,
 'localization.GetMetaData': LOCALIZATION_REF.GetMetaData,
 'localization.IsValidTypeAndProperty': LOCALIZATION_REF.IsValidTypeAndProperty,
 'localization.IsValidLabel': LOCALIZATION_REF.IsValidLabel,
 'localization.IsValidMessageID': LOCALIZATION_REF.IsValidMessageID,
 'localization.IsValidMapping': LOCALIZATION_REF.IsValidMessageID,
 'localization.LogInfo': LogInfo,
 'localization.LogWarn': LogWarn,
 'localization.LogError': LogError,
 'localization.LogTraceback': LogTraceback,
 'localization.LoadPrimaryLanguage': LOCALIZATION_REF.LoadPrimaryLanguage,
 'localization.LoadSecondaryLanguage': LOCALIZATION_REF.LoadSecondaryLanguage,
 'localization.GetLanguages': LOCALIZATION_REF.GetLanguages,
 'localization.UpdateTextCache': LOCALIZATION_REF.UpdateTextCache,
 'localization.GetMaxRevision': LOCALIZATION_REF.GetMaxRevision,
 'localization.GetHashDataDictionary': LOCALIZATION_REF.GetHashDataDictionary,
 'localization.IsPrimaryLanguage': LOCALIZATION_REF.IsPrimaryLanguage,
 'localization.ClearImportantNameSetting': LOCALIZATION_REF.ClearImportantNameSetting,
 'localization.SetTimeDelta': eveLocalization.SetTimeDelta,
 'localization.IMPORTANT_EN_OVERRIDE': IMPORTANT_EN_OVERRIDE,
 'localization.IMPORTANT_EN_TOOLTIP': IMPORTANT_EN_TOOLTIP,
 'localization.SYSTEM_LANGUAGE': SYSTEM_LANGUAGE,
 'localization.UsePrimaryLanguageText': LOCALIZATION_REF.UsePrimaryLanguageText,
 'localization.UseImportantTooltip': LOCALIZATION_REF.UseImportantTooltip,
 'localization.HighlightImportant': LOCALIZATION_REF.HighlightImportant,
 'localization.FormatImportantString': LOCALIZATION_REF.FormatImportantString,
 'localization._ReadLocalizationMainPickle': LOCALIZATION_REF._ReadLocalizationMainPickle,
 'localization._ReadLocalizationLanguagePickles': LOCALIZATION_REF._ReadLocalizationLanguagePickles,
 'localization.LOCALIZATION_REF': LOCALIZATION_REF,
 'localization._GetRawByMessageID': LOCALIZATION_REF._GetRawByMessageID,
 'localization.HIGHLIGHT_IMPORTANT_MARKER': HIGHLIGHT_IMPORTANT_MARKER}