#Embedded file name: c:/depot/games/branches/release/EVE-TRANQUILITY/carbon/common/script/sys/serviceProxy.py
import svc
import log
import zlib
import types
import inspect
import service

class ServiceProxy(object):
    __guid__ = 'service.ServiceProxy'
    _methods = {}

    def __init__(self, serviceName, session, reparse = True):
        self._serviceName = serviceName
        self._session = session
        if serviceName not in self._methods or reparse:
            self._methods[serviceName] = self._WrapService(serviceName)
        for methodName, method in self._methods[serviceName].iteritems():
            setattr(self, methodName, types.MethodType(method, self, self.__class__))

    def __repr__(self):
        return '<ServiceProxy service=%s session=%s>' % (str(self._serviceName), str(self._session))

    def _WrapService(self, serviceName):
        serviceClass = getattr(svc, sm.GetServiceImplementation(serviceName))
        defaultResolve = getattr(serviceClass, '__serviceproxyresolve__', None)
        exportedCalls = getattr(serviceClass, '__exportedcalls__', {})
        exportedCalls = [ (k, v) for k, v in exportedCalls.iteritems() if isinstance(v, dict) ]
        wrappedMethods = {}
        for methodName, definition in exportedCalls:
            resolve = definition.get('resolve', defaultResolve)
            if resolve is not None:
                wrappedMethods[methodName] = self._WrapServiceMethod(methodName, getattr(serviceClass, methodName), resolve)

        return wrappedMethods

    def _WrapServiceMethod(self, methodName, method, resolve):
        resolveConst, resolveArgument = resolve
        argspec = inspect.getargspec(method)
        if isinstance(resolveArgument, str):
            resolveArgumentIndex = argspec[0].index(resolveArgument) - 1
        elif isinstance(resolveArgument, int) and resolveArgument in const.cluster.NODES:
            resolveArgumentIndex = None
        else:
            raise RuntimeError("Resolve argument '%s' for ServiceProxy '%s' is invalid" % (str(resolveArgument), self))

        def wrapped(self, *args, **kwargs):
            try:
                if resolveArgumentIndex is None:
                    resolveValue = resolveArgument
                else:
                    resolveValue = kwargs.get(resolveArgument, args[resolveArgumentIndex])
                    if isinstance(resolveValue, basestring):
                        resolveValue = zlib.crc32(resolveValue)
            except ValueError:
                raise RuntimeError("ServiceProxy could not find the resolve argument '%s' for the method '%s'" % (str(resolveArgument), methodName))

            if resolveValue == const.cluster.NODE_ALL:
                serviceObject = self._session.ConnectToAllServices(self._serviceName)
            elif resolveValue == const.cluster.NODE_ALL_SERVER:
                serviceObject = self._session.ConnectToAllSolServerServices(self._serviceName)
            elif resolveValue == const.cluster.NODE_ALL_PROXY:
                serviceObject = self._session.ConnectToAllProxyServerServices(self._serviceName)
            elif resolveValue == const.cluster.NODE_ANY:
                serviceObject = self._session.ConnectToAnyService(self._serviceName)
            elif resolveValue == const.cluster.NODE_ANY_SERVER:
                serviceObject = self._session.ConnectToSolServerService(self._serviceName)
            elif resolveValue == const.cluster.NODE_ANY_PROXY:
                serviceObject = self._session.ConnectToProxyServerService(self._serviceName)
            else:
                machoNet = sm.GetService('machoNet').session.ConnectToSolServerService('machoNet')
                serviceMod = const.cluster.SERVICE_MODS.get(resolveConst, const.cluster.SERVICE_MOD_DEFAULT)
                nodeID = machoNet.GetNodeFromAddress(resolveConst, resolveValue % serviceMod)
                serviceObject = self._session.ConnectToRemoteService(self._serviceName, nodeID=nodeID)
            response = getattr(serviceObject, methodName)(*args, **kwargs)
            if resolveValue in [const.cluster.NODE_ALL, const.cluster.NODE_ALL_SERVER, const.cluster.NODE_ALL_PROXY]:
                for isException, nodeID, value in response:
                    if isException:
                        raise UberMachoException(response)

            return response

        execdict = {'wrapped': wrapped}
        exec 'def %s%s: return wrapped(%s)' % (methodName, inspect.formatargspec(*argspec), ', '.join(argspec[0])) in execdict
        wrapped = execdict.get(methodName, wrapped)
        setattr(wrapped, '__doc__', method.__doc__)
        setattr(wrapped, '__name__', method.__name__)
        return wrapped


class ProxiedService(service.Service):
    pass